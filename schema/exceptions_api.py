# ./exceptions_api.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:8c26426d7f12588bb2dfe5897fe5b637c3de400d
# Generated 2013-11-09 17:39:50.323890 by PyXB version 1.2.3
# Namespace http://www.omg.org/spec/CTS2/1.1/Exceptions

import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:364c7059-4998-11e3-bd00-c82a1438c957')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.3'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import _nsgroup as _ImportedBinding__nsgroup
import pyxb.binding.datatypes
import core_service_api as _ImportedBinding_core_service_api

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/Exceptions', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, unicode):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception with content type ELEMENT_ONLY
class CTS2Exception_ (pyxb.binding.basis.complexTypeDefinition):
    """An exception generated by the CTS 2 service.
			"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'CTS2Exception')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 12, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Exceptions}message uses Python identifier message
    __message = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'message'), 'message', '__httpwww_omg_orgspecCTS21_1Exceptions_CTS2Exception__httpwww_omg_orgspecCTS21_1Exceptionsmessage', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3), )

    
    message = property(__message.value, __message.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Exceptions}severity uses Python identifier severity
    __severity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, u'severity'), 'severity', '__httpwww_omg_orgspecCTS21_1Exceptions_CTS2Exception__httpwww_omg_orgspecCTS21_1Exceptionsseverity', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3), )

    
    severity = property(__severity.value, __severity.set, None, None)

    _ElementMap.update({
        __message.name() : __message,
        __severity.name() : __severity
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'CTS2Exception', CTS2Exception_)


# Complex type [anonymous] with content type EMPTY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """The set of exceptions that pertain to a
					PropertyReferenceTarget"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 727, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.omg.org/spec/CTS2/1.1/Exceptions}UnknownResourceReference with content type ELEMENT_ONLY
class UnknownResourceReference_ (CTS2Exception_):
    """A $CTS_2$ resource was referenced by name, URI or
				external identifier that was not known to the $CTS_2$ service
				instance. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'UnknownResourceReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 55, 1)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'UnknownResourceReference', UnknownResourceReference_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Exceptions}UnsupportedNamespaceName with content type ELEMENT_ONLY
class UnsupportedNamespaceName_ (CTS2Exception_):
    """The supplied namespace name is not one that is
				known to the service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'UnsupportedNamespaceName')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 249, 1)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'UnsupportedNamespaceName', UnsupportedNamespaceName_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Exceptions}UnsupportedNameOrURI with content type ELEMENT_ONLY
class UnsupportedNameOrURI_ (CTS2Exception_):
    """The supplied NameOrURI is not recognized by the
				service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'UnsupportedNameOrURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 290, 1)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'UnsupportedNameOrURI', UnsupportedNameOrURI_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (CTS2Exception_):
    """The match value does not meet the format or syntax required or the supplied match algorithm.
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 331, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (CTS2Exception_):
    """The entity expression is syntactically incorrect
					and cannot be parsed"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 570, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (CTS2Exception_):
    """The changeSetContext is recognized but the
					service, but it state is not OPEN."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 584, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (CTS2Exception_):
    """The URI (entityID) of the supplied resource
					already exists in the service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 600, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (CTS2Exception_):
    """One of the supplied alternateIDs is not unique - it appears as an entryID or alternateID for a different resource of the same type."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 614, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (CTS2Exception_):
    """The Changeable resource referenced by entryID is not recognized by the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 627, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (CTS2Exception_):
    """The predecessor URI is not of the same type as its
					successor."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 639, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.omg.org/spec/CTS2/1.1/Exceptions}ResourceNameAlreadyExists with content type ELEMENT_ONLY
class ResourceNameAlreadyExists_ (CTS2Exception_):
    """The local identifier for the resource already
				exists in the service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'ResourceNameAlreadyExists')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 653, 1)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'ResourceNameAlreadyExists', ResourceNameAlreadyExists_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (CTS2Exception_):
    """The predecessor resource directly or indirectly
					precedes the resource being updated."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 666, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (CTS2Exception_):
    """The target resource version description has been
					finalized and cannot be updated."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 680, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (CTS2Exception_):
    """The resource being deleted did not match the state
					of the resource in the service. A change has occurred since the
					resource image has been retrieved."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 694, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (CTS2Exception_):
    """The type represented by the supplied directory URI
					is not the one required by the service invocation.
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 712, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (CTS2Exception_):
    """The timeLimit was exceeded by the service.
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 737, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (CTS2Exception_):
    """The supplied directory URI is not valid
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 751, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (CTS2Exception_):
    """The service requires that the scoped entity name
					be provided"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 769, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (CTS2Exception_):
    """The service expects to automatically generate the
					entityID for the supplied code system. It cannot be supplied in the
					API call."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 783, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (CTS2Exception_):
    """A description of the named entity already exists
					in the code system version"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 798, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (CTS2Exception_):
    """The supplied code system version URI is already a
					documentURI or alternateID for an existing code system version.
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 815, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (CTS2Exception_):
    """The supplied code system version name is already
					used for another entry."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 830, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (CTS2Exception_):
    """The service has determined that an association
					with the same identity criteria as the supplied association already
					exists in the service. What constitutes identity from an
					association standpoint is up to the service implementation.
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 904, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (CTS2Exception_):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 921, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (CTS2Exception_):
    """Exactly one of toCodeSystem and toValueSet must be
					supplied in a map catalog entry"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 975, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (CTS2Exception_):
    """Exactly one of fromCodeSystem and fromValueSet
					must be supplied in a map catalog entry"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 989, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (CTS2Exception_):
    """The supplied mapName already exists in the service
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1003, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (CTS2Exception_):
    """Exactly one of toCodeSystemVersion and
					toValueSetDefinition must be supplied in a map version
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1020, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (CTS2Exception_):
    """Exactly one of fromCodeSystemVersion and
					fromValueSetDefinition must be supplied in a map version
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1035, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (CTS2Exception_):
    """More than one concept domain is defined by the
					same definingEntity."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1067, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (CTS2Exception_):
    """There isn't any catalog entry that references the
					supplied entity in the supplied context."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1081, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (CTS2Exception_):
    """The supplied URI is already the about URI or
					alternateID for another concept domain in the service.
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1095, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (CTS2Exception_):
    """The concept domain name is already used for
					another catalog entry"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1110, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (CTS2Exception_):
    """The supplied value set URI already exists as an
					about or alternateID for a value set in the service.
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1127, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (CTS2Exception_):
    """The supplied valueSetName already exists in the
					service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1142, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (CTS2Exception_):
    """The supplied number does not reference an existing
					ValueSetDefinitionEntry or the operation would remove the last
					ValueSetDefinitionEntry from a definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1159, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (CTS2Exception_):
    """The named value set definition was not a
					definition for the named value set."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1174, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (CTS2Exception_):
    """The named code system version is not a version of
					the named code system."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1188, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (CTS2Exception_):
    """Inference is not supported for the supplied
					codeSystemVersion"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1204, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (CTS2Exception_):
    """a referenced resource already exists and overWrite
					is set to FAIL_IF_EXISTS"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1220, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (CTS2Exception_):
    """The processId is not known to the service
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1234, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (CTS2Exception_):
    """the process is unable to open the primary document
					to be imported"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1248, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (CTS2Exception_):
    """an error occurred while trying to write the
					exported image of a resource into the directory"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1262, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (CTS2Exception_):
    """the type of resource referenced by the directory
					is not supported by the service - either it can't be exported
					period or it can't be exported in the supplied language or format
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1276, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (CTS2Exception_):
    """the service is unable to access the supplied
					metadata document"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1292, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (CTS2Exception_):
    """An error was encountered in the metadata document.
					This error includes formatting errors, missing parameters and
					invalid content."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1306, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (CTS2Exception_):
    """the export service is unable to open or create the
					supplied target directory"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1321, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (CTS2Exception_):
    """Additional metadata must be supplied to perform
					this operation"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1335, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (CTS2Exception_):
    """The mapTo entity is not part of the toCodeSystemVersion or toValueSet in the map"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1352, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (CTS2Exception_):
    """The entryOrder does not reference an existing MapEntry"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1365, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (CTS2Exception_):
    """The supplied mapFrom entry is not a valid entity in the containing map's fromCodeSystem or fromValueSet."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1378, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (CTS2Exception_):
    """The supplied map rule is not recognized by the supporting tooling"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1391, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (CTS2Exception_):
    """A  MapSet must have at least one map target.  The last target cannot be removed from the set"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1404, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (CTS2Exception_):
    """The mapFrom entity already exists"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1417, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (CTS2Exception_):
    """The supplied fromEntry is not associated with any MapEntry in the referenced MapVersion."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1430, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (CTS2Exception_):
    """The referenced target slot is not valid in the containing map set"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1443, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (CTS2Exception_):
    """the LocalURI is not the name of a valid resolved value set"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1459, 2)
    _ElementMap = CTS2Exception_._ElementMap.copy()
    _AttributeMap = CTS2Exception_._AttributeMap.copy()
    # Base type is CTS2Exception_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (UnknownResourceReference_):
    """The value set name or URI is not recognized by the
					service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 27, 2)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (UnknownResourceReference_):
    """The referenced CodeSystemVersion is not recognized
					by the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 41, 2)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.omg.org/spec/CTS2/1.1/Exceptions}UnknownEntity with content type ELEMENT_ONLY
class UnknownEntity_ (UnknownResourceReference_):
    """The EntityNameOrURI is not known to the service
			"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'UnknownEntity')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 69, 1)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'UnknownEntity', UnknownEntity_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (UnknownResourceReference_):
    """The referenced CodeSystem is not recognized by the
					service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 82, 2)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (UnknownResourceReference_):
    """The referenced statement is not recognized by the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 96, 2)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (UnknownResourceReference_):
    """The change set specified could either not be read
					or located by the service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 109, 2)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (UnknownResourceReference_):
    """The referenced Association is not recognized by
					the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 123, 2)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (UnknownResourceReference_):
    """The named conceptDomain is not recognized by the
					service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 137, 2)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (UnknownResourceReference_):
    """The conceptDomainBinding URI is not recognized by
					the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 151, 2)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (UnknownResourceReference_):
    """The named Map is not recognized by the service
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 165, 2)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (UnknownResourceReference_):
    """The named mapVersion is not recognized by the
					service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 179, 2)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (UnknownResourceReference_):
    """The valueSetDefinition URI isn't recognized by the
					service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 193, 2)
    _ElementMap = UnknownResourceReference_._ElementMap.copy()
    _AttributeMap = UnknownResourceReference_._AttributeMap.copy()
    # Base type is UnknownResourceReference_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (UnsupportedNameOrURI_):
    """The bindingQualifier is not recognized by the
					system."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 207, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (UnsupportedNameOrURI_):
    """The name or URI of the Changeable status property
					is not recognized by the service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 221, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (UnsupportedNameOrURI_):
    """The role name or URI is not recognized by the
					service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 235, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (UnsupportedNameOrURI_):
    """The referenceLanguage is not supported by the
					service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 262, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (UnsupportedNameOrURI_):
    """One or more changeSetContext is not supported by
					the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 276, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (UnsupportedNameOrURI_):
    """The versionTag is not recognized by the service
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 303, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (UnsupportedNameOrURI_):
    """The matchAlgorithm is not supported by the service
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 317, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (UnsupportedNameOrURI_):
    """The supplied ontology language is not supported by
					the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 345, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (UnsupportedNameOrURI_):
    """The supplied ontology syntax is not supported by
					the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 359, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (UnsupportedNameOrURI_):
    """The supplied source is not recognized by the
					service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 373, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (UnsupportedNameOrURI_):
    """The caseSignificance indicator is not recognized
					by the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 387, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (UnsupportedNameOrURI_):
    """The designationFidelity is not recognized by the
					service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 401, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (UnsupportedNameOrURI_):
    """The designationType is not supported by the
					service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 415, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (UnsupportedNameOrURI_):
    """The format is not supported by the service
					implementation"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 429, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (UnsupportedNameOrURI_):
    """The formalityLevel is not recognized by the
					service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 443, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (UnsupportedNameOrURI_):
    """The mapCorrelation is not recognized by the
					service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 457, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (UnsupportedNameOrURI_):
    """The name or URI of $CTS_2$ model attribute is not
					recognized and/or supported by the service implementation
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 471, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (UnsupportedNameOrURI_):
    """The name or URI for the
					OntologyEngineeringMethodology is not recognized by the service.
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 486, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_83 (UnsupportedNameOrURI_):
    """The name or URI for the OntologyEngineeringTool is
					not recognized by the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 501, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (UnsupportedNameOrURI_):
    """The name or URI for the OntologyDomain is not
					recognized by the service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 515, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (UnsupportedNameOrURI_):
    """The name or URI for the OntologyTask is not
					recognized by the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 529, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_86 (UnsupportedNameOrURI_):
    """The name or URI for the OntologyType is not
					recognized by the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 543, 2)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.omg.org/spec/CTS2/1.1/Exceptions}UnsupportedPredicate with content type ELEMENT_ONLY
class UnsupportedPredicate_ (UnsupportedNameOrURI_):
    """The predicate name or URI is not recognized by the
				service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'UnsupportedPredicate')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 557, 1)
    _ElementMap = UnsupportedNameOrURI_._ElementMap.copy()
    _AttributeMap = UnsupportedNameOrURI_._AttributeMap.copy()
    # Base type is UnsupportedNameOrURI_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'UnsupportedPredicate', UnsupportedPredicate_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_87 (UnsupportedNamespaceName_):
    """The namespace in the subject identifier is not
					known to or supported by the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 847, 2)
    _ElementMap = UnsupportedNamespaceName_._ElementMap.copy()
    _AttributeMap = UnsupportedNamespaceName_._AttributeMap.copy()
    # Base type is UnsupportedNamespaceName_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type {http://www.omg.org/spec/CTS2/1.1/Exceptions}UnknownPredicateNamespaceName with content type ELEMENT_ONLY
class UnknownPredicateNamespaceName_ (UnsupportedNamespaceName_):
    """The namespace in the predicate identifier is not
				known to or supported by the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, u'UnknownPredicateNamespaceName')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 931, 1)
    _ElementMap = UnsupportedNamespaceName_._ElementMap.copy()
    _AttributeMap = UnsupportedNamespaceName_._AttributeMap.copy()
    # Base type is UnsupportedNamespaceName_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', u'UnknownPredicateNamespaceName', UnknownPredicateNamespaceName_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_88 (UnsupportedNamespaceName_):
    """The namespace in a target entity identifier is not
					known to or supported by the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 958, 2)
    _ElementMap = UnsupportedNamespaceName_._ElementMap.copy()
    _AttributeMap = UnsupportedNamespaceName_._AttributeMap.copy()
    # Base type is UnsupportedNamespaceName_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (ResourceNameAlreadyExists_):
    """The mapVersionName already exists in the catalog.
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1050, 2)
    _ElementMap = ResourceNameAlreadyExists_._ElementMap.copy()
    _AttributeMap = ResourceNameAlreadyExists_._AttributeMap.copy()
    # Base type is ResourceNameAlreadyExists_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (UnsupportedPredicate_):
    """The predicate of an association qualifier is not
					recognized by the service or is not considered to be a valid
					association qualifier."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 861, 2)
    _ElementMap = UnsupportedPredicate_._ElementMap.copy()
    _AttributeMap = UnsupportedPredicate_._AttributeMap.copy()
    # Base type is UnsupportedPredicate_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (UnknownEntity_):
    """The target EntityNameOrURI is not known to the
					service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 876, 2)
    _ElementMap = UnknownEntity_._ElementMap.copy()
    _AttributeMap = UnknownEntity_._AttributeMap.copy()
    # Base type is UnknownEntity_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_92 (UnknownPredicateNamespaceName_):
    """The namespace in the predicate identifier is not
					known to or supported by the service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 890, 2)
    _ElementMap = UnknownPredicateNamespaceName_._ElementMap.copy()
    _AttributeMap = UnknownPredicateNamespaceName_._AttributeMap.copy()
    # Base type is UnknownPredicateNamespaceName_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_93 (UnknownEntity_):
    """The EntityNameOrURI is not known to the service
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 944, 2)
    _ElementMap = UnknownEntity_._ElementMap.copy()
    _AttributeMap = UnknownEntity_._AttributeMap.copy()
    # Base type is UnknownEntity_
    
    # Element message ({http://www.omg.org/spec/CTS2/1.1/Exceptions}message) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    
    # Element severity ({http://www.omg.org/spec/CTS2/1.1/Exceptions}severity) inherited from {http://www.omg.org/spec/CTS2/1.1/Exceptions}CTS2Exception
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



CTS2Exception = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CTS2Exception'), CTS2Exception_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 11, 1))
Namespace.addCategoryObject('elementBinding', CTS2Exception.name().localName(), CTS2Exception)

UnsupportedPropertyReferenceTarget = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedPropertyReferenceTarget'), CTD_ANON, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 726, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedPropertyReferenceTarget.name().localName(), UnsupportedPropertyReferenceTarget)

UnknownResourceReference = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownResourceReference'), UnknownResourceReference_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 54, 1))
Namespace.addCategoryObject('elementBinding', UnknownResourceReference.name().localName(), UnknownResourceReference)

UnsupportedNamespaceName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedNamespaceName'), UnsupportedNamespaceName_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 248, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedNamespaceName.name().localName(), UnsupportedNamespaceName)

UnsupportedNameOrURI = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedNameOrURI'), UnsupportedNameOrURI_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 289, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedNameOrURI.name().localName(), UnsupportedNameOrURI)

MatchValueFormatException = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MatchValueFormatException'), CTD_ANON_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 330, 1))
Namespace.addCategoryObject('elementBinding', MatchValueFormatException.name().localName(), MatchValueFormatException)

EntityExpressionSyntaxError = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'EntityExpressionSyntaxError'), CTD_ANON_2, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 569, 1))
Namespace.addCategoryObject('elementBinding', EntityExpressionSyntaxError.name().localName(), EntityExpressionSyntaxError)

ChangeSetIsNotOpen = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ChangeSetIsNotOpen'), CTD_ANON_3, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 583, 1))
Namespace.addCategoryObject('elementBinding', ChangeSetIsNotOpen.name().localName(), ChangeSetIsNotOpen)

ResourceURIAlreadyExists = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ResourceURIAlreadyExists'), CTD_ANON_4, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 599, 1))
Namespace.addCategoryObject('elementBinding', ResourceURIAlreadyExists.name().localName(), ResourceURIAlreadyExists)

AlternateURINotUnique = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AlternateURINotUnique'), CTD_ANON_5, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 613, 1))
Namespace.addCategoryObject('elementBinding', AlternateURINotUnique.name().localName(), AlternateURINotUnique)

UnknownEntryID = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownEntryID'), CTD_ANON_6, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 626, 1))
Namespace.addCategoryObject('elementBinding', UnknownEntryID.name().localName(), UnknownEntryID)

WrongPredecessorType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'WrongPredecessorType'), CTD_ANON_7, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 638, 1))
Namespace.addCategoryObject('elementBinding', WrongPredecessorType.name().localName(), WrongPredecessorType)

ResourceNameAlreadyExists = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ResourceNameAlreadyExists'), ResourceNameAlreadyExists_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 652, 1))
Namespace.addCategoryObject('elementBinding', ResourceNameAlreadyExists.name().localName(), ResourceNameAlreadyExists)

CycleInPredecessor = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CycleInPredecessor'), CTD_ANON_8, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 665, 1))
Namespace.addCategoryObject('elementBinding', CycleInPredecessor.name().localName(), CycleInPredecessor)

ResourceIsNotOpen = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ResourceIsNotOpen'), CTD_ANON_9, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 679, 1))
Namespace.addCategoryObject('elementBinding', ResourceIsNotOpen.name().localName(), ResourceIsNotOpen)

ResourceStateMismatch = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ResourceStateMismatch'), CTD_ANON_10, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 693, 1))
Namespace.addCategoryObject('elementBinding', ResourceStateMismatch.name().localName(), ResourceStateMismatch)

InvalidDirectoryType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'InvalidDirectoryType'), CTD_ANON_11, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 711, 1))
Namespace.addCategoryObject('elementBinding', InvalidDirectoryType.name().localName(), InvalidDirectoryType)

QueryTimeout = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'QueryTimeout'), CTD_ANON_12, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 736, 1))
Namespace.addCategoryObject('elementBinding', QueryTimeout.name().localName(), QueryTimeout)

InvalidDirectoryURI = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'InvalidDirectoryURI'), CTD_ANON_13, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 750, 1))
Namespace.addCategoryObject('elementBinding', InvalidDirectoryURI.name().localName(), InvalidDirectoryURI)

EntityIDMustBeSupplied = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'EntityIDMustBeSupplied'), CTD_ANON_14, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 768, 1))
Namespace.addCategoryObject('elementBinding', EntityIDMustBeSupplied.name().localName(), EntityIDMustBeSupplied)

EntityIDMustBeGeneratedByService = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'EntityIDMustBeGeneratedByService'), CTD_ANON_15, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 782, 1))
Namespace.addCategoryObject('elementBinding', EntityIDMustBeGeneratedByService.name().localName(), EntityIDMustBeGeneratedByService)

EntityAlreadyExists = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'EntityAlreadyExists'), CTD_ANON_16, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 797, 1))
Namespace.addCategoryObject('elementBinding', EntityAlreadyExists.name().localName(), EntityAlreadyExists)

DuplicateCodeSystemVersionURI = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DuplicateCodeSystemVersionURI'), CTD_ANON_17, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 814, 1))
Namespace.addCategoryObject('elementBinding', DuplicateCodeSystemVersionURI.name().localName(), DuplicateCodeSystemVersionURI)

DuplicateCodeSystemVersionName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DuplicateCodeSystemVersionName'), CTD_ANON_18, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 829, 1))
Namespace.addCategoryObject('elementBinding', DuplicateCodeSystemVersionName.name().localName(), DuplicateCodeSystemVersionName)

AssociationAlreadyExists = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'AssociationAlreadyExists'), CTD_ANON_19, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 903, 1))
Namespace.addCategoryObject('elementBinding', AssociationAlreadyExists.name().localName(), AssociationAlreadyExists)

UnknownFocusEntity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownFocusEntity'), CTD_ANON_20, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 920, 1))
Namespace.addCategoryObject('elementBinding', UnknownFocusEntity.name().localName(), UnknownFocusEntity)

MapCatalogToReferenceException = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MapCatalogToReferenceException'), CTD_ANON_21, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 974, 1))
Namespace.addCategoryObject('elementBinding', MapCatalogToReferenceException.name().localName(), MapCatalogToReferenceException)

MapCatalogFromReferenceException = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MapCatalogFromReferenceException'), CTD_ANON_22, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 988, 1))
Namespace.addCategoryObject('elementBinding', MapCatalogFromReferenceException.name().localName(), MapCatalogFromReferenceException)

DuplicateMapName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DuplicateMapName'), CTD_ANON_23, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1002, 1))
Namespace.addCategoryObject('elementBinding', DuplicateMapName.name().localName(), DuplicateMapName)

MapVersionToReferenceException = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MapVersionToReferenceException'), CTD_ANON_24, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1019, 1))
Namespace.addCategoryObject('elementBinding', MapVersionToReferenceException.name().localName(), MapVersionToReferenceException)

MapVersionFromReferenceException = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MapVersionFromReferenceException'), CTD_ANON_25, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1034, 1))
Namespace.addCategoryObject('elementBinding', MapVersionFromReferenceException.name().localName(), MapVersionFromReferenceException)

DuplicateDefiningEntity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DuplicateDefiningEntity'), CTD_ANON_26, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1066, 1))
Namespace.addCategoryObject('elementBinding', DuplicateDefiningEntity.name().localName(), DuplicateDefiningEntity)

NoCatalogEntryForDefiningEntity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'NoCatalogEntryForDefiningEntity'), CTD_ANON_27, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1080, 1))
Namespace.addCategoryObject('elementBinding', NoCatalogEntryForDefiningEntity.name().localName(), NoCatalogEntryForDefiningEntity)

DuplicateConceptDomainURI = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DuplicateConceptDomainURI'), CTD_ANON_28, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1094, 1))
Namespace.addCategoryObject('elementBinding', DuplicateConceptDomainURI.name().localName(), DuplicateConceptDomainURI)

DuplicateConceptDomainName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DuplicateConceptDomainName'), CTD_ANON_29, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1109, 1))
Namespace.addCategoryObject('elementBinding', DuplicateConceptDomainName.name().localName(), DuplicateConceptDomainName)

DuplicateValueSetURI = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DuplicateValueSetURI'), CTD_ANON_30, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1126, 1))
Namespace.addCategoryObject('elementBinding', DuplicateValueSetURI.name().localName(), DuplicateValueSetURI)

DuplicateValueSetName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DuplicateValueSetName'), CTD_ANON_31, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1141, 1))
Namespace.addCategoryObject('elementBinding', DuplicateValueSetName.name().localName(), DuplicateValueSetName)

InvalidIndexNumber = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'InvalidIndexNumber'), CTD_ANON_32, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1158, 1))
Namespace.addCategoryObject('elementBinding', InvalidIndexNumber.name().localName(), InvalidIndexNumber)

ValueSetDefinitionMismatch = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ValueSetDefinitionMismatch'), CTD_ANON_33, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1173, 1))
Namespace.addCategoryObject('elementBinding', ValueSetDefinitionMismatch.name().localName(), ValueSetDefinitionMismatch)

CodeSystemVersionMismatch = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CodeSystemVersionMismatch'), CTD_ANON_34, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1187, 1))
Namespace.addCategoryObject('elementBinding', CodeSystemVersionMismatch.name().localName(), CodeSystemVersionMismatch)

InferenceNotSupported = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'InferenceNotSupported'), CTD_ANON_35, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1203, 1))
Namespace.addCategoryObject('elementBinding', InferenceNotSupported.name().localName(), InferenceNotSupported)

ResourceAlreadyExists = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ResourceAlreadyExists'), CTD_ANON_36, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1219, 1))
Namespace.addCategoryObject('elementBinding', ResourceAlreadyExists.name().localName(), ResourceAlreadyExists)

UnknownProcessId = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownProcessId'), CTD_ANON_37, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1233, 1))
Namespace.addCategoryObject('elementBinding', UnknownProcessId.name().localName(), UnknownProcessId)

UnableToOpenDocument = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnableToOpenDocument'), CTD_ANON_38, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1247, 1))
Namespace.addCategoryObject('elementBinding', UnableToOpenDocument.name().localName(), UnableToOpenDocument)

ResourceWriteError = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ResourceWriteError'), CTD_ANON_39, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1261, 1))
Namespace.addCategoryObject('elementBinding', ResourceWriteError.name().localName(), ResourceWriteError)

UnsupportedResourceType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedResourceType'), CTD_ANON_40, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1275, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedResourceType.name().localName(), UnsupportedResourceType)

UnableToOpenMetadataDocument = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnableToOpenMetadataDocument'), CTD_ANON_41, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1291, 1))
Namespace.addCategoryObject('elementBinding', UnableToOpenMetadataDocument.name().localName(), UnableToOpenMetadataDocument)

MetadataError = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MetadataError'), CTD_ANON_42, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1305, 1))
Namespace.addCategoryObject('elementBinding', MetadataError.name().localName(), MetadataError)

UnableToOpenOrCreateTargetDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnableToOpenOrCreateTargetDirectory'), CTD_ANON_43, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1320, 1))
Namespace.addCategoryObject('elementBinding', UnableToOpenOrCreateTargetDirectory.name().localName(), UnableToOpenOrCreateTargetDirectory)

MetadataDocumentRequired = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'MetadataDocumentRequired'), CTD_ANON_44, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1334, 1))
Namespace.addCategoryObject('elementBinding', MetadataDocumentRequired.name().localName(), MetadataDocumentRequired)

ToEntityNotValid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'ToEntityNotValid'), CTD_ANON_45, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1351, 1))
Namespace.addCategoryObject('elementBinding', ToEntityNotValid.name().localName(), ToEntityNotValid)

IllegalEntryOrder = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'IllegalEntryOrder'), CTD_ANON_46, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1364, 1))
Namespace.addCategoryObject('elementBinding', IllegalEntryOrder.name().localName(), IllegalEntryOrder)

FromEntityNotValid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FromEntityNotValid'), CTD_ANON_47, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1377, 1))
Namespace.addCategoryObject('elementBinding', FromEntityNotValid.name().localName(), FromEntityNotValid)

InvalidMapRule = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'InvalidMapRule'), CTD_ANON_48, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1390, 1))
Namespace.addCategoryObject('elementBinding', InvalidMapRule.name().localName(), InvalidMapRule)

CannotDeleteOnlyTarget = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'CannotDeleteOnlyTarget'), CTD_ANON_49, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1403, 1))
Namespace.addCategoryObject('elementBinding', CannotDeleteOnlyTarget.name().localName(), CannotDeleteOnlyTarget)

DuplicateMapEntry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DuplicateMapEntry'), CTD_ANON_50, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1416, 1))
Namespace.addCategoryObject('elementBinding', DuplicateMapEntry.name().localName(), DuplicateMapEntry)

FromEntryNotInMap = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'FromEntryNotInMap'), CTD_ANON_51, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1429, 1))
Namespace.addCategoryObject('elementBinding', FromEntryNotInMap.name().localName(), FromEntryNotInMap)

IllegalTargetSlot = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'IllegalTargetSlot'), CTD_ANON_52, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1442, 1))
Namespace.addCategoryObject('elementBinding', IllegalTargetSlot.name().localName(), IllegalTargetSlot)

UnrecognizedResolvedValueSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnrecognizedResolvedValueSet'), CTD_ANON_53, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1458, 1))
Namespace.addCategoryObject('elementBinding', UnrecognizedResolvedValueSet.name().localName(), UnrecognizedResolvedValueSet)

UnknownValueSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownValueSet'), CTD_ANON_54, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 26, 1))
Namespace.addCategoryObject('elementBinding', UnknownValueSet.name().localName(), UnknownValueSet)

UnknownCodeSystemVersion = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownCodeSystemVersion'), CTD_ANON_55, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 40, 1))
Namespace.addCategoryObject('elementBinding', UnknownCodeSystemVersion.name().localName(), UnknownCodeSystemVersion)

UnknownEntity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownEntity'), UnknownEntity_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 68, 1))
Namespace.addCategoryObject('elementBinding', UnknownEntity.name().localName(), UnknownEntity)

UnknownCodeSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownCodeSystem'), CTD_ANON_56, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 81, 1))
Namespace.addCategoryObject('elementBinding', UnknownCodeSystem.name().localName(), UnknownCodeSystem)

UnknownStatement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownStatement'), CTD_ANON_57, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 95, 1))
Namespace.addCategoryObject('elementBinding', UnknownStatement.name().localName(), UnknownStatement)

UnknownChangeSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownChangeSet'), CTD_ANON_58, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 108, 1))
Namespace.addCategoryObject('elementBinding', UnknownChangeSet.name().localName(), UnknownChangeSet)

UnknownAssociation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownAssociation'), CTD_ANON_59, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 122, 1))
Namespace.addCategoryObject('elementBinding', UnknownAssociation.name().localName(), UnknownAssociation)

UnknownConceptDomain = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownConceptDomain'), CTD_ANON_60, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 136, 1))
Namespace.addCategoryObject('elementBinding', UnknownConceptDomain.name().localName(), UnknownConceptDomain)

UnknownConceptDomainBinding = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownConceptDomainBinding'), CTD_ANON_61, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 150, 1))
Namespace.addCategoryObject('elementBinding', UnknownConceptDomainBinding.name().localName(), UnknownConceptDomainBinding)

UnknownMap = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownMap'), CTD_ANON_62, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 164, 1))
Namespace.addCategoryObject('elementBinding', UnknownMap.name().localName(), UnknownMap)

UnknownMapVersion = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownMapVersion'), CTD_ANON_63, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 178, 1))
Namespace.addCategoryObject('elementBinding', UnknownMapVersion.name().localName(), UnknownMapVersion)

UnknownValueSetDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownValueSetDefinition'), CTD_ANON_64, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 192, 1))
Namespace.addCategoryObject('elementBinding', UnknownValueSetDefinition.name().localName(), UnknownValueSetDefinition)

UnsupportedBindingQualifier = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedBindingQualifier'), CTD_ANON_65, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 206, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedBindingQualifier.name().localName(), UnsupportedBindingQualifier)

UnsupportedStatus = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedStatus'), CTD_ANON_66, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 220, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedStatus.name().localName(), UnsupportedStatus)

UnsupportedRole = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedRole'), CTD_ANON_67, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 234, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedRole.name().localName(), UnsupportedRole)

UnsupportedLanguage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedLanguage'), CTD_ANON_68, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 261, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedLanguage.name().localName(), UnsupportedLanguage)

UnsupportedContext = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedContext'), CTD_ANON_69, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 275, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedContext.name().localName(), UnsupportedContext)

UnsupportedVersionTag = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedVersionTag'), CTD_ANON_70, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 302, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedVersionTag.name().localName(), UnsupportedVersionTag)

UnsupportedMatchAlgorithm = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedMatchAlgorithm'), CTD_ANON_71, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 316, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedMatchAlgorithm.name().localName(), UnsupportedMatchAlgorithm)

UnsupportedOntologyLanguage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedOntologyLanguage'), CTD_ANON_72, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 344, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedOntologyLanguage.name().localName(), UnsupportedOntologyLanguage)

UnsupportedOntologySyntax = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedOntologySyntax'), CTD_ANON_73, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 358, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedOntologySyntax.name().localName(), UnsupportedOntologySyntax)

UnsupportedSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedSource'), CTD_ANON_74, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 372, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedSource.name().localName(), UnsupportedSource)

UnsupportedCaseSignificance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedCaseSignificance'), CTD_ANON_75, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 386, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedCaseSignificance.name().localName(), UnsupportedCaseSignificance)

UnsupportedDesignationFidelity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedDesignationFidelity'), CTD_ANON_76, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 400, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedDesignationFidelity.name().localName(), UnsupportedDesignationFidelity)

UnsupportedDesignationType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedDesignationType'), CTD_ANON_77, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 414, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedDesignationType.name().localName(), UnsupportedDesignationType)

UnsupportedFormat = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedFormat'), CTD_ANON_78, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 428, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedFormat.name().localName(), UnsupportedFormat)

UnsupportedFormalityLevel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedFormalityLevel'), CTD_ANON_79, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 442, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedFormalityLevel.name().localName(), UnsupportedFormalityLevel)

UnsupportedMapCorrelation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedMapCorrelation'), CTD_ANON_80, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 456, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedMapCorrelation.name().localName(), UnsupportedMapCorrelation)

UnsupportedModelAttribute = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedModelAttribute'), CTD_ANON_81, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 470, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedModelAttribute.name().localName(), UnsupportedModelAttribute)

UnsupportedOntologyEngineeringMethodology = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedOntologyEngineeringMethodology'), CTD_ANON_82, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 485, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedOntologyEngineeringMethodology.name().localName(), UnsupportedOntologyEngineeringMethodology)

UnsupportedOntologyEngineeringTool = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedOntologyEngineeringTool'), CTD_ANON_83, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 500, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedOntologyEngineeringTool.name().localName(), UnsupportedOntologyEngineeringTool)

UnsupportedOntologyDomain = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedOntologyDomain'), CTD_ANON_84, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 514, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedOntologyDomain.name().localName(), UnsupportedOntologyDomain)

UnsupportedOntologyTask = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedOntologyTask'), CTD_ANON_85, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 528, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedOntologyTask.name().localName(), UnsupportedOntologyTask)

UnsupportedOntologyType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedOntologyType'), CTD_ANON_86, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 542, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedOntologyType.name().localName(), UnsupportedOntologyType)

UnsupportedPredicate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedPredicate'), UnsupportedPredicate_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 556, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedPredicate.name().localName(), UnsupportedPredicate)

UnsupportedSubjectNamespaceName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedSubjectNamespaceName'), CTD_ANON_87, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 846, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedSubjectNamespaceName.name().localName(), UnsupportedSubjectNamespaceName)

UnknownPredicateNamespaceName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownPredicateNamespaceName'), UnknownPredicateNamespaceName_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 930, 1))
Namespace.addCategoryObject('elementBinding', UnknownPredicateNamespaceName.name().localName(), UnknownPredicateNamespaceName)

UnknownTargetNamespaceName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownTargetNamespaceName'), CTD_ANON_88, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 957, 1))
Namespace.addCategoryObject('elementBinding', UnknownTargetNamespaceName.name().localName(), UnknownTargetNamespaceName)

DuplicateMapVersionName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'DuplicateMapVersionName'), CTD_ANON_89, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 1049, 1))
Namespace.addCategoryObject('elementBinding', DuplicateMapVersionName.name().localName(), DuplicateMapVersionName)

UnsupportedAssociationQualifier = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnsupportedAssociationQualifier'), CTD_ANON_90, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 860, 1))
Namespace.addCategoryObject('elementBinding', UnsupportedAssociationQualifier.name().localName(), UnsupportedAssociationQualifier)

UnknownTargetEntity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownTargetEntity'), CTD_ANON_91, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 875, 1))
Namespace.addCategoryObject('elementBinding', UnknownTargetEntity.name().localName(), UnknownTargetEntity)

UnknownAssociationQualifierNamespaceName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownAssociationQualifierNamespaceName'), CTD_ANON_92, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 889, 1))
Namespace.addCategoryObject('elementBinding', UnknownAssociationQualifierNamespaceName.name().localName(), UnknownAssociationQualifierNamespaceName)

UnknownSubjectEntity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'UnknownSubjectEntity'), CTD_ANON_93, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 943, 1))
Namespace.addCategoryObject('elementBinding', UnknownSubjectEntity.name().localName(), UnknownSubjectEntity)



CTS2Exception_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'message'), _ImportedBinding__nsgroup.OpaqueData, scope=CTS2Exception_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3)))

CTS2Exception_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, u'severity'), _ImportedBinding_core_service_api.LoggingLevel, scope=CTS2Exception_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTS2Exception_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTS2Exception_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTS2Exception_._Automaton = _BuildAutomaton()




def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnknownResourceReference_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UnknownResourceReference_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UnknownResourceReference_._Automaton = _BuildAutomaton_()




def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnsupportedNamespaceName_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UnsupportedNamespaceName_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UnsupportedNamespaceName_._Automaton = _BuildAutomaton_2()




def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnsupportedNameOrURI_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UnsupportedNameOrURI_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UnsupportedNameOrURI_._Automaton = _BuildAutomaton_3()




def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_4()




def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_5()




def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_6()




def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_7()




def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_8()




def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_9()




def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_10()




def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResourceNameAlreadyExists_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceNameAlreadyExists_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResourceNameAlreadyExists_._Automaton = _BuildAutomaton_11()




def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_12()




def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_13()




def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_14()




def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_15()




def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_16()




def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_17()




def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_18()




def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_19()




def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_20()




def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_21()




def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_22()




def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_23()




def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_24()




def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_25()




def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_26()




def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_27()




def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_28()




def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_29()




def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_30()




def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_31()




def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_32()




def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_33()




def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_34()




def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_35()




def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_36()




def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_37()




def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_38()




def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_39()




def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_40()




def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_41()




def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_42()




def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_43()




def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_44()




def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_45()




def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_46()




def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_47()




def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_48()




def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_49()




def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_50()




def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_51()




def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_52()




def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_53()




def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_54()




def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_55()




def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_56()




def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_57()




def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_58()




def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_59()




def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnknownEntity_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UnknownEntity_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UnknownEntity_._Automaton = _BuildAutomaton_60()




def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_61()




def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_62()




def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_63()




def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_64()




def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_65()




def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_66()




def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_67()




def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_68()




def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_69()




def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_70()




def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_71()




def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_72()




def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_73()




def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_74()




def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_75()




def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_76()




def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_77()




def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_78()




def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_79()




def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_80()




def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_81()




def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_82()




def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_83()




def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_84()




def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_85()




def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_86()




def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_87()




def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_83._Automaton = _BuildAutomaton_88()




def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_89()




def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_90()




def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_91()




def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnsupportedPredicate_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UnsupportedPredicate_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UnsupportedPredicate_._Automaton = _BuildAutomaton_92()




def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_87._Automaton = _BuildAutomaton_93()




def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnknownPredicateNamespaceName_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UnknownPredicateNamespaceName_._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UnknownPredicateNamespaceName_._Automaton = _BuildAutomaton_94()




def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_95()




def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_96()




def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_97()




def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_98()




def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_92._Automaton = _BuildAutomaton_99()




def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'message')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 18, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, u'severity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Exceptions.xsd', 20, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_93._Automaton = _BuildAutomaton_100()

