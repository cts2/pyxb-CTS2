# ./_nsgroup.py
# -*- coding: utf-8 -*-
# PyXB bindings for NGM:723761c7a0b8cc816150f931760f843d127c4862
# Generated 2013-11-09 17:39:50.321454 by PyXB version 1.2.3
# Group contents:
# Namespace http://www.omg.org/spec/CTS2/1.1/Association [xmlns:association]
# Namespace http://www.omg.org/spec/CTS2/1.1/CodeSystem [xmlns:codesystem]
# Namespace http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion [xmlns:codesystemversion]
# Namespace http://www.omg.org/spec/CTS2/1.1/ConceptDomain [xmlns:conceptdomain]
# Namespace http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding [xmlns:conceptdomainbinding]
# Namespace http://www.omg.org/spec/CTS2/1.1/Core [xmlns:core]
# Namespace http://www.omg.org/spec/CTS2/1.1/Entity [xmlns:entity]
# Namespace http://www.omg.org/spec/CTS2/1.1/MapCatalog [xmlns:map]
# Namespace http://www.omg.org/spec/CTS2/1.1/MapVersion [xmlns:mapversion]
# Namespace http://www.omg.org/spec/CTS2/1.1/Statement [xmlns:stmt]
# Namespace http://www.omg.org/spec/CTS2/1.1/Updates
# Namespace http://www.omg.org/spec/CTS2/1.1/ValueSet [xmlns:valueset]
# Namespace http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition [xmlns:valuesetdefinition]


import pyxb
import pyxb.binding
import pyxb.utils.utility

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:364c7059-4998-11e3-bd00-c82a1438c957')

# Import bindings for schemas in group
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
_Namespace_association = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/Association', create_if_missing=True)
_Namespace_association.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_core = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/Core', create_if_missing=True)
_Namespace_core.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_entity = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/Entity', create_if_missing=True)
_Namespace_entity.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_mapversion = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/MapVersion', create_if_missing=True)
_Namespace_mapversion.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_valuesetdefinition = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition', create_if_missing=True)
_Namespace_valuesetdefinition.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_stmt = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/Statement', create_if_missing=True)
_Namespace_stmt.configureCategories(['typeBinding', 'elementBinding'])
_Namespace = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/Updates', create_if_missing=True)
_Namespace.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_codesystem = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/CodeSystem', create_if_missing=True)
_Namespace_codesystem.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_codesystemversion = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion', create_if_missing=True)
_Namespace_codesystemversion.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_conceptdomain = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/ConceptDomain', create_if_missing=True)
_Namespace_conceptdomain.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_conceptdomainbinding = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding', create_if_missing=True)
_Namespace_conceptdomainbinding.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_map = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/MapCatalog', create_if_missing=True)
_Namespace_map.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_valueset = pyxb.namespace.NamespaceForURI(u'http://www.omg.org/spec/CTS2/1.1/ValueSet', create_if_missing=True)
_Namespace_valueset.configureCategories(['typeBinding', 'elementBinding'])

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Association}AssociationDerivation
class AssociationDerivation (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The derivation of a given statement - whether it is directly asserted by the source, is derived by the application of a reasoner or is unknown because the reasoner or source does not supply such
				information."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationDerivation')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 83, 1)
    _Documentation = u'The derivation of a given statement - whether it is directly asserted by the source, is derived by the application of a reasoner or is unknown because the reasoner or source does not supply such\n\t\t\t\tinformation.'
AssociationDerivation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AssociationDerivation, enum_prefix=None)
AssociationDerivation.ASSERTED = AssociationDerivation._CF_enumeration.addEnumeration(unicode_value=u'ASSERTED', tag=u'ASSERTED')
AssociationDerivation.INFERRED = AssociationDerivation._CF_enumeration.addEnumeration(unicode_value=u'INFERRED', tag=u'INFERRED')
AssociationDerivation._InitializeFacetMap(AssociationDerivation._CF_enumeration)
_Namespace_association.addCategoryObject('typeBinding', u'AssociationDerivation', AssociationDerivation)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Association}GraphDirection
class GraphDirection (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An indicator that states whether the graph represents a graph at which the focus is in the subject role, the target role or both."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'GraphDirection')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 266, 1)
    _Documentation = u'An indicator that states whether the graph represents a graph at which the focus is in the subject role, the target role or both.'
GraphDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=GraphDirection, enum_prefix=None)
GraphDirection.FORWARD = GraphDirection._CF_enumeration.addEnumeration(unicode_value=u'FORWARD', tag=u'FORWARD')
GraphDirection.REVERSE = GraphDirection._CF_enumeration.addEnumeration(unicode_value=u'REVERSE', tag=u'REVERSE')
GraphDirection.BOTH = GraphDirection._CF_enumeration.addEnumeration(unicode_value=u'BOTH', tag=u'BOTH')
GraphDirection._InitializeFacetMap(GraphDirection._CF_enumeration)
_Namespace_association.addCategoryObject('typeBinding', u'GraphDirection', GraphDirection)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Association}GraphFocus
class GraphFocus (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Identifies the root of an association graph"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'GraphFocus')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 289, 1)
    _Documentation = u'Identifies the root of an association graph'
GraphFocus._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=GraphFocus, enum_prefix=None)
GraphFocus.SPECIFIC_ENTITY = GraphFocus._CF_enumeration.addEnumeration(unicode_value=u'SPECIFIC_ENTITY', tag=u'SPECIFIC_ENTITY')
GraphFocus.TOP_NODE = GraphFocus._CF_enumeration.addEnumeration(unicode_value=u'TOP_NODE', tag=u'TOP_NODE')
GraphFocus.BOTTOM_NODE = GraphFocus._CF_enumeration.addEnumeration(unicode_value=u'BOTTOM_NODE', tag=u'BOTTOM_NODE')
GraphFocus._InitializeFacetMap(GraphFocus._CF_enumeration)
_Namespace_association.addCategoryObject('typeBinding', u'GraphFocus', GraphFocus)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}String
class String (pyxb.binding.datatypes.string):

    """a non-empty sequence of characters. As terminological resourcesare often multilingual, it is expected that most CTS Platform SpecificModels (PSMs) will require that the implementation
				supportinternational character sets."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'String')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 8, 1)
    _Documentation = u'a non-empty sequence of characters. As terminological resourcesare often multilingual, it is expected that most CTS Platform SpecificModels (PSMs) will require that the implementation\n\t\t\t\tsupportinternational character sets.'
String._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'String', String)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}DateAndTime
class DateAndTime (pyxb.binding.datatypes.dateTime):

    """represents an "Instant" as defined in the .CTS implementations must be able to support temporal units of ,
					, , , , and , and be able to represent and compare instances represented in any of these units.  can only provide a partial ordering and, as a
				consequence, is never used as an index, unique identifier or to sequence data or events."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'DateAndTime')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 17, 1)
    _Documentation = u'represents an "Instant" as defined in the .CTS implementations must be able to support temporal units of ,\n\t\t\t\t\t, , , , and , and be able to represent and compare instances represented in any of these units.  can only provide a partial ordering and, as a\n\t\t\t\tconsequence, is never used as an index, unique identifier or to sequence data or events.'
DateAndTime._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'DateAndTime', DateAndTime)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}Enumeration
class Enumeration (pyxb.binding.datatypes.string):

    """ "An enumeration defines a set of literals that can beused as its values" . Because enumeration is a built in part of the UML meta model, the
				\guillemotleft enumeration \guillemotright ~stereotype is used to represent them in the UML rendering."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Enumeration')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 26, 1)
    _Documentation = u'"An enumeration defines a set of literals that can beused as its values" . Because enumeration is a built in part of the UML meta model, the\n\t\t\t\t\\guillemotleft enumeration \\guillemotright ~stereotype is used to represent them in the UML rendering.'
Enumeration._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'Enumeration', Enumeration)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}LocalIdentifier
class LocalIdentifier (pyxb.binding.datatypes.string):

    """an identifier that uniquely references a class, individual, property or other resource within the context of a specific CTS service implementation.  syntax must match the  production as defined in the  .  may begin
				with leading digits, where XML Local Identifiers and s may not"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'LocalIdentifier')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 35, 1)
    _Documentation = u'an identifier that uniquely references a class, individual, property or other resource within the context of a specific CTS service implementation.  syntax must match the  production as defined in the  .  may begin\n\t\t\t\twith leading digits, where XML Local Identifiers and s may not'
LocalIdentifier._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
LocalIdentifier._InitializeFacetMap(LocalIdentifier._CF_minLength)
_Namespace_core.addCategoryObject('typeBinding', u'LocalIdentifier', LocalIdentifier)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}NamespaceIdentifier
class NamespaceIdentifier (pyxb.binding.datatypes.NCName):

    """an identifier that uniquely references thescoping namespace of an  (class, role or individual) within a the context of a CTS service. syntax must match the  production as defined in the """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'NamespaceIdentifier')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 46, 1)
    _Documentation = u'an identifier that uniquely references thescoping namespace of an  (class, role or individual) within a the context of a CTS service. syntax must match the  production as defined in the '
NamespaceIdentifier._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1L))
NamespaceIdentifier._InitializeFacetMap(NamespaceIdentifier._CF_minLength)
_Namespace_core.addCategoryObject('typeBinding', u'NamespaceIdentifier', NamespaceIdentifier)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}URI
class URI (pyxb.binding.datatypes.anyURI):

    """a Universal Resource Identifier (URI) as defined in . CTS implementations are encouraged to consider implementing this data type
				using the IRI () specification."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'URI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 57, 1)
    _Documentation = u'a Universal Resource Identifier (URI) as defined in . CTS implementations are encouraged to consider implementing this data type\n\t\t\t\tusing the IRI () specification.'
URI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'URI', URI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}MatchStrength
class MatchStrength (pyxb.binding.datatypes.double):

    """represents the relative strength of the result of a search. Represented as a real number $\mathbb{R}$ such that $0.0 &lt; MatchStrength \leq 1.0$."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'MatchStrength')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 65, 1)
    _Documentation = u'represents the relative strength of the result of a search. Represented as a real number $\\mathbb{R}$ such that $0.0 &lt; MatchStrength \\leq 1.0$.'
MatchStrength._CF_minExclusive = pyxb.binding.facets.CF_minExclusive(value_datatype=pyxb.binding.datatypes.double, value=pyxb.binding.datatypes.anySimpleType(u'0.0'))
MatchStrength._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=MatchStrength, value=pyxb.binding.datatypes.double(1.0))
MatchStrength._InitializeFacetMap(MatchStrength._CF_minExclusive,
   MatchStrength._CF_maxInclusive)
_Namespace_core.addCategoryObject('typeBinding', u'MatchStrength', MatchStrength)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}NaturalNumber
class NaturalNumber (pyxb.binding.datatypes.nonNegativeInteger):

    """a non-negative integer ($\nat$).  is used exclusively for representing quantities in this specification."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'NaturalNumber')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 75, 1)
    _Documentation = u'a non-negative integer ($\\nat$).  is used exclusively for representing quantities in this specification.'
NaturalNumber._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'NaturalNumber', NaturalNumber)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}AmountOfTime
class AmountOfTime (pyxb.binding.datatypes.positiveInteger):

    """a quantity of time.  is used exclusively to represent service timeout limits."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'AmountOfTime')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 82, 1)
    _Documentation = u'a quantity of time.  is used exclusively to represent service timeout limits.'
AmountOfTime._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'AmountOfTime', AmountOfTime)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}Boolean
class Boolean (pyxb.binding.datatypes.boolean):

    """a return type that indicates a positive or negative answer to the specific question that was posed."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Boolean')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2035, 1)
    _Documentation = u'a return type that indicates a positive or negative answer to the specific question that was posed.'
Boolean._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'Boolean', Boolean)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Entity}DesignationRole
class DesignationRole (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """The role that a designation plays in respect to the referenced .  is intended to convey the same semantics as the three types of  - skos:prefLabel (), skos:altLabel () and skos:hiddenLabel (). The SKOS consistency rules with respect to
				preferred labels also apply to designation with two exceptions:(1) There can be more than one preferred label for the same language if the  is different(2) If the service implementation supports structured
				data, it is possible to have more than one preferred label for the same language and context as long as each has a different ."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'DesignationRole')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 268, 1)
    _Documentation = u'The role that a designation plays in respect to the referenced .  is intended to convey the same semantics as the three types of  - skos:prefLabel (), skos:altLabel () and skos:hiddenLabel (). The SKOS consistency rules with respect to\n\t\t\t\tpreferred labels also apply to designation with two exceptions:(1) There can be more than one preferred label for the same language if the  is different(2) If the service implementation supports structured\n\t\t\t\tdata, it is possible to have more than one preferred label for the same language and context as long as each has a different .'
DesignationRole._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DesignationRole, enum_prefix=None)
DesignationRole.PREFERRED = DesignationRole._CF_enumeration.addEnumeration(unicode_value=u'PREFERRED', tag=u'PREFERRED')
DesignationRole.ALTERNATIVE = DesignationRole._CF_enumeration.addEnumeration(unicode_value=u'ALTERNATIVE', tag=u'ALTERNATIVE')
DesignationRole.HIDDEN = DesignationRole._CF_enumeration.addEnumeration(unicode_value=u'HIDDEN', tag=u'HIDDEN')
DesignationRole._InitializeFacetMap(DesignationRole._CF_enumeration)
_Namespace_entity.addCategoryObject('typeBinding', u'DesignationRole', DesignationRole)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Entity}ClassDescriptionType
class ClassDescriptionType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """the type, from a description logic perspective, of a class description"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'ClassDescriptionType')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 321, 1)
    _Documentation = u'the type, from a description logic perspective, of a class description'
ClassDescriptionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ClassDescriptionType, enum_prefix=None)
ClassDescriptionType.A = ClassDescriptionType._CF_enumeration.addEnumeration(unicode_value=u'A', tag=u'A')
ClassDescriptionType.C = ClassDescriptionType._CF_enumeration.addEnumeration(unicode_value=u'C', tag=u'C')
ClassDescriptionType.TOP = ClassDescriptionType._CF_enumeration.addEnumeration(unicode_value=u'TOP', tag=u'TOP')
ClassDescriptionType.BOTTOM = ClassDescriptionType._CF_enumeration.addEnumeration(unicode_value=u'BOTTOM', tag=u'BOTTOM')
ClassDescriptionType._InitializeFacetMap(ClassDescriptionType._CF_enumeration)
_Namespace_entity.addCategoryObject('typeBinding', u'ClassDescriptionType', ClassDescriptionType)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Entity}ClassDescriptionState
class ClassDescriptionState (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """determines whether a class description is considered to consist of necessary or necessary and sufficient definitions of the member individuals"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'ClassDescriptionState')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 349, 1)
    _Documentation = u'determines whether a class description is considered to consist of necessary or necessary and sufficient definitions of the member individuals'
ClassDescriptionState._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ClassDescriptionState, enum_prefix=None)
ClassDescriptionState.PRIMITIVE = ClassDescriptionState._CF_enumeration.addEnumeration(unicode_value=u'PRIMITIVE', tag=u'PRIMITIVE')
ClassDescriptionState.FULLY_DEFINED = ClassDescriptionState._CF_enumeration.addEnumeration(unicode_value=u'FULLY_DEFINED', tag=u'FULLY_DEFINED')
ClassDescriptionState._InitializeFacetMap(ClassDescriptionState._CF_enumeration)
_Namespace_entity.addCategoryObject('typeBinding', u'ClassDescriptionState', ClassDescriptionState)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Entity}Transitivity
class Transitivity (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """an indicator that determines whether an object property is considered to be transitive"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'Transitivity')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 471, 1)
    _Documentation = u'an indicator that determines whether an object property is considered to be transitive'
Transitivity._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Transitivity, enum_prefix=None)
Transitivity.TRANSITIVE = Transitivity._CF_enumeration.addEnumeration(unicode_value=u'TRANSITIVE', tag=u'TRANSITIVE')
Transitivity.INTRANSITIVE = Transitivity._CF_enumeration.addEnumeration(unicode_value=u'INTRANSITIVE', tag=u'INTRANSITIVE')
Transitivity.ANTITRANSITIVE = Transitivity._CF_enumeration.addEnumeration(unicode_value=u'ANTITRANSITIVE', tag=u'ANTITRANSITIVE')
Transitivity._InitializeFacetMap(Transitivity._CF_enumeration)
_Namespace_entity.addCategoryObject('typeBinding', u'Transitivity', Transitivity)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Entity}ObjectPropertyDirectionality
class ObjectPropertyDirectionality (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """indicates whether the semantics of an object property are unidirectional (i.e. $\lnot r(a,b) \implies r(b,a)$ or bidirectional ($r(a,b) \implies r(b,a)$). """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'ObjectPropertyDirectionality')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 494, 1)
    _Documentation = u'indicates whether the semantics of an object property are unidirectional (i.e. $\\lnot r(a,b) \\implies r(b,a)$ or bidirectional ($r(a,b) \\implies r(b,a)$). '
ObjectPropertyDirectionality._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ObjectPropertyDirectionality, enum_prefix=None)
ObjectPropertyDirectionality.UNIDIRECTIONAL = ObjectPropertyDirectionality._CF_enumeration.addEnumeration(unicode_value=u'UNIDIRECTIONAL', tag=u'UNIDIRECTIONAL')
ObjectPropertyDirectionality.BIDIRECTIONAL = ObjectPropertyDirectionality._CF_enumeration.addEnumeration(unicode_value=u'BIDIRECTIONAL', tag=u'BIDIRECTIONAL')
ObjectPropertyDirectionality._InitializeFacetMap(ObjectPropertyDirectionality._CF_enumeration)
_Namespace_entity.addCategoryObject('typeBinding', u'ObjectPropertyDirectionality', ObjectPropertyDirectionality)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}PersistentURI
class PersistentURI (URI):

    """a Universal Resource Identifier (URI) that persists across service instances. Persistent URI's have enduring reference and meaning."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'PersistentURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 150, 1)
    _Documentation = u"a Universal Resource Identifier (URI) that persists across service instances. Persistent URI's have enduring reference and meaning."
PersistentURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'PersistentURI', PersistentURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}LocalURI
class LocalURI (URI):

    """a URI or handle whose scope is local to the implementing service.  cannot be used as a permanent identifier in a message or a data record."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'LocalURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 180, 1)
    _Documentation = u'a URI or handle whose scope is local to the implementing service.  cannot be used as a permanent identifier in a message or a data record.'
LocalURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'LocalURI', LocalURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}EntryState
class EntryState (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """the current state of the  element. Note that  represents the state of the element itself -  the state of a given change. The applicability of a given change is
				identified by its  not ."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'EntryState')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 243, 1)
    _Documentation = u'the current state of the  element. Note that  represents the state of the element itself -  the state of a given change. The applicability of a given change is\n\t\t\t\tidentified by its  not .'
EntryState._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EntryState, enum_prefix=None)
EntryState.INACTIVE = EntryState._CF_enumeration.addEnumeration(unicode_value=u'INACTIVE', tag=u'INACTIVE')
EntryState.ACTIVE = EntryState._CF_enumeration.addEnumeration(unicode_value=u'ACTIVE', tag=u'ACTIVE')
EntryState._InitializeFacetMap(EntryState._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'EntryState', EntryState)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ChangeType
class ChangeType (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """An indicator that shows the type of change that occurred that transformed a  element from its immediately previous state to the state that the  is associated
				with."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ChangeType')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 323, 1)
    _Documentation = u'An indicator that shows the type of change that occurred that transformed a  element from its immediately previous state to the state that the  is associated\n\t\t\t\twith.'
ChangeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ChangeType, enum_prefix=None)
ChangeType.CREATE = ChangeType._CF_enumeration.addEnumeration(unicode_value=u'CREATE', tag=u'CREATE')
ChangeType.UPDATE = ChangeType._CF_enumeration.addEnumeration(unicode_value=u'UPDATE', tag=u'UPDATE')
ChangeType.METADATA = ChangeType._CF_enumeration.addEnumeration(unicode_value=u'METADATA', tag=u'METADATA')
ChangeType.DELETE = ChangeType._CF_enumeration.addEnumeration(unicode_value=u'DELETE', tag=u'DELETE')
ChangeType.CLONE = ChangeType._CF_enumeration.addEnumeration(unicode_value=u'CLONE', tag=u'CLONE')
ChangeType.IMPORT = ChangeType._CF_enumeration.addEnumeration(unicode_value=u'IMPORT', tag=u'IMPORT')
ChangeType._InitializeFacetMap(ChangeType._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'ChangeType', ChangeType)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ChangeCommitted
class ChangeCommitted (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """the commitment state of an individual change"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ChangeCommitted')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 364, 1)
    _Documentation = u'the commitment state of an individual change'
ChangeCommitted._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ChangeCommitted, enum_prefix=None)
ChangeCommitted.PENDING = ChangeCommitted._CF_enumeration.addEnumeration(unicode_value=u'PENDING', tag=u'PENDING')
ChangeCommitted.COMMITTED = ChangeCommitted._CF_enumeration.addEnumeration(unicode_value=u'COMMITTED', tag=u'COMMITTED')
ChangeCommitted._InitializeFacetMap(ChangeCommitted._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'ChangeCommitted', ChangeCommitted)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}FinalizableState
class FinalizableState (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """possible states of a  resource"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'FinalizableState')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 458, 1)
    _Documentation = u'possible states of a  resource'
FinalizableState._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FinalizableState, enum_prefix=None)
FinalizableState.OPEN = FinalizableState._CF_enumeration.addEnumeration(unicode_value=u'OPEN', tag=u'OPEN')
FinalizableState.FINAL = FinalizableState._CF_enumeration.addEnumeration(unicode_value=u'FINAL', tag=u'FINAL')
FinalizableState._InitializeFacetMap(FinalizableState._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'FinalizableState', FinalizableState)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}CompleteDirectory
class CompleteDirectory (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """An indicator that determines whether a  contains all of the qualifying entries or only some."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'CompleteDirectory')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 564, 1)
    _Documentation = u'An indicator that determines whether a  contains all of the qualifying entries or only some.'
CompleteDirectory._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CompleteDirectory, enum_prefix=None)
CompleteDirectory.COMPLETE = CompleteDirectory._CF_enumeration.addEnumeration(unicode_value=u'COMPLETE', tag=u'COMPLETE')
CompleteDirectory.PARTIAL = CompleteDirectory._CF_enumeration.addEnumeration(unicode_value=u'PARTIAL', tag=u'PARTIAL')
CompleteDirectory._InitializeFacetMap(CompleteDirectory._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'CompleteDirectory', CompleteDirectory)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}CodeSystemRole
class CodeSystemRole (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """The role that a code system plays in the definition or description of an entity."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'CodeSystemRole')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 874, 1)
    _Documentation = u'The role that a code system plays in the definition or description of an entity.'
CodeSystemRole._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CodeSystemRole, enum_prefix=None)
CodeSystemRole.PRIMARY = CodeSystemRole._CF_enumeration.addEnumeration(unicode_value=u'PRIMARY', tag=u'PRIMARY')
CodeSystemRole.SECONDARY = CodeSystemRole._CF_enumeration.addEnumeration(unicode_value=u'SECONDARY', tag=u'SECONDARY')
CodeSystemRole._InitializeFacetMap(CodeSystemRole._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'CodeSystemRole', CodeSystemRole)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}SetOperator
class SetOperator (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """General set operators that specify set union, difference or intersection in various contexts"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'SetOperator')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1260, 1)
    _Documentation = u'General set operators that specify set union, difference or intersection in various contexts'
SetOperator._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SetOperator, enum_prefix=None)
SetOperator.UNION = SetOperator._CF_enumeration.addEnumeration(unicode_value=u'UNION', tag=u'UNION')
SetOperator.INTERSECT = SetOperator._CF_enumeration.addEnumeration(unicode_value=u'INTERSECT', tag=u'INTERSECT')
SetOperator.SUBTRACT = SetOperator._CF_enumeration.addEnumeration(unicode_value=u'SUBTRACT', tag=u'SUBTRACT')
SetOperator._InitializeFacetMap(SetOperator._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'SetOperator', SetOperator)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}SortDirection
class SortDirection (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """The collating order of a sort."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'SortDirection')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1344, 1)
    _Documentation = u'The collating order of a sort.'
SortDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SortDirection, enum_prefix=None)
SortDirection.ASCENDING = SortDirection._CF_enumeration.addEnumeration(unicode_value=u'ASCENDING', tag=u'ASCENDING')
SortDirection.DESCENDING = SortDirection._CF_enumeration.addEnumeration(unicode_value=u'DESCENDING', tag=u'DESCENDING')
SortDirection._InitializeFacetMap(SortDirection._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'SortDirection', SortDirection)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}AssociationDirection
class AssociationDirection (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """An indicator that determines whether an entity reference / predicate combination is to be evaluated with the entity reference in the source (left hand side) position of the association query or the target
				(right hand side or "object") position.
				 doesn't strictly belong in this diagram, but it is kind of an orphan class and we didn't want to create an entire new diagram just for one element."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'AssociationDirection')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1371, 1)
    _Documentation = u'An indicator that determines whether an entity reference / predicate combination is to be evaluated with the entity reference in the source (left hand side) position of the association query or the target\n\t\t\t\t(right hand side or "object") position.\n\t\t\t\t doesn\'t strictly belong in this diagram, but it is kind of an orphan class and we didn\'t want to create an entire new diagram just for one element.'
AssociationDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AssociationDirection, enum_prefix=None)
AssociationDirection.SOURCE_TO_TARGET = AssociationDirection._CF_enumeration.addEnumeration(unicode_value=u'SOURCE_TO_TARGET', tag=u'SOURCE_TO_TARGET')
AssociationDirection.TARGET_TO_SOURCE = AssociationDirection._CF_enumeration.addEnumeration(unicode_value=u'TARGET_TO_SOURCE', tag=u'TARGET_TO_SOURCE')
AssociationDirection._InitializeFacetMap(AssociationDirection._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'AssociationDirection', AssociationDirection)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}CodeSystemName
class CodeSystemName (LocalIdentifier):

    """a local identifier for a """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'CodeSystemName')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1426, 1)
    _Documentation = u'a local identifier for a '
CodeSystemName._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'CodeSystemName', CodeSystemName)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}CodeSystemVersionName
class CodeSystemVersionName (LocalIdentifier):

    """a local identifier for a """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'CodeSystemVersionName')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1432, 1)
    _Documentation = u'a local identifier for a '
CodeSystemVersionName._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'CodeSystemVersionName', CodeSystemVersionName)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ConceptDomainName
class ConceptDomainName (LocalIdentifier):

    """a local identifier for a """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ConceptDomainName')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1438, 1)
    _Documentation = u'a local identifier for a '
ConceptDomainName._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'ConceptDomainName', ConceptDomainName)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}MapName
class MapName (LocalIdentifier):

    """a local identifier for a """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'MapName')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1444, 1)
    _Documentation = u'a local identifier for a '
MapName._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'MapName', MapName)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}MapVersionName
class MapVersionName (LocalIdentifier):

    """a local identifier for a """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'MapVersionName')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1450, 1)
    _Documentation = u'a local identifier for a '
MapVersionName._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'MapVersionName', MapVersionName)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ValueSetName
class ValueSetName (LocalIdentifier):

    """a local identifier for a """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ValueSetName')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1456, 1)
    _Documentation = u'a local identifier for a '
ValueSetName._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'ValueSetName', ValueSetName)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}VersionTagName
class VersionTagName (LocalIdentifier):

    """a local identifier for a """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'VersionTagName')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1462, 1)
    _Documentation = u'a local identifier for a '
VersionTagName._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'VersionTagName', VersionTagName)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}NoteType
class NoteType (String, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'NoteType')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1546, 1)
    _Documentation = None
NoteType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NoteType, enum_prefix=None)
NoteType.ChangeNote = NoteType._CF_enumeration.addEnumeration(unicode_value=u'ChangeNote', tag=u'ChangeNote')
NoteType.EditorialNote = NoteType._CF_enumeration.addEnumeration(unicode_value=u'EditorialNote', tag=u'EditorialNote')
NoteType.HistoryNote = NoteType._CF_enumeration.addEnumeration(unicode_value=u'HistoryNote', tag=u'HistoryNote')
NoteType.ScopeNote = NoteType._CF_enumeration.addEnumeration(unicode_value=u'ScopeNote', tag=u'ScopeNote')
NoteType.Note = NoteType._CF_enumeration.addEnumeration(unicode_value=u'Note', tag=u'Note')
NoteType._InitializeFacetMap(NoteType._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'NoteType', NoteType)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}DefinitionRole
class DefinitionRole (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """The role that a given definition plays for a given entity."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'DefinitionRole')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1582, 1)
    _Documentation = u'The role that a given definition plays for a given entity.'
DefinitionRole._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DefinitionRole, enum_prefix=None)
DefinitionRole.NORMATIVE = DefinitionRole._CF_enumeration.addEnumeration(unicode_value=u'NORMATIVE', tag=u'NORMATIVE')
DefinitionRole.INFORMATIVE = DefinitionRole._CF_enumeration.addEnumeration(unicode_value=u'INFORMATIVE', tag=u'INFORMATIVE')
DefinitionRole._InitializeFacetMap(DefinitionRole._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'DefinitionRole', DefinitionRole)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}CTS2ResourceType
class CTS2ResourceType (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """the resource types that can be described in a CTS service"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'CTS2ResourceType')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1712, 1)
    _Documentation = u'the resource types that can be described in a CTS service'
CTS2ResourceType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CTS2ResourceType, enum_prefix=None)
CTS2ResourceType.CODE_SYSTEM = CTS2ResourceType._CF_enumeration.addEnumeration(unicode_value=u'CODE_SYSTEM', tag=u'CODE_SYSTEM')
CTS2ResourceType.CODE_SYSTEM_VERSION = CTS2ResourceType._CF_enumeration.addEnumeration(unicode_value=u'CODE_SYSTEM_VERSION', tag=u'CODE_SYSTEM_VERSION')
CTS2ResourceType.CONCEPT_DOMAIN = CTS2ResourceType._CF_enumeration.addEnumeration(unicode_value=u'CONCEPT_DOMAIN', tag=u'CONCEPT_DOMAIN')
CTS2ResourceType.MAP = CTS2ResourceType._CF_enumeration.addEnumeration(unicode_value=u'MAP', tag=u'MAP')
CTS2ResourceType.MAP_VERSION = CTS2ResourceType._CF_enumeration.addEnumeration(unicode_value=u'MAP_VERSION', tag=u'MAP_VERSION')
CTS2ResourceType.VALUE_SET = CTS2ResourceType._CF_enumeration.addEnumeration(unicode_value=u'VALUE_SET', tag=u'VALUE_SET')
CTS2ResourceType.VALUE_SET_DEFINITION = CTS2ResourceType._CF_enumeration.addEnumeration(unicode_value=u'VALUE_SET_DEFINITION', tag=u'VALUE_SET_DEFINITION')
CTS2ResourceType._InitializeFacetMap(CTS2ResourceType._CF_enumeration)
_Namespace_core.addCategoryObject('typeBinding', u'CTS2ResourceType', CTS2ResourceType)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapProcessingRule
class MapProcessingRule (String, pyxb.binding.basis.enumeration_mixin):

    """An indicator that states whether processing is to continue if a condition is satisfied or it is to terminate. """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapProcessingRule')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 239, 1)
    _Documentation = u'An indicator that states whether processing is to continue if a condition is satisfied or it is to terminate. '
MapProcessingRule._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MapProcessingRule, enum_prefix=None)
MapProcessingRule.ALL_MATCHES = MapProcessingRule._CF_enumeration.addEnumeration(unicode_value=u'ALL_MATCHES', tag=u'ALL_MATCHES')
MapProcessingRule.FIRST_MATCH = MapProcessingRule._CF_enumeration.addEnumeration(unicode_value=u'FIRST_MATCH', tag=u'FIRST_MATCH')
MapProcessingRule._InitializeFacetMap(MapProcessingRule._CF_enumeration)
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapProcessingRule', MapProcessingRule)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}SetOperator
class SetOperator_ (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """General set operators that specify set union, difference or intersection in various contexts"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'SetOperator')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 60, 1)
    _Documentation = u'General set operators that specify set union, difference or intersection in various contexts'
SetOperator_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SetOperator_, enum_prefix=None)
SetOperator_.UNION = SetOperator_._CF_enumeration.addEnumeration(unicode_value=u'UNION', tag=u'UNION')
SetOperator_.INTERSECT = SetOperator_._CF_enumeration.addEnumeration(unicode_value=u'INTERSECT', tag=u'INTERSECT')
SetOperator_.SUBTRACT = SetOperator_._CF_enumeration.addEnumeration(unicode_value=u'SUBTRACT', tag=u'SUBTRACT')
SetOperator_._InitializeFacetMap(SetOperator_._CF_enumeration)
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'SetOperator', SetOperator_)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}LeafOrAll
class LeafOrAll (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """Indicates whether intermediate nodes in a transitive closure are to be included in the result or only the "leaf" nodes."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'LeafOrAll')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 140, 1)
    _Documentation = u'Indicates whether intermediate nodes in a transitive closure are to be included in the result or only the "leaf" nodes.'
LeafOrAll._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LeafOrAll, enum_prefix=None)
LeafOrAll.LEAF_ONLY = LeafOrAll._CF_enumeration.addEnumeration(unicode_value=u'LEAF_ONLY', tag=u'LEAF_ONLY')
LeafOrAll.ALL_INTERMEDIATE_NODES = LeafOrAll._CF_enumeration.addEnumeration(unicode_value=u'ALL_INTERMEDIATE_NODES', tag=u'ALL_INTERMEDIATE_NODES')
LeafOrAll._InitializeFacetMap(LeafOrAll._CF_enumeration)
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'LeafOrAll', LeafOrAll)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}TransitiveClosure
class TransitiveClosure (Enumeration, pyxb.binding.basis.enumeration_mixin):

    """Indicates whether only directly associated nodes or the transitive closure over the supplied predicate is to be used in the resolution of an entity reference and predicate. """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'TransitiveClosure')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 160, 1)
    _Documentation = u'Indicates whether only directly associated nodes or the transitive closure over the supplied predicate is to be used in the resolution of an entity reference and predicate. '
TransitiveClosure._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TransitiveClosure, enum_prefix=None)
TransitiveClosure.DIRECTLY_ASSOCIATED = TransitiveClosure._CF_enumeration.addEnumeration(unicode_value=u'DIRECTLY_ASSOCIATED', tag=u'DIRECTLY_ASSOCIATED')
TransitiveClosure.TRANSITIVE_CLOSURE = TransitiveClosure._CF_enumeration.addEnumeration(unicode_value=u'TRANSITIVE_CLOSURE', tag=u'TRANSITIVE_CLOSURE')
TransitiveClosure._InitializeFacetMap(TransitiveClosure._CF_enumeration)
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'TransitiveClosure', TransitiveClosure)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ChangeSetURI
class ChangeSetURI (PersistentURI):

    """the unique identifier of a set of change instructions that can potentially transform the contents of CTS service instance from one state to another. """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ChangeSetURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 157, 1)
    _Documentation = u'the unique identifier of a set of change instructions that can potentially transform the contents of CTS service instance from one state to another. '
ChangeSetURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'ChangeSetURI', ChangeSetURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}DocumentURI
class DocumentURI (PersistentURI):

    """a reference to a "work" in the bibliographic sense. It is not necessary that a  be directly or indirectly resolvable to a digital resource - it may simply be the name of a book, publication or
				other abstraction."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'DocumentURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 164, 1)
    _Documentation = u'a reference to a "work" in the bibliographic sense. It is not necessary that a  be directly or indirectly resolvable to a digital resource - it may simply be the name of a book, publication or\n\t\t\t\tother abstraction.'
DocumentURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'DocumentURI', DocumentURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ExternalURI
class ExternalURI (PersistentURI):

    """a URI that names a unique resource. CTS implementations should never assume that  is resolvable via an http: GET operation - s should always be passed as
				parameters to service implementations to get the sanctioned equivalent in a given service context"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ExternalURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 172, 1)
    _Documentation = u'a URI that names a unique resource. CTS implementations should never assume that  is resolvable via an http: GET operation - s should always be passed as\n\t\t\t\tparameters to service implementations to get the sanctioned equivalent in a given service context'
ExternalURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'ExternalURI', ExternalURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryURI
class DirectoryURI (LocalURI):

    """the unique name of a query that, when executed results in a list of resources that, in the context of a given service, satisfy the query."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'DirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 187, 1)
    _Documentation = u'the unique name of a query that, when executed results in a list of resources that, in the context of a given service, satisfy the query.'
DirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'DirectoryURI', DirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}RenderingURI
class RenderingURI (LocalURI):

    """a URI or handle that is directly readable by a specific instance of a CTS service implementation. must resolve to  CTS element. """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'RenderingURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 194, 1)
    _Documentation = u'a URI or handle that is directly readable by a specific instance of a CTS service implementation. must resolve to  CTS element. '
RenderingURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'RenderingURI', RenderingURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ServiceURI
class ServiceURI (LocalURI):

    """the URI or handle of a service implementation. """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ServiceURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 201, 1)
    _Documentation = u'the URI or handle of a service implementation. '
ServiceURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'ServiceURI', ServiceURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}AssociationDirectoryURI
class AssociationDirectoryURI (DirectoryURI):

    """a that references a set of """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'AssociationDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 585, 1)
    _Documentation = u'a that references a set of '
AssociationDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'AssociationDirectoryURI', AssociationDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ChangeSetDirectoryURI
class ChangeSetDirectoryURI (DirectoryURI):

    """a that references a set of """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ChangeSetDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 591, 1)
    _Documentation = u'a that references a set of '
ChangeSetDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'ChangeSetDirectoryURI', ChangeSetDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}CodeSystemCatalogEntryDirectoryURI
class CodeSystemCatalogEntryDirectoryURI (DirectoryURI):

    """a that references a set of ."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'CodeSystemCatalogEntryDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 597, 1)
    _Documentation = u'a that references a set of .'
CodeSystemCatalogEntryDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'CodeSystemCatalogEntryDirectoryURI', CodeSystemCatalogEntryDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}CodeSystemVersionCatalogEntryDirectoryURI
class CodeSystemVersionCatalogEntryDirectoryURI (DirectoryURI):

    """a that references a set of ."""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'CodeSystemVersionCatalogEntryDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 603, 1)
    _Documentation = u'a that references a set of .'
CodeSystemVersionCatalogEntryDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'CodeSystemVersionCatalogEntryDirectoryURI', CodeSystemVersionCatalogEntryDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ConceptDomainCatalogEntryDirectoryURI
class ConceptDomainCatalogEntryDirectoryURI (DirectoryURI):

    """a  that references a set of """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ConceptDomainCatalogEntryDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 609, 1)
    _Documentation = u'a  that references a set of '
ConceptDomainCatalogEntryDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'ConceptDomainCatalogEntryDirectoryURI', ConceptDomainCatalogEntryDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ConceptDomainBindingDirectoryURI
class ConceptDomainBindingDirectoryURI (DirectoryURI):

    """a that references a set of """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ConceptDomainBindingDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 615, 1)
    _Documentation = u'a that references a set of '
ConceptDomainBindingDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'ConceptDomainBindingDirectoryURI', ConceptDomainBindingDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}EntityDirectoryURI
class EntityDirectoryURI (DirectoryURI):

    """a that references a set of """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'EntityDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 621, 1)
    _Documentation = u'a that references a set of '
EntityDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'EntityDirectoryURI', EntityDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}MapCatalogEntryDirectoryURI
class MapCatalogEntryDirectoryURI (DirectoryURI):

    """a that references a set of """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'MapCatalogEntryDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 627, 1)
    _Documentation = u'a that references a set of '
MapCatalogEntryDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'MapCatalogEntryDirectoryURI', MapCatalogEntryDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}MapVersionDirectoryURI
class MapVersionDirectoryURI (DirectoryURI):

    """a that references a set of """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'MapVersionDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 633, 1)
    _Documentation = u'a that references a set of '
MapVersionDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'MapVersionDirectoryURI', MapVersionDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}MapEntryDirectoryURI
class MapEntryDirectoryURI (DirectoryURI):

    """a that references a set of s"""

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'MapEntryDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 639, 1)
    _Documentation = u'a that references a set of s'
MapEntryDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'MapEntryDirectoryURI', MapEntryDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}StatementDirectoryURI
class StatementDirectoryURI (DirectoryURI):

    """a that references a set of """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'StatementDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 645, 1)
    _Documentation = u'a that references a set of '
StatementDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'StatementDirectoryURI', StatementDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ValueSetCatalogEntryDirectoryURI
class ValueSetCatalogEntryDirectoryURI (DirectoryURI):

    """a that references a set of """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ValueSetCatalogEntryDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 651, 1)
    _Documentation = u'a that references a set of '
ValueSetCatalogEntryDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'ValueSetCatalogEntryDirectoryURI', ValueSetCatalogEntryDirectoryURI)

# Atomic simple type: {http://www.omg.org/spec/CTS2/1.1/Core}ValueSetDefinitionDirectoryURI
class ValueSetDefinitionDirectoryURI (DirectoryURI):

    """a that references a set of """

    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ValueSetDefinitionDirectoryURI')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 657, 1)
    _Documentation = u'a that references a set of '
ValueSetDefinitionDirectoryURI._InitializeFacetMap()
_Namespace_core.addCategoryObject('typeBinding', u'ValueSetDefinitionDirectoryURI', ValueSetDefinitionDirectoryURI)

# Complex type {http://www.omg.org/spec/CTS2/1.1/Association}AssociationRendering with content type ELEMENT_ONLY
class AssociationRendering (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationRendering')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 102, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}languageAndSyntax uses Python identifier languageAndSyntax
    __languageAndSyntax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'languageAndSyntax'), 'languageAndSyntax', '__httpwww_omg_orgspecCTS21_1Association_AssociationRendering_httpwww_omg_orgspecCTS21_1AssociationlanguageAndSyntax', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 105, 3), )

    
    languageAndSyntax = property(__languageAndSyntax.value, __languageAndSyntax.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}representation uses Python identifier representation
    __representation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'representation'), 'representation', '__httpwww_omg_orgspecCTS21_1Association_AssociationRendering_httpwww_omg_orgspecCTS21_1Associationrepresentation', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 106, 3), )

    
    representation = property(__representation.value, __representation.set, None, None)

    _ElementMap.update({
        __languageAndSyntax.name() : __languageAndSyntax,
        __representation.name() : __representation
    })
    _AttributeMap.update({
        
    })
_Namespace_association.addCategoryObject('typeBinding', u'AssociationRendering', AssociationRendering)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}tsAnyType with content type MIXED
class tsAnyType (pyxb.binding.basis.complexTypeDefinition):
    """An opaque inner type that can contain any well-formed, but arbitrary information."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'tsAnyType')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 92, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _HasWildcardElement = True
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'tsAnyType', tsAnyType)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData with content type ELEMENT_ONLY
class OpaqueData (pyxb.binding.basis.complexTypeDefinition):
    """Opaque data is the equivalent of an ASN.1 External Type  or the XML Schema . An  instance may represent text with an optional spoken or written language code or a
				formal structure such as embedded HTML, XML or MIME encoded data. When a formal structure is included, its type should be specified in the  attribute and, when the type is an XML variant, the corresponding
				schema (or DTD) should be included in the  parameter.The  data type must be encoded in such a way that the content can be represented by a character string. Binary data is not permitted,although
				hyperlinks  binary data are."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'OpaqueData')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 102, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'value'), 'value_', '__httpwww_omg_orgspecCTS21_1Core_OpaqueData_httpwww_omg_orgspecCTS21_1Corevalue', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 111, 3), )

    
    value_ = property(__value.value, __value.set, None, u'the instance value. Note that instance value should be encoded in such a way that it allows embedded structures. As an example, in XML Schema, this encoding should be to xs:anyType or an\n\t\t\t\t\t\tequivalent.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}format uses Python identifier format
    __format = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'format'), 'format', '__httpwww_omg_orgspecCTS21_1Core_OpaqueData_httpwww_omg_orgspecCTS21_1Coreformat', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3), )

    
    format = property(__format.value, __format.set, None, u'the format or encoding for This is typically recorded as the URI of a .')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'language'), 'language', '__httpwww_omg_orgspecCTS21_1Core_OpaqueData_httpwww_omg_orgspecCTS21_1Corelanguage', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3), )

    
    language = property(__language.value, __language.set, None, u'a reference to the written or spoken language used in .')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}schema uses Python identifier schema
    __schema = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'schema'), 'schema', '__httpwww_omg_orgspecCTS21_1Core_OpaqueData_httpwww_omg_orgspecCTS21_1Coreschema', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3), )

    
    schema = property(__schema.value, __schema.set, None, u'if the format of the document involves an XML encoding, this contains the URI of a document that carries the corresponding XML Schema or DTD.')

    _ElementMap.update({
        __value.name() : __value,
        __format.name() : __format,
        __language.name() : __language,
        __schema.name() : __schema
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'OpaqueData', OpaqueData)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}EntityReferenceList with content type ELEMENT_ONLY
class EntityReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A list (set) of zero or more entity references"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'EntityReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 725, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Core_EntityReferenceList_httpwww_omg_orgspecCTS21_1Coreentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 730, 3), )

    
    entry = property(__entry.value, __entry.set, None, None)

    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'EntityReferenceList', EntityReferenceList)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ScopedEntityName with content type ELEMENT_ONLY
class ScopedEntityName (pyxb.binding.basis.complexTypeDefinition):
    """The combination of a namespace identifier and a local name. Scoped entity names are not portable - they only work within the context of a single service instance, as different services may assign different
				namespace identifiers to the same namespace and different services may make different choices of the appropriate local identifier to use to represent an entity. As an example, one service may choose to use the entity code
				while a second may use another designation that is known to be unique."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ScopedEntityName')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 795, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}namespace uses Python identifier namespace
    __namespace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'namespace'), 'namespace', '__httpwww_omg_orgspecCTS21_1Core_ScopedEntityName_httpwww_omg_orgspecCTS21_1Corenamespace', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 802, 3), )

    
    namespace = property(__namespace.value, __namespace.set, None, u'an identifier that references a unique namespace URI within the context of the service')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'name'), 'name', '__httpwww_omg_orgspecCTS21_1Core_ScopedEntityName_httpwww_omg_orgspecCTS21_1Corename', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 807, 3), )

    
    name = property(__name.value, __name.set, None, u'the local entity name within the context of the namespace. What is chosen for the entity name is service specific')

    _ElementMap.update({
        __namespace.name() : __namespace,
        __name.name() : __name
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'ScopedEntityName', ScopedEntityName)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}EntityExpression with content type ELEMENT_ONLY
class EntityExpression_ (pyxb.binding.basis.complexTypeDefinition):
    """An expression in a given ontology language and syntax that describes or defines an entity. Examples might include descriptions of entities in Manchester OWL Syntax, RDF, SNOMED Concept Expression,
				etc."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'EntityExpression')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 855, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}ontologyLanguageAndSyntax uses Python identifier ontologyLanguageAndSyntax
    __ontologyLanguageAndSyntax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'ontologyLanguageAndSyntax'), 'ontologyLanguageAndSyntax', '__httpwww_omg_orgspecCTS21_1Core_EntityExpression__httpwww_omg_orgspecCTS21_1CoreontologyLanguageAndSyntax', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 861, 3), )

    
    ontologyLanguageAndSyntax = property(__ontologyLanguageAndSyntax.value, __ontologyLanguageAndSyntax.set, None, u'the ontology language and syntax of the expression')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}expression uses Python identifier expression
    __expression = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'expression'), 'expression', '__httpwww_omg_orgspecCTS21_1Core_EntityExpression__httpwww_omg_orgspecCTS21_1Coreexpression', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 866, 3), )

    
    expression = property(__expression.value, __expression.set, None, u'the actual expression')

    _ElementMap.update({
        __ontologyLanguageAndSyntax.name() : __ontologyLanguageAndSyntax,
        __expression.name() : __expression
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'EntityExpression', EntityExpression_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}CodeSystemVersionReference with content type ELEMENT_ONLY
class CodeSystemVersionReference (pyxb.binding.basis.complexTypeDefinition):
    """a reference to a specific version of code system and, if known, the code system which it is a version of"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'CodeSystemVersionReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 988, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'version'), 'version', '__httpwww_omg_orgspecCTS21_1Core_CodeSystemVersionReference_httpwww_omg_orgspecCTS21_1Coreversion', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 993, 3), )

    
    version = property(__version.value, __version.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}codeSystem uses Python identifier codeSystem
    __codeSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'codeSystem'), 'codeSystem', '__httpwww_omg_orgspecCTS21_1Core_CodeSystemVersionReference_httpwww_omg_orgspecCTS21_1CorecodeSystem', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 994, 3), )

    
    codeSystem = property(__codeSystem.value, __codeSystem.set, None, u'A reference to the code system that the version is a version of. Must be present if this information is known to the CTS service implementation.')

    _ElementMap.update({
        __version.name() : __version,
        __codeSystem.name() : __codeSystem
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'CodeSystemVersionReference', CodeSystemVersionReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}MapVersionReference with content type ELEMENT_ONLY
class MapVersionReference (pyxb.binding.basis.complexTypeDefinition):
    """a reference to a map version and the corresponding map, if known"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'MapVersionReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1065, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}mapVersion uses Python identifier mapVersion
    __mapVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'mapVersion'), 'mapVersion', '__httpwww_omg_orgspecCTS21_1Core_MapVersionReference_httpwww_omg_orgspecCTS21_1CoremapVersion', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1070, 3), )

    
    mapVersion = property(__mapVersion.value, __mapVersion.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}map uses Python identifier map
    __map = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'map'), 'map', '__httpwww_omg_orgspecCTS21_1Core_MapVersionReference_httpwww_omg_orgspecCTS21_1Coremap', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1071, 3), )

    
    map = property(__map.value, __map.set, None, u'a reference to the corresponding map. Must be present if it is known the implementing CTS service')

    _ElementMap.update({
        __mapVersion.name() : __mapVersion,
        __map.name() : __map
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'MapVersionReference', MapVersionReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}SourceAndRoleReference with content type MIXED
class SourceAndRoleReference (pyxb.binding.basis.complexTypeDefinition):
    """a reference to a source that also includes the role that the source played and/or fixes the particular chapter, page or other element within the reference"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'SourceAndRoleReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1197, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'source'), 'source', '__httpwww_omg_orgspecCTS21_1Core_SourceAndRoleReference_httpwww_omg_orgspecCTS21_1Coresource', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1202, 3), )

    
    source = property(__source.value, __source.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}role uses Python identifier role
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'role'), 'role', '__httpwww_omg_orgspecCTS21_1Core_SourceAndRoleReference_httpwww_omg_orgspecCTS21_1Corerole', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1203, 3), )

    
    role = property(__role.value, __role.set, None, u'a role that the source played in the creation of the containing resource')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}bibliographicLink uses Python identifier bibliographicLink
    __bibliographicLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'bibliographicLink'), 'bibliographicLink', '__httpwww_omg_orgspecCTS21_1Core_SourceAndRoleReference_httpwww_omg_orgspecCTS21_1CorebibliographicLink', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1208, 3), )

    
    bibliographicLink = property(__bibliographicLink.value, __bibliographicLink.set, None, u'additional bibliographic information such as page number, edition, etc.')

    _ElementMap.update({
        __source.name() : __source,
        __role.name() : __role,
        __bibliographicLink.name() : __bibliographicLink
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'SourceAndRoleReference', SourceAndRoleReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ValueSetDefinitionReference with content type ELEMENT_ONLY
class ValueSetDefinitionReference (pyxb.binding.basis.complexTypeDefinition):
    """a reference to a set of rules for constructing a value set along with the corresponding value set if known"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ValueSetDefinitionReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1234, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}valueSetDefinition uses Python identifier valueSetDefinition
    __valueSetDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'valueSetDefinition'), 'valueSetDefinition', '__httpwww_omg_orgspecCTS21_1Core_ValueSetDefinitionReference_httpwww_omg_orgspecCTS21_1CorevalueSetDefinition', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1239, 3), )

    
    valueSetDefinition = property(__valueSetDefinition.value, __valueSetDefinition.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}valueSet uses Python identifier valueSet
    __valueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'valueSet'), 'valueSet', '__httpwww_omg_orgspecCTS21_1Core_ValueSetDefinitionReference_httpwww_omg_orgspecCTS21_1CorevalueSet', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1240, 3), )

    
    valueSet = property(__valueSet.value, __valueSet.set, None, u'A reference to the corresponding value set. Must be present if known to the implementing CTS service')

    _ElementMap.update({
        __valueSetDefinition.name() : __valueSetDefinition,
        __valueSet.name() : __valueSet
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'ValueSetDefinitionReference', ValueSetDefinitionReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}Filter with content type ELEMENT_ONLY
class Filter (pyxb.binding.basis.complexTypeDefinition):
    """A collection of one or more filters. The result of applying a  component is the  of the sets of qualifying elements. As an example, a filter having two components - one which
				says that the  attribute must exist and a second that says that the text "SNOMED" must appear in the synopsis would return all resources having BOTH a  attribute and "SNOMED" in the
				description."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Filter')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1290, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}component uses Python identifier component
    __component = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'component'), 'component', '__httpwww_omg_orgspecCTS21_1Core_Filter_httpwww_omg_orgspecCTS21_1Corecomponent', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1297, 3), )

    
    component = property(__component.value, __component.set, None, None)

    _ElementMap.update({
        __component.name() : __component
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'Filter', Filter)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}SortCriteria with content type ELEMENT_ONLY
class SortCriteria (pyxb.binding.basis.complexTypeDefinition):
    """An ordered list of sort criterion. The first entry in the list identifies the primary sort order, the second entry the sub sort order, etc. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'SortCriteria')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1362, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Core_SortCriteria_httpwww_omg_orgspecCTS21_1Coreentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1367, 3), )

    
    entry = property(__entry.value, __entry.set, None, None)

    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'SortCriteria', SortCriteria)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ComponentReference with content type ELEMENT_ONLY
class ComponentReference (pyxb.binding.basis.complexTypeDefinition):
    """A reference to a CTS model element.  may reference a model attribute, a  or a special element such as match strength."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ComponentReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1391, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}attributeReference uses Python identifier attributeReference
    __attributeReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'attributeReference'), 'attributeReference', '__httpwww_omg_orgspecCTS21_1Core_ComponentReference_httpwww_omg_orgspecCTS21_1CoreattributeReference', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1396, 3), )

    
    attributeReference = property(__attributeReference.value, __attributeReference.set, None, u'a reference to an attribute in a CTS model such as , , etc.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}propertyReference uses Python identifier propertyReference
    __propertyReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'propertyReference'), 'propertyReference', '__httpwww_omg_orgspecCTS21_1Core_ComponentReference_httpwww_omg_orgspecCTS21_1CorepropertyReference', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1401, 3), )

    
    propertyReference = property(__propertyReference.value, __propertyReference.set, None, u'a reference to a model . The reference target carries the URI and, optionally, namespace and name of the property predicate. ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}specialReference uses Python identifier specialReference
    __specialReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'specialReference'), 'specialReference', '__httpwww_omg_orgspecCTS21_1Core_ComponentReference_httpwww_omg_orgspecCTS21_1CorespecialReference', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1406, 3), )

    
    specialReference = property(__specialReference.value, __specialReference.set, None, u'the target of the reference is a special element such as the match strength of a search')

    _ElementMap.update({
        __attributeReference.name() : __attributeReference,
        __propertyReference.name() : __propertyReference,
        __specialReference.name() : __specialReference
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'ComponentReference', ComponentReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ComponentReferenceList with content type ELEMENT_ONLY
class ComponentReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A list (set) of zero or more component references"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ComponentReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1414, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Core_ComponentReferenceList_httpwww_omg_orgspecCTS21_1Coreentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1419, 3), )

    
    entry = property(__entry.value, __entry.set, None, None)

    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'ComponentReferenceList', ComponentReferenceList)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}OntologyLanguageAndSyntax with content type ELEMENT_ONLY
class OntologyLanguageAndSyntax (pyxb.binding.basis.complexTypeDefinition):
    """The language and syntax of an expression in an ontology. Language identifies the expression semantics (e.g. OWL 2.0, RDF, SNOMED Compositional Expression, etc) and syntax identifies how it is represnted (e.g.
				XML, text/plain, xml/rdf, manchester syntax, etc)"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'OntologyLanguageAndSyntax')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1601, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}ontologyLanguage uses Python identifier ontologyLanguage
    __ontologyLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'ontologyLanguage'), 'ontologyLanguage', '__httpwww_omg_orgspecCTS21_1Core_OntologyLanguageAndSyntax_httpwww_omg_orgspecCTS21_1CoreontologyLanguage', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1607, 3), )

    
    ontologyLanguage = property(__ontologyLanguage.value, __ontologyLanguage.set, None, u'The formal language (semantics) of the expression.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}ontologySyntax uses Python identifier ontologySyntax
    __ontologySyntax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'ontologySyntax'), 'ontologySyntax', '__httpwww_omg_orgspecCTS21_1Core_OntologyLanguageAndSyntax_httpwww_omg_orgspecCTS21_1CoreontologySyntax', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1612, 3), )

    
    ontologySyntax = property(__ontologySyntax.value, __ontologySyntax.set, None, u'The syntax of the expression.')

    _ElementMap.update({
        __ontologyLanguage.name() : __ontologyLanguage,
        __ontologySyntax.name() : __ontologySyntax
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'OntologyLanguageAndSyntax', OntologyLanguageAndSyntax)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}SourceAndNotation with content type ELEMENT_ONLY
class SourceAndNotation (pyxb.binding.basis.complexTypeDefinition):
    """A description of the source from which the  was derived. When possible,  should include a reference to the actual source document from which it was
				derived. As an example, if the resource was derived from the W3C Wine Ontology, the URI http://www.w3.org/TR/2003/CR-owl-guide-20030818/wine would unambiguously name the document. In the cases, however, when a definitive
				source document is not available, a textual description should be provided, instead, in . Where possible, the ontology language and ontology syntax should also be provided. In the case of
				the Wine Ontology above, the ontology language would be http://www.w3.org/2002/07/owl# (OWL) and the syntax would be application/rdf+xml."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'SourceAndNotation')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1905, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}sourceAndNotationDescription uses Python identifier sourceAndNotationDescription
    __sourceAndNotationDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndNotationDescription'), 'sourceAndNotationDescription', '__httpwww_omg_orgspecCTS21_1Core_SourceAndNotation_httpwww_omg_orgspecCTS21_1CoresourceAndNotationDescription', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1913, 3), )

    
    sourceAndNotationDescription = property(__sourceAndNotationDescription.value, __sourceAndNotationDescription.set, None, u'a textual description of where the specified resource version was derived from. This parameter must be supplied if a reasonable  for the source document is not\n\t\t\t\t\t\tavailable.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}sourceDocument uses Python identifier sourceDocument
    __sourceDocument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceDocument'), 'sourceDocument', '__httpwww_omg_orgspecCTS21_1Core_SourceAndNotation_httpwww_omg_orgspecCTS21_1CoresourceDocument', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1919, 3), )

    
    sourceDocument = property(__sourceDocument.value, __sourceDocument.set, None, u'a persistent URI that references the document from which the resource version was derived. This URI may be resolvable to a digital resource or may be the name of a book, publication or other external\n\t\t\t\t\t\tdocument.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}sourceLanguage uses Python identifier sourceLanguage
    __sourceLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceLanguage'), 'sourceLanguage', '__httpwww_omg_orgspecCTS21_1Core_SourceAndNotation_httpwww_omg_orgspecCTS21_1CoresourceLanguage', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1925, 3), )

    
    sourceLanguage = property(__sourceLanguage.value, __sourceLanguage.set, None, u'the formal language, if any, that the source for the resource version is expressed in. Examples include Common Logic, OWL, OWL-DL, ,\n\t\t\t\t\t\tetc.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}sourceDocumentSyntax uses Python identifier sourceDocumentSyntax
    __sourceDocumentSyntax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceDocumentSyntax'), 'sourceDocumentSyntax', '__httpwww_omg_orgspecCTS21_1Core_SourceAndNotation_httpwww_omg_orgspecCTS21_1CoresourceDocumentSyntax', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1931, 3), )

    
    sourceDocumentSyntax = property(__sourceDocumentSyntax.value, __sourceDocumentSyntax.set, None, u'the syntax of the source of the resource version, if known. Examples might include rdf/xml, Turtle, Manchester Syntax, CSV, etc.')

    _ElementMap.update({
        __sourceAndNotationDescription.name() : __sourceAndNotationDescription,
        __sourceDocument.name() : __sourceDocument,
        __sourceLanguage.name() : __sourceLanguage,
        __sourceDocumentSyntax.name() : __sourceDocumentSyntax
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'SourceAndNotation', SourceAndNotation)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}AnonymousStatement with content type ELEMENT_ONLY
class AnonymousStatement (pyxb.binding.basis.complexTypeDefinition):
    """A statement lacking a named subject. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'AnonymousStatement')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1976, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}predicate uses Python identifier predicate
    __predicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'predicate'), 'predicate', '__httpwww_omg_orgspecCTS21_1Core_AnonymousStatement_httpwww_omg_orgspecCTS21_1Corepredicate', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1982, 3), )

    
    predicate = property(__predicate.value, __predicate.set, None, u'the predicate of the anonymous statement')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}target uses Python identifier target
    __target = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'target'), 'target', '__httpwww_omg_orgspecCTS21_1Core_AnonymousStatement_httpwww_omg_orgspecCTS21_1Coretarget', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1987, 3), )

    
    target = property(__target.value, __target.set, None, u'the target of the anonymous statement')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}statmentQualifier uses Python identifier statmentQualifier
    __statmentQualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'statmentQualifier'), 'statmentQualifier', '__httpwww_omg_orgspecCTS21_1Core_AnonymousStatement_httpwww_omg_orgspecCTS21_1CorestatmentQualifier', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1992, 3), )

    
    statmentQualifier = property(__statmentQualifier.value, __statmentQualifier.set, None, u'assertions whose subject is the anonymous statement ')

    _ElementMap.update({
        __predicate.name() : __predicate,
        __target.name() : __target,
        __statmentQualifier.name() : __statmentQualifier
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'AnonymousStatement', AnonymousStatement)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}Parameter with content type ELEMENT_ONLY
class Parameter (pyxb.binding.basis.complexTypeDefinition):
    """A parameter in a REST Resource"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Parameter')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2045, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}val uses Python identifier val
    __val = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'val'), 'val', '__httpwww_omg_orgspecCTS21_1Core_Parameter_httpwww_omg_orgspecCTS21_1Coreval', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2051, 3), )

    
    val = property(__val.value, __val.set, None, None)

    
    # Attribute arg uses Python identifier arg
    __arg = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'arg'), 'arg', '__httpwww_omg_orgspecCTS21_1Core_Parameter_arg', pyxb.binding.datatypes.NCName)
    __arg._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2053, 2)
    __arg._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2053, 2)
    
    arg = property(__arg.value, __arg.set, None, None)

    _ElementMap.update({
        __val.name() : __val
    })
    _AttributeMap.update({
        __arg.name() : __arg
    })
_Namespace_core.addCategoryObject('typeBinding', u'Parameter', Parameter)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}RESTResource with content type ELEMENT_ONLY
class RESTResource (pyxb.binding.basis.complexTypeDefinition):
    """The header information for any REST resource retrieval"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'RESTResource')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2056, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}resourceRoot uses Python identifier resourceRoot
    __resourceRoot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceRoot'), 'resourceRoot', '__httpwww_omg_orgspecCTS21_1Core_RESTResource_httpwww_omg_orgspecCTS21_1CoreresourceRoot', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2062, 3), )

    
    resourceRoot = property(__resourceRoot.value, __resourceRoot.set, None, u'The URI of the REST service.  As an example, if the resource URI\n\t\t\t\t\t\twas "http://informatics.mayo.edu/cts2/rest/codesystems", the resourceRoot would be\n\t\t\t\t\t\t"http://informatics.mayo.edu/cts2/rest/"')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}resourceURI uses Python identifier resourceURI
    __resourceURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceURI'), 'resourceURI', '__httpwww_omg_orgspecCTS21_1Core_RESTResource_httpwww_omg_orgspecCTS21_1CoreresourceURI', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2070, 3), )

    
    resourceURI = property(__resourceURI.value, __resourceURI.set, None, u'The  URI of the resource with respect to the resourceRoot.  As an example,\n\t\t\t\t\t\tif the resource URI was "http://informatics.mayo.edu/cts2/rest/codesystems", the resourceURI would\n\t\t\t\t\t\tbe "codesystems".  Fragment and query identifiers should also be included.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'parameter'), 'parameter', '__httpwww_omg_orgspecCTS21_1Core_RESTResource_httpwww_omg_orgspecCTS21_1Coreparameter', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2078, 3), )

    
    parameter = property(__parameter.value, __parameter.set, None, u'The paramaters that were used in executing the query. This carries all of the parameters that\n\t\t\t\t\tare needed to reconstruct the complete query in either a RESTful or procedural environment. The service provider\n\t\t\t\t\tmay or may not include non-CTS2 related parameters such as security tokens, routing requests, etc.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}accessDate uses Python identifier accessDate
    __accessDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'accessDate'), 'accessDate', '__httpwww_omg_orgspecCTS21_1Core_RESTResource_httpwww_omg_orgspecCTS21_1CoreaccessDate', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2086, 3), )

    
    accessDate = property(__accessDate.value, __accessDate.set, None, u'The date and time that the resource was accessed.')

    _ElementMap.update({
        __resourceRoot.name() : __resourceRoot,
        __resourceURI.name() : __resourceURI,
        __parameter.name() : __parameter,
        __accessDate.name() : __accessDate
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'RESTResource', RESTResource)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}Message with content type ELEMENT_ONLY
class Message (pyxb.binding.basis.complexTypeDefinition):
    """Message header that wraps all returns."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Message')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2095, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}heading uses Python identifier heading
    __heading = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'heading'), 'heading', '__httpwww_omg_orgspecCTS21_1Core_Message_httpwww_omg_orgspecCTS21_1Coreheading', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3), )

    
    heading = property(__heading.value, __heading.set, None, None)

    _ElementMap.update({
        __heading.name() : __heading
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'Message', Message)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescription with content type ELEMENT_ONLY
class EntityDescription_ (pyxb.binding.basis.complexTypeDefinition):
    """A choice of the possible types of entity description"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 16, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}namedEntity uses Python identifier namedEntity
    __namedEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'namedEntity'), 'namedEntity', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescription__httpwww_omg_orgspecCTS21_1EntitynamedEntity', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 22, 3), )

    
    namedEntity = property(__namedEntity.value, __namedEntity.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}anonymousEntity uses Python identifier anonymousEntity
    __anonymousEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'anonymousEntity'), 'anonymousEntity', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescription__httpwww_omg_orgspecCTS21_1EntityanonymousEntity', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 23, 3), )

    
    anonymousEntity = property(__anonymousEntity.value, __anonymousEntity.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}classDescription uses Python identifier classDescription
    __classDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'classDescription'), 'classDescription', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescription__httpwww_omg_orgspecCTS21_1EntityclassDescription', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 24, 3), )

    
    classDescription = property(__classDescription.value, __classDescription.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}dataTypeDescription uses Python identifier dataTypeDescription
    __dataTypeDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'dataTypeDescription'), 'dataTypeDescription', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescription__httpwww_omg_orgspecCTS21_1EntitydataTypeDescription', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 25, 3), )

    
    dataTypeDescription = property(__dataTypeDescription.value, __dataTypeDescription.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}predicateDescription uses Python identifier predicateDescription
    __predicateDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateDescription'), 'predicateDescription', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescription__httpwww_omg_orgspecCTS21_1EntitypredicateDescription', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 26, 3), )

    
    predicateDescription = property(__predicateDescription.value, __predicateDescription.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}objectPropertyDescription uses Python identifier objectPropertyDescription
    __objectPropertyDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'objectPropertyDescription'), 'objectPropertyDescription', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescription__httpwww_omg_orgspecCTS21_1EntityobjectPropertyDescription', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 27, 3), )

    
    objectPropertyDescription = property(__objectPropertyDescription.value, __objectPropertyDescription.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}dataPropertyDescription uses Python identifier dataPropertyDescription
    __dataPropertyDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'dataPropertyDescription'), 'dataPropertyDescription', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescription__httpwww_omg_orgspecCTS21_1EntitydataPropertyDescription', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 28, 3), )

    
    dataPropertyDescription = property(__dataPropertyDescription.value, __dataPropertyDescription.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}annotationPropertyDescription uses Python identifier annotationPropertyDescription
    __annotationPropertyDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'annotationPropertyDescription'), 'annotationPropertyDescription', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescription__httpwww_omg_orgspecCTS21_1EntityannotationPropertyDescription', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 29, 3), )

    
    annotationPropertyDescription = property(__annotationPropertyDescription.value, __annotationPropertyDescription.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}namedIndividual uses Python identifier namedIndividual
    __namedIndividual = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'namedIndividual'), 'namedIndividual', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescription__httpwww_omg_orgspecCTS21_1EntitynamedIndividual', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 30, 3), )

    
    namedIndividual = property(__namedIndividual.value, __namedIndividual.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}anonymousIndividual uses Python identifier anonymousIndividual
    __anonymousIndividual = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'anonymousIndividual'), 'anonymousIndividual', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescription__httpwww_omg_orgspecCTS21_1EntityanonymousIndividual', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 31, 3), )

    
    anonymousIndividual = property(__anonymousIndividual.value, __anonymousIndividual.set, None, None)

    _ElementMap.update({
        __namedEntity.name() : __namedEntity,
        __anonymousEntity.name() : __anonymousEntity,
        __classDescription.name() : __classDescription,
        __dataTypeDescription.name() : __dataTypeDescription,
        __predicateDescription.name() : __predicateDescription,
        __objectPropertyDescription.name() : __objectPropertyDescription,
        __dataPropertyDescription.name() : __dataPropertyDescription,
        __annotationPropertyDescription.name() : __annotationPropertyDescription,
        __namedIndividual.name() : __namedIndividual,
        __anonymousIndividual.name() : __anonymousIndividual
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'EntityDescription', EntityDescription_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Statement}StatementSubject with content type ELEMENT_ONLY
class StatementSubject (pyxb.binding.basis.complexTypeDefinition):
    """The subject of a statement, which may either be a resource URI or an entity reference, which includes both the URI and the namespace/name."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_stmt, u'StatementSubject')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 64, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}resource uses Python identifier resource
    __resource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'resource'), 'resource', '__httpwww_omg_orgspecCTS21_1Statement_StatementSubject_httpwww_omg_orgspecCTS21_1Statementresource', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 69, 3), )

    
    resource = property(__resource.value, __resource.set, None, u'A non-entity statement subject such as the URI of a , , , etc.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}entity uses Python identifier entity
    __entity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entity'), 'entity', '__httpwww_omg_orgspecCTS21_1Statement_StatementSubject_httpwww_omg_orgspecCTS21_1Statemententity', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 74, 3), )

    
    entity = property(__entity.value, __entity.set, None, u'The subject of a statement about a class, role or individual.')

    _ElementMap.update({
        __resource.name() : __resource,
        __entity.name() : __entity
    })
    _AttributeMap.update({
        
    })
_Namespace_stmt.addCategoryObject('typeBinding', u'StatementSubject', StatementSubject)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Statement}StatementQualifier with content type ELEMENT_ONLY
class StatementQualifier (pyxb.binding.basis.complexTypeDefinition):
    """Metadata about a statement including provenance, external identity, validity, etc. The subject of a qualifier is the statement itself, not the statement subject."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_stmt, u'StatementQualifier')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 83, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}qualifierPredicate uses Python identifier qualifierPredicate
    __qualifierPredicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'qualifierPredicate'), 'qualifierPredicate', '__httpwww_omg_orgspecCTS21_1Statement_StatementQualifier_httpwww_omg_orgspecCTS21_1StatementqualifierPredicate', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 88, 3), )

    
    qualifierPredicate = property(__qualifierPredicate.value, __qualifierPredicate.set, None, u'A reference to the statement qualifier predicate. ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}associatedAttribute uses Python identifier associatedAttribute
    __associatedAttribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'associatedAttribute'), 'associatedAttribute', '__httpwww_omg_orgspecCTS21_1Statement_StatementQualifier_httpwww_omg_orgspecCTS21_1StatementassociatedAttribute', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 93, 3), )

    
    associatedAttribute = property(__associatedAttribute.value, __associatedAttribute.set, None, u'The CTS model attribute that represents this particular statement qualifier')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}target uses Python identifier target
    __target = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'target'), 'target', '__httpwww_omg_orgspecCTS21_1Statement_StatementQualifier_httpwww_omg_orgspecCTS21_1Statementtarget', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 98, 3), )

    
    target = property(__target.value, __target.set, None, None)

    _ElementMap.update({
        __qualifierPredicate.name() : __qualifierPredicate,
        __associatedAttribute.name() : __associatedAttribute,
        __target.name() : __target
    })
    _AttributeMap.update({
        
    })
_Namespace_stmt.addCategoryObject('typeBinding', u'StatementQualifier', StatementQualifier)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource with content type ELEMENT_ONLY
class ChangeableResource (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ChangeableResource')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 43, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}association uses Python identifier association
    __association = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'association'), 'association', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1Updatesassociation', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 48, 3), )

    
    association = property(__association.value, __association.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}codeSystem uses Python identifier codeSystem
    __codeSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'codeSystem'), 'codeSystem', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1UpdatescodeSystem', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 49, 3), )

    
    codeSystem = property(__codeSystem.value, __codeSystem.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}codeSystemVersion uses Python identifier codeSystemVersion
    __codeSystemVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'codeSystemVersion'), 'codeSystemVersion', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1UpdatescodeSystemVersion', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 50, 3), )

    
    codeSystemVersion = property(__codeSystemVersion.value, __codeSystemVersion.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}conceptDomain uses Python identifier conceptDomain
    __conceptDomain = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'conceptDomain'), 'conceptDomain', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1UpdatesconceptDomain', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 51, 3), )

    
    conceptDomain = property(__conceptDomain.value, __conceptDomain.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}conceptDomainBinding uses Python identifier conceptDomainBinding
    __conceptDomainBinding = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'conceptDomainBinding'), 'conceptDomainBinding', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1UpdatesconceptDomainBinding', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 52, 3), )

    
    conceptDomainBinding = property(__conceptDomainBinding.value, __conceptDomainBinding.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}entityDescription uses Python identifier entityDescription
    __entityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'entityDescription'), 'entityDescription', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1UpdatesentityDescription', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 53, 3), )

    
    entityDescription = property(__entityDescription.value, __entityDescription.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}map uses Python identifier map
    __map = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'map'), 'map', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1Updatesmap', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 54, 3), )

    
    map = property(__map.value, __map.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}mapVersion uses Python identifier mapVersion
    __mapVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'mapVersion'), 'mapVersion', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1UpdatesmapVersion', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 55, 3), )

    
    mapVersion = property(__mapVersion.value, __mapVersion.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}mapEntry uses Python identifier mapEntry
    __mapEntry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'mapEntry'), 'mapEntry', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1UpdatesmapEntry', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 56, 3), )

    
    mapEntry = property(__mapEntry.value, __mapEntry.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}statement uses Python identifier statement
    __statement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'statement'), 'statement', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1Updatesstatement', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 57, 3), )

    
    statement = property(__statement.value, __statement.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}valueSet uses Python identifier valueSet
    __valueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'valueSet'), 'valueSet', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1UpdatesvalueSet', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 58, 3), )

    
    valueSet = property(__valueSet.value, __valueSet.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}valueSetDefinition uses Python identifier valueSetDefinition
    __valueSetDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'valueSetDefinition'), 'valueSetDefinition', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_httpwww_omg_orgspecCTS21_1UpdatesvalueSetDefinition', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 59, 3), )

    
    valueSetDefinition = property(__valueSetDefinition.value, __valueSetDefinition.set, None, None)

    
    # Attribute entryOrder uses Python identifier entryOrder
    __entryOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'entryOrder'), 'entryOrder', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableResource_entryOrder', pyxb.binding.datatypes.positiveInteger, required=True)
    __entryOrder._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2106, 2)
    __entryOrder._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2106, 2)
    
    entryOrder = property(__entryOrder.value, __entryOrder.set, None, None)

    _ElementMap.update({
        __association.name() : __association,
        __codeSystem.name() : __codeSystem,
        __codeSystemVersion.name() : __codeSystemVersion,
        __conceptDomain.name() : __conceptDomain,
        __conceptDomainBinding.name() : __conceptDomainBinding,
        __entityDescription.name() : __entityDescription,
        __map.name() : __map,
        __mapVersion.name() : __mapVersion,
        __mapEntry.name() : __mapEntry,
        __statement.name() : __statement,
        __valueSet.name() : __valueSet,
        __valueSetDefinition.name() : __valueSetDefinition
    })
    _AttributeMap.update({
        __entryOrder.name() : __entryOrder
    })
_Namespace.addCategoryObject('typeBinding', u'ChangeableResource', ChangeableResource)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}CompleteCodeSystemReference with content type ELEMENT_ONLY
class CompleteCodeSystemReference (pyxb.binding.basis.complexTypeDefinition):
    """An entry that, when resolved, returns all of the active entity references in a given code system. This includes all entity references that appear as the source of one or more statements in the code system,
				whether the assertions are made directly by a version of the code system or indirectly by a version of a different code system that is imported. Note that targets are not included to prevent codes from rdf, rdfs, owl, etc
				being included in this resolution set."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'CompleteCodeSystemReference')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 181, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}codeSystem uses Python identifier codeSystem
    __codeSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystem'), 'codeSystem', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_CompleteCodeSystemReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitioncodeSystem', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 188, 3), )

    
    codeSystem = property(__codeSystem.value, __codeSystem.set, None, u'A reference to the code system whose codes are to be included.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}codeSystemVersion uses Python identifier codeSystemVersion
    __codeSystemVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystemVersion'), 'codeSystemVersion', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_CompleteCodeSystemReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitioncodeSystemVersion', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 193, 3), )

    
    codeSystemVersion = property(__codeSystemVersion.value, __codeSystemVersion.set, None, u'A reference to the specific version of the code system to include. If not supplied, the specific version of the code system is determined in the resolution call itself.')

    _ElementMap.update({
        __codeSystem.name() : __codeSystem,
        __codeSystemVersion.name() : __codeSystemVersion
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'CompleteCodeSystemReference', CompleteCodeSystemReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}CompleteValueSetReference with content type ELEMENT_ONLY
class CompleteValueSetReference (pyxb.binding.basis.complexTypeDefinition):
    """A reference to a value set that, when resolved, results in a set of entity references that are included in this entry. An entry of this type can just name a value set, meaning that the specific definition is
				determined in the resolve value set call, can name both a value set and value set definition, meaning that the specific definition is always used in the resolution. It can also specify one or more code system versions to be
				used in the resolution of the named value set."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'CompleteValueSetReference')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 202, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}valueSet uses Python identifier valueSet
    __valueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'valueSet'), 'valueSet', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_CompleteValueSetReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitionvalueSet', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 209, 3), )

    
    valueSet = property(__valueSet.value, __valueSet.set, None, u'a reference to the value set whose definition supplies a set of entity references.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}valueSetDefinition uses Python identifier valueSetDefinition
    __valueSetDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'valueSetDefinition'), 'valueSetDefinition', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_CompleteValueSetReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitionvalueSetDefinition', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 214, 3), )

    
    valueSetDefinition = property(__valueSetDefinition.value, __valueSetDefinition.set, None, u'a reference to a particular definition of  that is to be used in resolving this reference. If absent, the specific definition is determined by the resolve value set call. If present,\n\t\t\t\t\t\t\t must be a definition of  and will always be used to resolve this entity set.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}referenceCodeSystemVersion uses Python identifier referenceCodeSystemVersion
    __referenceCodeSystemVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'referenceCodeSystemVersion'), 'referenceCodeSystemVersion', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_CompleteValueSetReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitionreferenceCodeSystemVersion', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 220, 3), )

    
    referenceCodeSystemVersion = property(__referenceCodeSystemVersion.value, __referenceCodeSystemVersion.set, None, u'a reference to a  that will be used to resolve this call.  will only be used if one or more components of the resolution of \n\t\t\t\t\t\tidentify a code system without specifying a specific version. At most, only one version of a given code system may appear in the  list. While CTS service implementations\n\t\t\t\t\t\tmust resolve resolution calls for definitions that carry unused  entries, they may choose to issue a warning at the time the definition is created or loaded.')

    _ElementMap.update({
        __valueSet.name() : __valueSet,
        __valueSetDefinition.name() : __valueSetDefinition,
        __referenceCodeSystemVersion.name() : __referenceCodeSystemVersion
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'CompleteValueSetReference', CompleteValueSetReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}PropertyQueryReference with content type ELEMENT_ONLY
class PropertyQueryReference (pyxb.binding.basis.complexTypeDefinition):
    """A description of a set of entity references that are determined by applying a filter to the attribute(s) or property(s) that appear in an  in a specified code system."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'PropertyQueryReference')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 242, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}codeSystem uses Python identifier codeSystem
    __codeSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystem'), 'codeSystem', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_PropertyQueryReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitioncodeSystem', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 247, 3), )

    
    codeSystem = property(__codeSystem.value, __codeSystem.set, None, u'The code system that contains the assertions that form the attributes or properties to be tested.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}codeSystemVersion uses Python identifier codeSystemVersion
    __codeSystemVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystemVersion'), 'codeSystemVersion', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_PropertyQueryReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitioncodeSystemVersion', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 252, 3), )

    
    codeSystemVersion = property(__codeSystemVersion.value, __codeSystemVersion.set, None, u'The version of the code system that makes the assertions. If present,  must be a version of . If this attribute is present, the referenced version of the code\n\t\t\t\t\t\tsystem will always be used to resolve the attributes or properties. If absent, the specific version of the code system to be used in resolution is determined in the resolve value set definition call\n\t\t\t\t\t\titself.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}filter uses Python identifier filter
    __filter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'filter'), 'filter', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_PropertyQueryReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitionfilter', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 259, 3), )

    
    filter = property(__filter.value, __filter.set, None, u'The filter to be applied to entities in the referenced code system. ')

    _ElementMap.update({
        __codeSystem.name() : __codeSystem,
        __codeSystemVersion.name() : __codeSystemVersion,
        __filter.name() : __filter
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'PropertyQueryReference', PropertyQueryReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}SpecificEntityList with content type ELEMENT_ONLY
class SpecificEntityList (pyxb.binding.basis.complexTypeDefinition):
    """a list of specific entity references that are to be included in the definition. When specified in this form, the service must include all entities in this list whether they are known to the service or not, and
				whether they are currently  or not."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'SpecificEntityList')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 268, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}referencedEntity uses Python identifier referencedEntity
    __referencedEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'referencedEntity'), 'referencedEntity', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_SpecificEntityList_httpwww_omg_orgspecCTS21_1ValueSetDefinitionreferencedEntity', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 274, 3), )

    
    referencedEntity = property(__referencedEntity.value, __referencedEntity.set, None, u'the namespace / name or URI of an entity to be included')

    _ElementMap.update({
        __referencedEntity.name() : __referencedEntity
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'SpecificEntityList', SpecificEntityList)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ResolvedValueSetHeader with content type ELEMENT_ONLY
class ResolvedValueSetHeader (pyxb.binding.basis.complexTypeDefinition):
    """The information required to completely resolve a value set definition. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ResolvedValueSetHeader')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 375, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}resolutionOf uses Python identifier resolutionOf
    __resolutionOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolutionOf'), 'resolutionOf', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSetHeader_httpwww_omg_orgspecCTS21_1ValueSetDefinitionresolutionOf', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 380, 3), )

    
    resolutionOf = property(__resolutionOf.value, __resolutionOf.set, None, u'the specific value set definition that was resolved')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}resolvedUsingCodeSystem uses Python identifier resolvedUsingCodeSystem
    __resolvedUsingCodeSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolvedUsingCodeSystem'), 'resolvedUsingCodeSystem', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSetHeader_httpwww_omg_orgspecCTS21_1ValueSetDefinitionresolvedUsingCodeSystem', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 385, 3), )

    
    resolvedUsingCodeSystem = property(__resolvedUsingCodeSystem.value, __resolvedUsingCodeSystem.set, None, u'a reference to a code system version that was used in the resolution of this value set definition')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}includesResolvedValueSet uses Python identifier includesResolvedValueSet
    __includesResolvedValueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'includesResolvedValueSet'), 'includesResolvedValueSet', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSetHeader_httpwww_omg_orgspecCTS21_1ValueSetDefinitionincludesResolvedValueSet', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 390, 3), )

    
    includesResolvedValueSet = property(__includesResolvedValueSet.value, __includesResolvedValueSet.set, None, u'If the value set includes other value sets, this contains the resolution information used to resolve the inner value sets.')

    _ElementMap.update({
        __resolutionOf.name() : __resolutionOf,
        __resolvedUsingCodeSystem.name() : __resolvedUsingCodeSystem,
        __includesResolvedValueSet.name() : __includesResolvedValueSet
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ResolvedValueSetHeader', ResolvedValueSetHeader)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ResolvedValueSet with content type ELEMENT_ONLY
class ResolvedValueSet_ (pyxb.binding.basis.complexTypeDefinition):
    """The result of resolving a specific value set definition against a known set of code system versions.  consists of a header that carries sufficient information that the resolution
				operation would be repeatable and the result of the resolution, which consists of set of EntityReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ResolvedValueSet')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 404, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}resolutionInfo uses Python identifier resolutionInfo
    __resolutionInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolutionInfo'), 'resolutionInfo', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSet__httpwww_omg_orgspecCTS21_1ValueSetDefinitionresolutionInfo', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 410, 3), )

    
    resolutionInfo = property(__resolutionInfo.value, __resolutionInfo.set, None, u'the set of parameters that were used in the resolution of this set.  provides all the information necessary to recreate the actual  when presented to a\n\t\t\t\t\t\t\tCTS service instance that contains all of the necessary definitions and code system versions.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSet__httpwww_omg_orgspecCTS21_1ValueSetDefinitionentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 416, 3), )

    
    entry = property(__entry.value, __entry.set, None, u'a synopsis of the  that has been determined to be a member of the value set named in  according to the stated criteria or "bindings"')

    _ElementMap.update({
        __resolutionInfo.name() : __resolutionInfo,
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ResolvedValueSet', ResolvedValueSet_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Association}AssociationMsg with content type ELEMENT_ONLY
class AssociationMsg_ (Message):
    """A  read from a service instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationMsg')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 114, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}association uses Python identifier association
    __association = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'association'), 'association', '__httpwww_omg_orgspecCTS21_1Association_AssociationMsg__httpwww_omg_orgspecCTS21_1Associationassociation', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 122, 5), )

    
    association = property(__association.value, __association.set, None, None)

    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    _ElementMap.update({
        __association.name() : __association
    })
    _AttributeMap.update({
        
    })
_Namespace_association.addCategoryObject('typeBinding', u'AssociationMsg', AssociationMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystem}CodeSystemCatalogEntryMsg with content type ELEMENT_ONLY
class CodeSystemCatalogEntryMsg_ (Message):
    """A  read from a service instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystem, u'CodeSystemCatalogEntryMsg')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 81, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}codeSystemCatalogEntry uses Python identifier codeSystemCatalogEntry
    __codeSystemCatalogEntry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'codeSystemCatalogEntry'), 'codeSystemCatalogEntry', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntryMsg__httpwww_omg_orgspecCTS21_1CodeSystemcodeSystemCatalogEntry', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 89, 5), )

    
    codeSystemCatalogEntry = property(__codeSystemCatalogEntry.value, __codeSystemCatalogEntry.set, None, None)

    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    _ElementMap.update({
        __codeSystemCatalogEntry.name() : __codeSystemCatalogEntry
    })
    _AttributeMap.update({
        
    })
_Namespace_codesystem.addCategoryObject('typeBinding', u'CodeSystemCatalogEntryMsg', CodeSystemCatalogEntryMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}CodeSystemVersionCatalogEntryMsg with content type ELEMENT_ONLY
class CodeSystemVersionCatalogEntryMsg_ (Message):
    """A  read from a service instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'CodeSystemVersionCatalogEntryMsg')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 84, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}codeSystemVersionCatalogEntry uses Python identifier codeSystemVersionCatalogEntry
    __codeSystemVersionCatalogEntry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'codeSystemVersionCatalogEntry'), 'codeSystemVersionCatalogEntry', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntryMsg__httpwww_omg_orgspecCTS21_1CodeSystemVersioncodeSystemVersionCatalogEntry', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 92, 5), )

    
    codeSystemVersionCatalogEntry = property(__codeSystemVersionCatalogEntry.value, __codeSystemVersionCatalogEntry.set, None, None)

    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    _ElementMap.update({
        __codeSystemVersionCatalogEntry.name() : __codeSystemVersionCatalogEntry
    })
    _AttributeMap.update({
        
    })
_Namespace_codesystemversion.addCategoryObject('typeBinding', u'CodeSystemVersionCatalogEntryMsg', CodeSystemVersionCatalogEntryMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}ConceptDomainCatalogEntryMsg with content type ELEMENT_ONLY
class ConceptDomainCatalogEntryMsg_ (Message):
    """A  read from a service instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'ConceptDomainCatalogEntryMsg')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 54, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}conceptDomainCatalogEntry uses Python identifier conceptDomainCatalogEntry
    __conceptDomainCatalogEntry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'conceptDomainCatalogEntry'), 'conceptDomainCatalogEntry', '__httpwww_omg_orgspecCTS21_1ConceptDomain_ConceptDomainCatalogEntryMsg__httpwww_omg_orgspecCTS21_1ConceptDomainconceptDomainCatalogEntry', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 62, 5), )

    
    conceptDomainCatalogEntry = property(__conceptDomainCatalogEntry.value, __conceptDomainCatalogEntry.set, None, None)

    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    _ElementMap.update({
        __conceptDomainCatalogEntry.name() : __conceptDomainCatalogEntry
    })
    _AttributeMap.update({
        
    })
_Namespace_conceptdomain.addCategoryObject('typeBinding', u'ConceptDomainCatalogEntryMsg', ConceptDomainCatalogEntryMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}ConceptDomainBindingMsg with content type ELEMENT_ONLY
class ConceptDomainBindingMsg_ (Message):
    """A  read from a service instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'ConceptDomainBindingMsg')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 69, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}conceptDomainBinding uses Python identifier conceptDomainBinding
    __conceptDomainBinding = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'conceptDomainBinding'), 'conceptDomainBinding', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBindingMsg__httpwww_omg_orgspecCTS21_1ConceptDomainBindingconceptDomainBinding', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 77, 5), )

    
    conceptDomainBinding = property(__conceptDomainBinding.value, __conceptDomainBinding.set, None, None)

    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    _ElementMap.update({
        __conceptDomainBinding.name() : __conceptDomainBinding
    })
    _AttributeMap.update({
        
    })
_Namespace_conceptdomainbinding.addCategoryObject('typeBinding', u'ConceptDomainBindingMsg', ConceptDomainBindingMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}EntryDescription with content type ELEMENT_ONLY
class EntryDescription (OpaqueData):
    """ is a subclass of . The purpose behind this is that there are certain textual fields that some CTS service implementations may want constrain. As an example,
					 text is of type \\ , but implementations may want to restrict the 
				attribute to a simple string rather than xs:anyType. When  appears directly as a model element, implementations must be able to support the full  model. ,
				however, may be constrained by implementations or specialized PSMs."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'EntryDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 135, 1)
    _ElementMap = OpaqueData._ElementMap.copy()
    _AttributeMap = OpaqueData._AttributeMap.copy()
    # Base type is OpaqueData
    
    # Element value_ ({http://www.omg.org/spec/CTS2/1.1/Core}value) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element format ({http://www.omg.org/spec/CTS2/1.1/Core}format) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element language ({http://www.omg.org/spec/CTS2/1.1/Core}language) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element schema ({http://www.omg.org/spec/CTS2/1.1/Core}schema) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'EntryDescription', EntryDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}EntityReference with content type ELEMENT_ONLY
class EntityReference (pyxb.binding.basis.complexTypeDefinition):
    """The URI, namespace/name (if known) and a list of code systems that make assertions about the entity."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'EntityReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 669, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'name'), 'name', '__httpwww_omg_orgspecCTS21_1Core_EntityReference_httpwww_omg_orgspecCTS21_1Corename', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 674, 3), )

    
    name = property(__name.value, __name.set, None, u'the namespace and name by which this entity is known within the context of the service implementation')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}knownEntityDescription uses Python identifier knownEntityDescription
    __knownEntityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'knownEntityDescription'), 'knownEntityDescription', '__httpwww_omg_orgspecCTS21_1Core_EntityReference_httpwww_omg_orgspecCTS21_1CoreknownEntityDescription', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 679, 3), )

    
    knownEntityDescription = property(__knownEntityDescription.value, __knownEntityDescription.set, None, u'a reference to a version of a code system that makes one or more assertions about the referenced entity. Note that only one version of a given code system is allowed in the \n\t\t\t\t\t\tlist. Unless specified otherwise in a specific call, the code system version with the tag "CURRENT" must be used.')

    
    # Attribute about uses Python identifier about
    __about = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'about'), 'about', '__httpwww_omg_orgspecCTS21_1Core_EntityReference_about', URI, required=True)
    __about._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 686, 2)
    __about._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 686, 2)
    
    about = property(__about.value, __about.set, None, u'the entity URI. This is an  if the is  and a  is the  is ')

    _ElementMap.update({
        __name.name() : __name,
        __knownEntityDescription.name() : __knownEntityDescription
    })
    _AttributeMap.update({
        __about.name() : __about
    })
_Namespace_core.addCategoryObject('typeBinding', u'EntityReference', EntityReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}FilterComponent with content type ELEMENT_ONLY
class FilterComponent (ComponentReference):
    """A restriction on an attribute, property or special field"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'FilterComponent')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1301, 1)
    _ElementMap = ComponentReference._ElementMap.copy()
    _AttributeMap = ComponentReference._AttributeMap.copy()
    # Base type is ComponentReference
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}matchAlgorithm uses Python identifier matchAlgorithm
    __matchAlgorithm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'matchAlgorithm'), 'matchAlgorithm', '__httpwww_omg_orgspecCTS21_1Core_FilterComponent_httpwww_omg_orgspecCTS21_1CorematchAlgorithm', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1308, 5), )

    
    matchAlgorithm = property(__matchAlgorithm.value, __matchAlgorithm.set, None, u'the algorithm to be used for testing the referenced component. Examples might include "starts with", "regular expression match", "exists", "inRange", etc. NOTE: The CTS specification\n\t\t\t\t\t\t\t\tneeds to establish a core set of match algorithms that all compliant implementations must support.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}matchValue uses Python identifier matchValue
    __matchValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'matchValue'), 'matchValue', '__httpwww_omg_orgspecCTS21_1Core_FilterComponent_httpwww_omg_orgspecCTS21_1CorematchValue', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1314, 5), )

    
    matchValue = property(__matchValue.value, __matchValue.set, None, u'the value to be used in comparison. The structure and format of  depends on the specific . As an example, a "startsWith" algorithm would be plain text, a\n\t\t\t\t\t\t\t\t"regularExpression" algorithm would have a regular expression while an "exists" algorithm would have nothing in the  attribute.')

    
    # Element attributeReference ({http://www.omg.org/spec/CTS2/1.1/Core}attributeReference) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ComponentReference
    
    # Element propertyReference ({http://www.omg.org/spec/CTS2/1.1/Core}propertyReference) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ComponentReference
    
    # Element specialReference ({http://www.omg.org/spec/CTS2/1.1/Core}specialReference) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ComponentReference
    _ElementMap.update({
        __matchAlgorithm.name() : __matchAlgorithm,
        __matchValue.name() : __matchValue
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'FilterComponent', FilterComponent)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}StatementTarget with content type ELEMENT_ONLY
class StatementTarget (pyxb.binding.basis.complexTypeDefinition):
    """the target of a  represents one of a literal value, a reference to a non-entity type , an  or an anonymous blank ."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'StatementTarget')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1942, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}entity uses Python identifier entity
    __entity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'entity'), 'entity', '__httpwww_omg_orgspecCTS21_1Core_StatementTarget_httpwww_omg_orgspecCTS21_1Coreentity', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1947, 3), )

    
    entity = property(__entity.value, __entity.set, None, u'the URI and optional namespace/name when the target type is ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}literal uses Python identifier literal
    __literal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'literal'), 'literal', '__httpwww_omg_orgspecCTS21_1Core_StatementTarget_httpwww_omg_orgspecCTS21_1Coreliteral', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1952, 3), )

    
    literal = property(__literal.value, __literal.set, None, u'the literal target when the statement type is ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}resource uses Python identifier resource
    __resource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'resource'), 'resource', '__httpwww_omg_orgspecCTS21_1Core_StatementTarget_httpwww_omg_orgspecCTS21_1Coreresource', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1957, 3), )

    
    resource = property(__resource.value, __resource.set, None, u'the resource URI when the statement type is ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}bnode uses Python identifier bnode
    __bnode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'bnode'), 'bnode', '__httpwww_omg_orgspecCTS21_1Core_StatementTarget_httpwww_omg_orgspecCTS21_1Corebnode', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1962, 3), )

    
    bnode = property(__bnode.value, __bnode.set, None, u'a collection of statements about an anonymous subject')

    
    # Attribute externalIdentifier uses Python identifier externalIdentifier
    __externalIdentifier = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'externalIdentifier'), 'externalIdentifier', '__httpwww_omg_orgspecCTS21_1Core_StatementTarget_externalIdentifier', String)
    __externalIdentifier._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1968, 2)
    __externalIdentifier._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1968, 2)
    
    externalIdentifier = property(__externalIdentifier.value, __externalIdentifier.set, None, u'an external identifier that has been assigned to the statement with this particular target by the authoring body. As an example, this would carry the SctId if the authoring body were\n\t\t\t\t\tSNOMED-CT')

    _ElementMap.update({
        __entity.name() : __entity,
        __literal.name() : __literal,
        __resource.name() : __resource,
        __bnode.name() : __bnode
    })
    _AttributeMap.update({
        __externalIdentifier.name() : __externalIdentifier
    })
_Namespace_core.addCategoryObject('typeBinding', u'StatementTarget', StatementTarget)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionMsg with content type ELEMENT_ONLY
class EntityDescriptionMsg_ (Message):
    """An  as returned from a service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityDescriptionMsg')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 516, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescription uses Python identifier EntityDescription
    __EntityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityDescription'), 'EntityDescription', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionMsg__httpwww_omg_orgspecCTS21_1EntityEntityDescription', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 10, 1), )

    
    EntityDescription = property(__EntityDescription.value, __EntityDescription.set, None, u'A choice of the possible types of entity description')

    _ElementMap.update({
        __EntityDescription.name() : __EntityDescription
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'EntityDescriptionMsg', EntityDescriptionMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}EntityReferenceMsg with content type ELEMENT_ONLY
class EntityReferenceMsg_ (Message):
    """An  as returned from a service"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityReferenceMsg')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 531, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}entityReference uses Python identifier entityReference
    __entityReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityReference'), 'entityReference', '__httpwww_omg_orgspecCTS21_1Entity_EntityReferenceMsg__httpwww_omg_orgspecCTS21_1EntityentityReference', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 539, 5), )

    
    entityReference = property(__entityReference.value, __entityReference.set, None, None)

    _ElementMap.update({
        __entityReference.name() : __entityReference
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'EntityReferenceMsg', EntityReferenceMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapCatalog}MapCatalogEntryMsg with content type ELEMENT_ONLY
class MapCatalogEntryMsg_ (Message):
    """A  read from a service instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_map, u'MapCatalogEntryMsg')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 74, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}map uses Python identifier map
    __map = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'map'), 'map', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntryMsg__httpwww_omg_orgspecCTS21_1MapCatalogmap', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 82, 5), )

    
    map = property(__map.value, __map.set, None, None)

    _ElementMap.update({
        __map.name() : __map
    })
    _AttributeMap.update({
        
    })
_Namespace_map.addCategoryObject('typeBinding', u'MapCatalogEntryMsg', MapCatalogEntryMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapVersionMsg with content type ELEMENT_ONLY
class MapVersionMsg_ (Message):
    """A  read from a service instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapVersionMsg')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 84, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}mapVersion uses Python identifier mapVersion
    __mapVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapVersion'), 'mapVersion', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersionMsg__httpwww_omg_orgspecCTS21_1MapVersionmapVersion', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 92, 5), )

    
    mapVersion = property(__mapVersion.value, __mapVersion.set, None, None)

    _ElementMap.update({
        __mapVersion.name() : __mapVersion
    })
    _AttributeMap.update({
        
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapVersionMsg', MapVersionMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapTarget with content type ELEMENT_ONLY
class MapTarget (pyxb.binding.basis.complexTypeDefinition):
    """A rule / target entry in a  The entries in a  are evaluated in order. For each entry,  is evaluated. If  returns FALSE, then evaluation moves on to
				the next  in the set. If  returns TRUE, the  is returned as a qualifying map in the associated  and corresponding . The setting of in the  determines whether subsequent  are evaluated. If is set to , the first matching  terminates the evaluation of the
					. If is set to , then processing continues until all  in the set have been evaluated."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapTarget')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 257, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}rule uses Python identifier rule
    __rule = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'rule'), 'rule', '__httpwww_omg_orgspecCTS21_1MapVersion_MapTarget_httpwww_omg_orgspecCTS21_1MapVersionrule', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 265, 3), )

    
    rule = property(__rule.value, __rule.set, None, u'a predicate of some sort that can be used to determine whether this entry meets the mapping criteria. If absent, the mapping is considered unconditional.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}mapTo uses Python identifier mapTo
    __mapTo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapTo'), 'mapTo', '__httpwww_omg_orgspecCTS21_1MapVersion_MapTarget_httpwww_omg_orgspecCTS21_1MapVersionmapTo', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 270, 3), )

    
    mapTo = property(__mapTo.value, __mapTo.set, None, u'the target entity to be used if the rule is satisfied. If not present, the assumption is that the source entity maps to nothing in this set / rule')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}targetDescription uses Python identifier targetDescription
    __targetDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'targetDescription'), 'targetDescription', '__httpwww_omg_orgspecCTS21_1MapVersion_MapTarget_httpwww_omg_orgspecCTS21_1MapVersiontargetDescription', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 275, 3), )

    
    targetDescription = property(__targetDescription.value, __targetDescription.set, None, u'a description of the resulting rule. Can be used to carry text to instruct human beings how to do the mapping as well as additional machine readable instructions.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}targetExpression uses Python identifier targetExpression
    __targetExpression = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'targetExpression'), 'targetExpression', '__httpwww_omg_orgspecCTS21_1MapVersion_MapTarget_httpwww_omg_orgspecCTS21_1MapVersiontargetExpression', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 280, 3), )

    
    targetExpression = property(__targetExpression.value, __targetExpression.set, None, u'a formal expression that, when interpreted, results in the map target. This expression could carry an RDF fragment, an expression in the SNOMED-CT compositional grammar or something\n\t\t\t\t\t\telse.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}correlation uses Python identifier correlation
    __correlation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'correlation'), 'correlation', '__httpwww_omg_orgspecCTS21_1MapVersion_MapTarget_httpwww_omg_orgspecCTS21_1MapVersioncorrelation', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 286, 3), )

    
    correlation = property(__correlation.value, __correlation.set, None, u'a reference to how well the mapping correlates. Example correlations might be Exact, not mappable, partial overlap, narrower than, etc.')

    
    # Attribute entryOrder uses Python identifier entryOrder
    __entryOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'entryOrder'), 'entryOrder', '__httpwww_omg_orgspecCTS21_1MapVersion_MapTarget_entryOrder', pyxb.binding.datatypes.positiveInteger, required=True)
    __entryOrder._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2106, 2)
    __entryOrder._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2106, 2)
    
    entryOrder = property(__entryOrder.value, __entryOrder.set, None, None)

    
    # Attribute externalEntryId uses Python identifier externalEntryId
    __externalEntryId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'externalEntryId'), 'externalEntryId', '__httpwww_omg_orgspecCTS21_1MapVersion_MapTarget_externalEntryId', String)
    __externalEntryId._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 292, 2)
    __externalEntryId._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 292, 2)
    
    externalEntryId = property(__externalEntryId.value, __externalEntryId.set, None, u'an identifier assigned to this particular source/set/target tuple by an outside body')

    _ElementMap.update({
        __rule.name() : __rule,
        __mapTo.name() : __mapTo,
        __targetDescription.name() : __targetDescription,
        __targetExpression.name() : __targetExpression,
        __correlation.name() : __correlation
    })
    _AttributeMap.update({
        __entryOrder.name() : __entryOrder,
        __externalEntryId.name() : __externalEntryId
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapTarget', MapTarget)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapRule with content type ELEMENT_ONLY
class MapRule (OpaqueData):
    """A set of instructions that, when interpreted in the proper context, returns a true/false value, where true means that the context meets the requirements set forth by the rule and false means that it doesn't.
				Neither the syntax nor the semantics of map rules are included as part of the CTS specification."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapRule')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 300, 1)
    _ElementMap = OpaqueData._ElementMap.copy()
    _AttributeMap = OpaqueData._AttributeMap.copy()
    # Base type is OpaqueData
    
    # Element value_ ({http://www.omg.org/spec/CTS2/1.1/Core}value) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element format ({http://www.omg.org/spec/CTS2/1.1/Core}format) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element language ({http://www.omg.org/spec/CTS2/1.1/Core}language) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element schema ({http://www.omg.org/spec/CTS2/1.1/Core}schema) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapRule', MapRule)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapEntryMsg with content type ELEMENT_ONLY
class MapEntryMsg_ (Message):
    """A  read from a service instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapEntryMsg')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 316, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntryMsg__httpwww_omg_orgspecCTS21_1MapVersionentry', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 324, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapEntryMsg', MapEntryMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Statement}StatementMsg with content type ELEMENT_ONLY
class StatementMsg_ (Message):
    """Complex type {http://www.omg.org/spec/CTS2/1.1/Statement}StatementMsg with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_stmt, u'StatementMsg')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 103, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}statement uses Python identifier statement
    __statement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'statement'), 'statement', '__httpwww_omg_orgspecCTS21_1Statement_StatementMsg__httpwww_omg_orgspecCTS21_1Statementstatement', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 107, 5), )

    
    statement = property(__statement.value, __statement.set, None, None)

    _ElementMap.update({
        __statement.name() : __statement
    })
    _AttributeMap.update({
        
    })
_Namespace_stmt.addCategoryObject('typeBinding', u'StatementMsg', StatementMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeSetMsg with content type ELEMENT_ONLY
class ChangeSetMsg_ (Message):
    """An ordered collection of changes that, when applied, will transform a service instance from one consistent state to
				another. A  is viewed as an atomic unit of change - either all of the  elements in a change set will
				be applied or none of them will be applied. It is anticipated that service implementations will provide a mechanism by which it can
				apply local business rules to the validation and application of change sets. These rules may include the option to selectively apply,
				reject, modify or ignore the elements of change sets as they arrive. In this case, it is up to the developers of the business rules to
				determine what constitutes a "complete" change set that can be applied."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ChangeSetMsg')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 69, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}changeSet uses Python identifier changeSet
    __changeSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'changeSet'), 'changeSet', '__httpwww_omg_orgspecCTS21_1Updates_ChangeSetMsg__httpwww_omg_orgspecCTS21_1UpdateschangeSet', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 82, 5), )

    
    changeSet = property(__changeSet.value, __changeSet.set, None, None)

    _ElementMap.update({
        __changeSet.name() : __changeSet
    })
    _AttributeMap.update({
        
    })
_Namespace.addCategoryObject('typeBinding', u'ChangeSetMsg', ChangeSetMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSet}ValueSetCatalogEntryMsg with content type ELEMENT_ONLY
class ValueSetCatalogEntryMsg_ (Message):
    """A  read from a service instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valueset, u'ValueSetCatalogEntryMsg')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 51, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSet}valueSetCatalogEntry uses Python identifier valueSetCatalogEntry
    __valueSetCatalogEntry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valueset, u'valueSetCatalogEntry'), 'valueSetCatalogEntry', '__httpwww_omg_orgspecCTS21_1ValueSet_ValueSetCatalogEntryMsg__httpwww_omg_orgspecCTS21_1ValueSetvalueSetCatalogEntry', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 59, 5), )

    
    valueSetCatalogEntry = property(__valueSetCatalogEntry.value, __valueSetCatalogEntry.set, None, None)

    _ElementMap.update({
        __valueSetCatalogEntry.name() : __valueSetCatalogEntry
    })
    _AttributeMap.update({
        
    })
_Namespace_valueset.addCategoryObject('typeBinding', u'ValueSetCatalogEntryMsg', ValueSetCatalogEntryMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ExternalValueSetDefinition with content type ELEMENT_ONLY
class ExternalValueSetDefinition (OpaqueData):
    """A definition of a value set whose format and semantics is specified outside of the core CTS specification. If a given CTS service recognizes the syntax and semantics of this definition,
				it may call the appropriate process to resolve it. If the definition is not recognized, a CTS service implementation must not process the containing value set definition and, instead, return an
				error."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ExternalValueSetDefinition')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 231, 1)
    _ElementMap = OpaqueData._ElementMap.copy()
    _AttributeMap = OpaqueData._AttributeMap.copy()
    # Base type is OpaqueData
    
    # Element value_ ({http://www.omg.org/spec/CTS2/1.1/Core}value) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element format ({http://www.omg.org/spec/CTS2/1.1/Core}format) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element language ({http://www.omg.org/spec/CTS2/1.1/Core}language) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element schema ({http://www.omg.org/spec/CTS2/1.1/Core}schema) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ExternalValueSetDefinition', ExternalValueSetDefinition)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ValueSetDefinitionMsg with content type ELEMENT_ONLY
class ValueSetDefinitionMsg_ (Message):
    """A  read from a service instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinitionMsg')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 286, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}valueSetDefinition uses Python identifier valueSetDefinition
    __valueSetDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'valueSetDefinition'), 'valueSetDefinition', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionMsg__httpwww_omg_orgspecCTS21_1ValueSetDefinitionvalueSetDefinition', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 294, 5), )

    
    valueSetDefinition = property(__valueSetDefinition.value, __valueSetDefinition.set, None, None)

    _ElementMap.update({
        __valueSetDefinition.name() : __valueSetDefinition
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ValueSetDefinitionMsg', ValueSetDefinitionMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ResolvedValueSetMsg with content type ELEMENT_ONLY
class ResolvedValueSetMsg_ (Message):
    """A  read from a service instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ResolvedValueSetMsg')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 492, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}resolvedValueSet uses Python identifier resolvedValueSet
    __resolvedValueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolvedValueSet'), 'resolvedValueSet', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSetMsg__httpwww_omg_orgspecCTS21_1ValueSetDefinitionresolvedValueSet', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 500, 5), )

    
    resolvedValueSet = property(__resolvedValueSet.value, __resolvedValueSet.set, None, None)

    _ElementMap.update({
        __resolvedValueSet.name() : __resolvedValueSet
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ResolvedValueSetMsg', ResolvedValueSetMsg_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}Changeable with content type ELEMENT_ONLY
class Changeable (pyxb.binding.basis.complexTypeDefinition):
    """An element that can evolve over time. All  elements must have identity."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Changeable')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 235, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'status'), 'status', '__httpwww_omg_orgspecCTS21_1Core_Changeable_httpwww_omg_orgspecCTS21_1Corestatus', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3), )

    
    status = property(__status.value, __status.set, None, u'the state of this model element in an externally defined workflow')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}changeDescription uses Python identifier changeDescription
    __changeDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription'), 'changeDescription', '__httpwww_omg_orgspecCTS21_1Core_Changeable_httpwww_omg_orgspecCTS21_1CorechangeDescription', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3), )

    
    changeDescription = property(__changeDescription.value, __changeDescription.set, None, u'Detailed information about the last change that resulted in this changeable element being in the state that it is now. changeDescription is only present in services that support the HISTORY profile and then only when specifically requested.')

    
    # Attribute entryState uses Python identifier entryState
    __entryState = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'entryState'), 'entryState', '__httpwww_omg_orgspecCTS21_1Core_Changeable_entryState', EntryState, unicode_default=u'ACTIVE')
    __entryState._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 227, 2)
    __entryState._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 227, 2)
    
    entryState = property(__entryState.value, __entryState.set, None, u'an indicator that states whether the  element is , and subject to searching and browsing access or , meaning that it is only accessible if its identity is\n\t\t\t\t\talready known or if the service calls specifically state that they want to see inactive service elements')

    _ElementMap.update({
        __status.name() : __status,
        __changeDescription.name() : __changeDescription
    })
    _AttributeMap.update({
        __entryState.name() : __entryState
    })
_Namespace_core.addCategoryObject('typeBinding', u'Changeable', Changeable)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}Finalizable with content type EMPTY
class Finalizable (pyxb.binding.basis.complexTypeDefinition):
    """The  mixin determines whether a resource version or a change set is still undergoing change () or has reached its final state (). """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Finalizable')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 445, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'state'), 'state', '__httpwww_omg_orgspecCTS21_1Core_Finalizable_state', FinalizableState, unicode_default=u'FINAL')
    __state._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 450, 2)
    __state._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 450, 2)
    
    state = property(__state.value, __state.set, None, u'the state of the inheriting resource')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __state.name() : __state
    })
_Namespace_core.addCategoryObject('typeBinding', u'Finalizable', Finalizable)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}AnonymousEntityReference with content type ELEMENT_ONLY
class AnonymousEntityReference (EntityReference):
    """A reference to an entity whose name and description is local to the containing code system and service. Information about anonymous entities cannot be shared between services or across code
				systems"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'AnonymousEntityReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 735, 1)
    _ElementMap = EntityReference._ElementMap.copy()
    _AttributeMap = EntityReference._AttributeMap.copy()
    # Base type is EntityReference
    
    # Element name ({http://www.omg.org/spec/CTS2/1.1/Core}name) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}EntityReference
    
    # Element knownEntityDescription ({http://www.omg.org/spec/CTS2/1.1/Core}knownEntityDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}EntityReference
    
    # Attribute about is restricted from parent
    
    # Attribute about uses Python identifier about
    __about = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'about'), 'about', '__httpwww_omg_orgspecCTS21_1Core_EntityReference_about', LocalURI, required=True)
    __about._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 755, 4)
    __about._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 755, 4)
    
    about = property(__about.value, __about.set, None, u'the local URI that identifies this entity within the context of the particular service')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __about.name() : __about
    })
_Namespace_core.addCategoryObject('typeBinding', u'AnonymousEntityReference', AnonymousEntityReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}SortCriterion with content type ELEMENT_ONLY
class SortCriterion (pyxb.binding.basis.complexTypeDefinition):
    """The particular attribute, property or special element to be sorted along with the sort direction"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'SortCriterion')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1325, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}sortElement uses Python identifier sortElement
    __sortElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'sortElement'), 'sortElement', '__httpwww_omg_orgspecCTS21_1Core_SortCriterion_httpwww_omg_orgspecCTS21_1CoresortElement', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1330, 3), )

    
    sortElement = property(__sortElement.value, __sortElement.set, None, u'the type and name of the attribute, property or special element to be sorted')

    
    # Attribute sortDirection uses Python identifier sortDirection
    __sortDirection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'sortDirection'), 'sortDirection', '__httpwww_omg_orgspecCTS21_1Core_SortCriterion_sortDirection', SortDirection, unicode_default=u'ASCENDING')
    __sortDirection._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1337, 2)
    __sortDirection._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1337, 2)
    
    sortDirection = property(__sortDirection.value, __sortDirection.set, None, u'the sort order')

    
    # Attribute entryOrder uses Python identifier entryOrder
    __entryOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'entryOrder'), 'entryOrder', '__httpwww_omg_orgspecCTS21_1Core_SortCriterion_entryOrder', pyxb.binding.datatypes.positiveInteger, required=True)
    __entryOrder._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2106, 2)
    __entryOrder._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2106, 2)
    
    entryOrder = property(__entryOrder.value, __entryOrder.set, None, None)

    _ElementMap.update({
        __sortElement.name() : __sortElement
    })
    _AttributeMap.update({
        __sortDirection.name() : __sortDirection,
        __entryOrder.name() : __entryOrder
    })
_Namespace_core.addCategoryObject('typeBinding', u'SortCriterion', SortCriterion)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase with content type ELEMENT_ONLY
class EntityDescriptionBase (pyxb.binding.basis.complexTypeDefinition):
    """The attributes common to both named and anonymous entity descriptions. is an abstract class and cannot be directly instantiated."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityDescriptionBase')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 34, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}entityID uses Python identifier entityID
    __entityID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID'), 'entityID', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1EntityentityID', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3), )

    
    entityID = property(__entityID.value, __entityID.set, None, u'the local namespace name and entity name that, together, uniquely name this referenced within the context of a CTS service instance. As an example, a service instance may choose to designate\n\t\t\t\t\t\tthe entity referenced by the  URI of http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#CabernetSauvignon with the  "wine" and the  "CabernetSauvignon".The \n\t\t\t\t\t\tportion of ScopedEntityName must uniquely name the particular entity within the context of the code system version. ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}alternateEntityID uses Python identifier alternateEntityID
    __alternateEntityID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID'), 'alternateEntityID', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1EntityalternateEntityID', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3), )

    
    alternateEntityID = property(__alternateEntityID.value, __alternateEntityID.set, None, u"alternative unique identifiers that reference the  entity in the context of describing code system version. The  names the context from which the name (or code) is derived.\n\t\t\t\t\t\tNote that it is possible for the  and/or one more \n\t\t\t\t\t\t to be represented in the  attribute as well. This would occur when the  serves a dual role of unique identifier and human readable label. An example of\n\t\t\t\t\t\t\t would be the SNOMED-CT fully specified name, which serves as a unique identifier in human readable form. This might or might not also be considered a designation depending on the context\n\t\t\t\t\t\tand use case. Similarly, the SNOMED-CT Clinical Terms V3 Identifier (CTV3) and SNOMED-3 identifiers would appear here as well, as would the HL7's case sensitive and case insensitive unit of measure\n\t\t\t\t\t\tidentifiers.")

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}describingCodeSystemVersion uses Python identifier describingCodeSystemVersion
    __describingCodeSystemVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion'), 'describingCodeSystemVersion', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1EntitydescribingCodeSystemVersion', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3), )

    
    describingCodeSystemVersion = property(__describingCodeSystemVersion.value, __describingCodeSystemVersion.set, None, u'a reference to the version of an ontology or code system that makes the set of assertions contained in this description. Note that this references the "asserting", not the "containing" code system\n\t\t\t\t\t\tversion. As an example, the Wine Ontology imports the Food Ontology, which, in turn contains descriptions of PotableLiquid. A service that represented a (version of) the Wine Ontology would contain an entity\n\t\t\t\t\t\tdescription  "http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#PotableLiquid" (namespaceName: food, name: PotableLiquid). The describingCodeSystemVersion, however, would be\n\t\t\t\t\t\t"http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#" even though this entity was described in the food ontology. Note also that it both the food and wine ontology were represented in a service, the service would\n\t\t\t\t\t\tcontain two entity descriptions - one from the food ontology perspective and one from the wine ontology perspective.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}designation uses Python identifier designation
    __designation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation'), 'designation', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1Entitydesignation', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3), )

    
    designation = property(__designation.value, __designation.set, None, u'a  A designation provides the\n\t\t\t\t\t\tstrongest clues as to the meaning of a class, predicate or individual. While designations are not mandatory in an entity description, as all that may be available to a service is a code, service implementers are\n\t\t\t\t\t\tstrongly encouraged to provide at least one preferred or alternate designation to make the description visible to text search engines.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}definition uses Python identifier definition
    __definition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition'), 'definition', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1Entitydefinition', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3), )

    
    definition = property(__definition.value, __definition.set, None, u'an explanation of the intended meaning of a concept. An  may have multiple , each derived from a different source, represented in a different language or having\n\t\t\t\t\t\ta different purpose. Definitions apply only to classes and predicates, not individuals.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}example uses Python identifier example
    __example = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'example'), 'example', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1Entityexample', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3), )

    
    example = property(__example.value, __example.set, None, u'an example of an instance or instances of the referenced entity, typically written for human consumption. Examples apply only to classes and predicates, not individuals.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'note'), 'note', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1Entitynote', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3), )

    
    note = property(__note.value, __note.set, None, u'a note or comment about the history, status, use or other descriptions about the . Observe that , as used in the CTS specification, does include examples\n\t\t\t\t\t\tor definitions.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}property uses Python identifier property_
    __property = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'property'), 'property_', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1Entityproperty', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3), )

    
    property_ = property(__property.value, __property.set, None, u'additional "non-semantic" (annotation) assertions about the entity being described that do not fit into the , , or  or \n\t\t\t\t\t\tcategories.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}sourceStatements uses Python identifier sourceStatements
    __sourceStatements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements'), 'sourceStatements', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1EntitysourceStatements', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3), )

    
    sourceStatements = property(__sourceStatements.value, __sourceStatements.set, None, u'a  that resolves to the list of  that were used in the assembly of this description.  need only be present in service instances that support the\n\t\t\t\t\t\t\t profile, and serves as a bridge between atomic structure contained in the source resource and the CTS rendering.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}subjectOf uses Python identifier subjectOf
    __subjectOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf'), 'subjectOf', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1EntitysubjectOf', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3), )

    
    subjectOf = property(__subjectOf.value, __subjectOf.set, None, u'an  that resolves to a list of active associations ("semantic" assertions) in which the  entity appears as a subject and that are  the\n\t\t\t\t\t\t\t.  is only included in an when resolution would yield at least one result. This attribute will only be present in CTS service\n\t\t\t\t\t\timplementations that support the  profile.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}predicateOf uses Python identifier predicateOf
    __predicateOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf'), 'predicateOf', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1EntitypredicateOf', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3), )

    
    predicateOf = property(__predicateOf.value, __predicateOf.set, None, u'a  that resolves to the list of active associations ("semantic" assertions) in which the  entity appears as a predicate and that are  the\n\t\t\t\t\t\t\t. is only included in an when resolution would yield at least one result. This attribute will only be present in CTS\n\t\t\t\t\t\tservice implementations that support the  profile.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}targetOf uses Python identifier targetOf
    __targetOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf'), 'targetOf', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1EntitytargetOf', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3), )

    
    targetOf = property(__targetOf.value, __targetOf.set, None, u'a  that resolves to the list of active associations ("semantic" assertions) in which the  entity appears as either a direct target or the target of a contained BNode and\n\t\t\t\t\t\tthat are  the . is only included in an when resolution would yield at least one result. This attribute will only be present\n\t\t\t\t\t\tin CTS service implementations that support the  profile.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}parent uses Python identifier parent
    __parent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent'), 'parent', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1Entityparent', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3), )

    
    parent = property(__parent.value, __parent.set, None, u'the set of direct "parents" asserted by . It is the responsibility of the service to determine what predicate(s) represent "parent/child" relationships. Typically\n\t\t\t\t\t\t"parent" is associated with "rdfs:subClassOf" in the OWL/RDF world and skos:broader/skos:narrower in the SKOS environment. It is possible, however for some code systems to have other relationships as well. As an\n\t\t\t\t\t\texample, some of the Open Biomedical Ontologies (OBO) use a mixture of subClassOf and partOf relationships. ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}parents uses Python identifier parents
    __parents = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents'), 'parents', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1Entityparents', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3), )

    
    parents = property(__parents.value, __parents.set, None, u'a  that resolves to the list of direct "parents" asserted by . This returns the \n\t\t\t\t\t elements above.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}ancestors uses Python identifier ancestors
    __ancestors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors'), 'ancestors', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1Entityancestors', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3), )

    
    ancestors = property(__ancestors.value, __ancestors.set, None, u'a  that resolves to the transitive closure of the "parents" relationship(s). The primary purpose for this attribute is to provide a handle for subsumption queries. As an example, to\n\t\t\t\t\t\tdetermine whether Class X was a subclass of Class Y, one would query whether the to Y was a member of X.ancestors.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}children uses Python identifier children
    __children = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'children'), 'children', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1Entitychildren', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3), )

    
    children = property(__children.value, __children.set, None, u'a  that resolves to the list of direct "children" asserted by . As with , it is the responsibility of the service to determine what\n\t\t\t\t\t\tpredicate(s) represent "parent/child" relationships.  may also include entity references that appear in the target of bnodes if they are determined to be such by the service.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}descendants uses Python identifier descendants
    __descendants = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants'), 'descendants', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1Entitydescendants', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3), )

    
    descendants = property(__descendants.value, __descendants.set, None, u'a  that resolves to the transitive closure of the "children" relationship(s). The primary purpose for this attribute is to provide a handle for subsumption queries. As an example, a\n\t\t\t\t\t\tsecond way to determine whether Class X was a subclass of Class Y, one would query whether the to X was a member of Y..')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}entityType uses Python identifier entityType
    __entityType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType'), 'entityType', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1EntityentityType', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3), )

    
    entityType = property(__entityType.value, __entityType.set, None, u'the set of type(s) which the entityReference is an instance of. Because this is a terminology service,  must include one of owl:class, owl:individual, rdf:predicate or skos:concept,\n\t\t\t\t\t\talthough it may carry many other types as well.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}instances uses Python identifier instances
    __instances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances'), 'instances', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1Entityinstances', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3), )

    
    instances = property(__instances.value, __instances.set, None, u'a  that resolves to the list of entities that asserted to be instances of the type represented by  URI. This element is present only if resolution will return a non-empty\n\t\t\t\t\t\tset.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}equivalentEntity uses Python identifier equivalentEntity
    __equivalentEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity'), 'equivalentEntity', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_httpwww_omg_orgspecCTS21_1EntityequivalentEntity', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3), )

    
    equivalentEntity = property(__equivalentEntity.value, __equivalentEntity.set, None, u'an entity that has been determined to be equivalent to the  entity in the context of the assertions made by .')

    
    # Attribute about uses Python identifier about
    __about = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'about'), 'about', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_about', URI, required=True)
    __about._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 171, 2)
    __about._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 171, 2)
    
    about = property(__about.value, __about.set, None, u'the URI that represents the entity (class, predicate and/or individual) referenced by this \n\t\t\t\t\t is a  when  is  and  when  is ')

    
    # Attribute codeSystemRole uses Python identifier codeSystemRole
    __codeSystemRole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSystemRole'), 'codeSystemRole', '__httpwww_omg_orgspecCTS21_1Entity_EntityDescriptionBase_codeSystemRole', CodeSystemRole)
    __codeSystemRole._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 177, 2)
    __codeSystemRole._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 177, 2)
    
    codeSystemRole = property(__codeSystemRole.value, __codeSystemRole.set, None, u'If present, identifies the role that the code system plays in the description\n\t\t\t\t\tof the entity.  If absent, the role is unknown.')

    _ElementMap.update({
        __entityID.name() : __entityID,
        __alternateEntityID.name() : __alternateEntityID,
        __describingCodeSystemVersion.name() : __describingCodeSystemVersion,
        __designation.name() : __designation,
        __definition.name() : __definition,
        __example.name() : __example,
        __note.name() : __note,
        __property.name() : __property,
        __sourceStatements.name() : __sourceStatements,
        __subjectOf.name() : __subjectOf,
        __predicateOf.name() : __predicateOf,
        __targetOf.name() : __targetOf,
        __parent.name() : __parent,
        __parents.name() : __parents,
        __ancestors.name() : __ancestors,
        __children.name() : __children,
        __descendants.name() : __descendants,
        __entityType.name() : __entityType,
        __instances.name() : __instances,
        __equivalentEntity.name() : __equivalentEntity
    })
    _AttributeMap.update({
        __about.name() : __about,
        __codeSystemRole.name() : __codeSystemRole
    })
_Namespace_entity.addCategoryObject('typeBinding', u'EntityDescriptionBase', EntityDescriptionBase)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapSet with content type ELEMENT_ONLY
class MapSet (pyxb.binding.basis.complexTypeDefinition):
    """An set of map target rules that, when evaluated, result in zero or qualifying map targets. The setting of  determines whether at most one qualifying target is returned or whether many
				qualifying targets are returned.  are evaulated in the order that they appear in a If the evaluation results in one or more qualifying and is
					, the MapEntry is considered resolved. If, however, \\ is , all  in the are evaluated."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapSet')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 222, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}mapTarget uses Python identifier mapTarget
    __mapTarget = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapTarget'), 'mapTarget', '__httpwww_omg_orgspecCTS21_1MapVersion_MapSet_httpwww_omg_orgspecCTS21_1MapVersionmapTarget', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 229, 3), )

    
    mapTarget = property(__mapTarget.value, __mapTarget.set, None, None)

    
    # Attribute entryOrder uses Python identifier entryOrder
    __entryOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'entryOrder'), 'entryOrder', '__httpwww_omg_orgspecCTS21_1MapVersion_MapSet_entryOrder', pyxb.binding.datatypes.positiveInteger, required=True)
    __entryOrder._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2106, 2)
    __entryOrder._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2106, 2)
    
    entryOrder = property(__entryOrder.value, __entryOrder.set, None, None)

    
    # Attribute processingRule uses Python identifier processingRule
    __processingRule = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'processingRule'), 'processingRule', '__httpwww_omg_orgspecCTS21_1MapVersion_MapSet_processingRule', MapProcessingRule, required=True)
    __processingRule._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 231, 2)
    __processingRule._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 231, 2)
    
    processingRule = property(__processingRule.value, __processingRule.set, None, u'an indicator that states whether processing is to stop at the first matching  or whether all  in the set are to be evaluated')

    _ElementMap.update({
        __mapTarget.name() : __mapTarget
    })
    _AttributeMap.update({
        __entryOrder.name() : __entryOrder,
        __processingRule.name() : __processingRule
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapSet', MapSet)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ValueSetDefinitionEntry with content type ELEMENT_ONLY
class ValueSetDefinitionEntry_ (pyxb.binding.basis.complexTypeDefinition):
    """An element of a value set definition that, when resolved yields a set of entity references that are to be included in, excluded from or intersected with the set of elements that represent the full resolution of
				the definition.Note that only  entity references are included.  entity references may never be considered for inclusion or exclusion in the resolution of a value set definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinitionEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 38, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}associatedEntities uses Python identifier associatedEntities
    __associatedEntities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'associatedEntities'), 'associatedEntities', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionEntry__httpwww_omg_orgspecCTS21_1ValueSetDefinitionassociatedEntities', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 44, 3), )

    
    associatedEntities = property(__associatedEntities.value, __associatedEntities.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}completeCodeSystem uses Python identifier completeCodeSystem
    __completeCodeSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'completeCodeSystem'), 'completeCodeSystem', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionEntry__httpwww_omg_orgspecCTS21_1ValueSetDefinitioncompleteCodeSystem', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 45, 3), )

    
    completeCodeSystem = property(__completeCodeSystem.value, __completeCodeSystem.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}completeValueSet uses Python identifier completeValueSet
    __completeValueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'completeValueSet'), 'completeValueSet', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionEntry__httpwww_omg_orgspecCTS21_1ValueSetDefinitioncompleteValueSet', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 46, 3), )

    
    completeValueSet = property(__completeValueSet.value, __completeValueSet.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}externalValueSetDefinition uses Python identifier externalValueSetDefinition
    __externalValueSetDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'externalValueSetDefinition'), 'externalValueSetDefinition', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionEntry__httpwww_omg_orgspecCTS21_1ValueSetDefinitionexternalValueSetDefinition', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 47, 3), )

    
    externalValueSetDefinition = property(__externalValueSetDefinition.value, __externalValueSetDefinition.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}propertyQuery uses Python identifier propertyQuery
    __propertyQuery = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'propertyQuery'), 'propertyQuery', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionEntry__httpwww_omg_orgspecCTS21_1ValueSetDefinitionpropertyQuery', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 48, 3), )

    
    propertyQuery = property(__propertyQuery.value, __propertyQuery.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}entityList uses Python identifier entityList
    __entityList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entityList'), 'entityList', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionEntry__httpwww_omg_orgspecCTS21_1ValueSetDefinitionentityList', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 49, 3), )

    
    entityList = property(__entityList.value, __entityList.set, None, None)

    
    # Attribute entryOrder uses Python identifier entryOrder
    __entryOrder = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'entryOrder'), 'entryOrder', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionEntry__entryOrder', pyxb.binding.datatypes.positiveInteger, required=True)
    __entryOrder._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2106, 2)
    __entryOrder._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2106, 2)
    
    entryOrder = property(__entryOrder.value, __entryOrder.set, None, None)

    
    # Attribute operator uses Python identifier operator
    __operator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'operator'), 'operator', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionEntry__operator', SetOperator, required=True)
    __operator._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 51, 2)
    __operator._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 51, 2)
    
    operator = property(__operator.value, __operator.set, None, u'instructions for how the results of the entry evaluation will be applied to the set of entities in the base definition. Results can be added to the set (), intersected with members already in\n\t\t\t\t\tthe set () or be removed from the set ()')

    _ElementMap.update({
        __associatedEntities.name() : __associatedEntities,
        __completeCodeSystem.name() : __completeCodeSystem,
        __completeValueSet.name() : __completeValueSet,
        __externalValueSetDefinition.name() : __externalValueSetDefinition,
        __propertyQuery.name() : __propertyQuery,
        __entityList.name() : __entityList
    })
    _AttributeMap.update({
        __entryOrder.name() : __entryOrder,
        __operator.name() : __operator
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ValueSetDefinitionEntry', ValueSetDefinitionEntry_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}AssociatedEntitiesReference with content type ELEMENT_ONLY
class AssociatedEntitiesReference (pyxb.binding.basis.complexTypeDefinition):
    """The description of a set of entities that are associated with a referenced entity. This description names a reference entity and an association predicate, which identifies a set of entities that are related to
				the reference entity according to a given code system. The description can reference the direct targets of the association (children), the direct sources of the association (parents), the transitive closure of the
				association targets (descendants), the transitive closure of the association sources (ancestors) and can state whether all intermediate nodes are included in the closure or just the leaf nodes.Note that the terms "parent"
				and "children" are asserted in reference to the predicate itself. As an example, in the association '', the "parent" is  and the "child" is ."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'AssociatedEntitiesReference')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 84, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}referencedEntity uses Python identifier referencedEntity
    __referencedEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'referencedEntity'), 'referencedEntity', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_AssociatedEntitiesReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitionreferencedEntity', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 92, 3), )

    
    referencedEntity = property(__referencedEntity.value, __referencedEntity.set, None, u'the entity reference that is the root of the association description.  is not considered to be part of the resolution of . If it is to be\n\t\t\t\t\t\tincluded in the final set, it must be explicitly named in a second  construct.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}codeSystem uses Python identifier codeSystem
    __codeSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystem'), 'codeSystem', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_AssociatedEntitiesReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitioncodeSystem', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 98, 3), )

    
    codeSystem = property(__codeSystem.value, __codeSystem.set, None, u'the code system that makes the association assertions')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}codeSystemVersion uses Python identifier codeSystemVersion
    __codeSystemVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystemVersion'), 'codeSystemVersion', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_AssociatedEntitiesReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitioncodeSystemVersion', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 103, 3), )

    
    codeSystemVersion = property(__codeSystemVersion.value, __codeSystemVersion.set, None, u'the version of the code system that makes the association assertions. If present, \\\\ must be a version of . If this attribute is present, the referenced version\n\t\t\t\t\t\tof the code system will always be used to resolve the associations. If absent, the specific version of the code system to be used in resolution is determined in the resolve value set definition call\n\t\t\t\t\t\titself.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}predicate uses Python identifier predicate
    __predicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'predicate'), 'predicate', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_AssociatedEntitiesReference_httpwww_omg_orgspecCTS21_1ValueSetDefinitionpredicate', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 111, 3), )

    
    predicate = property(__predicate.value, __predicate.set, None, u'the association predicate to be used in resolving the definition entry.')

    
    # Attribute direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'direction'), 'direction', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_AssociatedEntitiesReference_direction', AssociationDirection, required=True)
    __direction._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 117, 2)
    __direction._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 117, 2)
    
    direction = property(__direction.value, __direction.set, None, u'an indicator that determines whether the  serves in the source () or target () role.')

    
    # Attribute leafOnly uses Python identifier leafOnly
    __leafOnly = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'leafOnly'), 'leafOnly', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_AssociatedEntitiesReference_leafOnly', LeafOrAll, unicode_default=u'ALL_INTERMEDIATE_NODES')
    __leafOnly._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 123, 2)
    __leafOnly._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 123, 2)
    
    leafOnly = property(__leafOnly.value, __leafOnly.set, None, u'an indicator that determines whether all nodes in the transitive closure are to be included in the resulting set or only the nodes that terminate the closure. This indicator is ignored if\n\t\t\t\t\t\t is not . Note that nodes that participate in cycles are not included if  is set to .')

    
    # Attribute transitivity uses Python identifier transitivity
    __transitivity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'transitivity'), 'transitivity', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_AssociatedEntitiesReference_transitivity', TransitiveClosure, unicode_default=u'DIRECTLY_ASSOCIATED')
    __transitivity._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 130, 2)
    __transitivity._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 130, 2)
    
    transitivity = property(__transitivity.value, __transitivity.set, None, u'an indicator that determines whether only entity references that participate in a direct association with the  are considered to be a part of the definition or whether all entity\n\t\t\t\t\treferences that appear on the transitive closure of entity reference are to be included. Note that  further qualifies this result.')

    _ElementMap.update({
        __referencedEntity.name() : __referencedEntity,
        __codeSystem.name() : __codeSystem,
        __codeSystemVersion.name() : __codeSystemVersion,
        __predicate.name() : __predicate
    })
    _AttributeMap.update({
        __direction.name() : __direction,
        __leafOnly.name() : __leafOnly,
        __transitivity.name() : __transitivity
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'AssociatedEntitiesReference', AssociatedEntitiesReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ResolvedValueSetSummary with content type ELEMENT_ONLY
class ResolvedValueSetSummary_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ResolvedValueSetSummary with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ResolvedValueSetSummary')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 452, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}resolvedHeader uses Python identifier resolvedHeader
    __resolvedHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolvedHeader'), 'resolvedHeader', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSetSummary__httpwww_omg_orgspecCTS21_1ValueSetDefinitionresolvedHeader', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 454, 3), )

    
    resolvedHeader = property(__resolvedHeader.value, __resolvedHeader.set, None, None)

    
    # Attribute resolvedValueSetURI uses Python identifier resolvedValueSetURI
    __resolvedValueSetURI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resolvedValueSetURI'), 'resolvedValueSetURI', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSetSummary__resolvedValueSetURI', LocalURI, required=True)
    __resolvedValueSetURI._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 456, 2)
    __resolvedValueSetURI._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 456, 2)
    
    resolvedValueSetURI = property(__resolvedValueSetURI.value, __resolvedValueSetURI.set, None, None)

    _ElementMap.update({
        __resolvedHeader.name() : __resolvedHeader
    })
    _AttributeMap.update({
        __resolvedValueSetURI.name() : __resolvedValueSetURI
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ResolvedValueSetSummary', ResolvedValueSetSummary_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Association}Association with content type ELEMENT_ONLY
class Association_ (Changeable):
    """A "semantic" assertion about a relationship between a  entity and a target entity, literal or compound expression as represented by an unnamed blank node ("bnode"). """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'Association')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 14, 1)
    _ElementMap = Changeable._ElementMap.copy()
    _AttributeMap = Changeable._AttributeMap.copy()
    # Base type is Changeable
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}subject uses Python identifier subject
    __subject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'subject'), 'subject', '__httpwww_omg_orgspecCTS21_1Association_Association__httpwww_omg_orgspecCTS21_1Associationsubject', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 21, 5), )

    
    subject = property(__subject.value, __subject.set, None, u'the subject of the association statement. must reference an - i.e. a class, predicate and/or individual.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}predicate uses Python identifier predicate
    __predicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'predicate'), 'predicate', '__httpwww_omg_orgspecCTS21_1Association_Association__httpwww_omg_orgspecCTS21_1Associationpredicate', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 26, 5), )

    
    predicate = property(__predicate.value, __predicate.set, None, u'the predicate of the association statement.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}target uses Python identifier target
    __target = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'target'), 'target', '__httpwww_omg_orgspecCTS21_1Association_Association__httpwww_omg_orgspecCTS21_1Associationtarget', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 31, 5), )

    
    target = property(__target.value, __target.set, None, u'the target (object) of the association statement. A target may be a reference to an entity, an external resource URI, a literal or a compound expression (bnode) or a set of\n\t\t\t\t\t\t\t\ttargets.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}associationQualifier uses Python identifier associationQualifier
    __associationQualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'associationQualifier'), 'associationQualifier', '__httpwww_omg_orgspecCTS21_1Association_Association__httpwww_omg_orgspecCTS21_1AssociationassociationQualifier', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 37, 5), )

    
    associationQualifier = property(__associationQualifier.value, __associationQualifier.set, None, u'additional tag/value attributes that qualify the association statement itself as opposed to the statement subject.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}assertedBy uses Python identifier assertedBy
    __assertedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedBy'), 'assertedBy', '__httpwww_omg_orgspecCTS21_1Association_Association__httpwww_omg_orgspecCTS21_1AssociationassertedBy', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 42, 5), )

    
    assertedBy = property(__assertedBy.value, __assertedBy.set, None, u'the code system version that is making this assertion. A code system version makes an assertion when (a) it contains the assertion, (b) it imports a code system version that contains the\n\t\t\t\t\t\t\t\tassertion or (c) the assertion is inferred from other assertions.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}assertedIn uses Python identifier assertedIn
    __assertedIn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedIn'), 'assertedIn', '__httpwww_omg_orgspecCTS21_1Association_Association__httpwww_omg_orgspecCTS21_1AssociationassertedIn', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 48, 5), )

    
    assertedIn = property(__assertedIn.value, __assertedIn.set, None, u'the code system version that actually contains this assertion. If absent, it is the same resource as .')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}derivationReasoningAlgorithm uses Python identifier derivationReasoningAlgorithm
    __derivationReasoningAlgorithm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'derivationReasoningAlgorithm'), 'derivationReasoningAlgorithm', '__httpwww_omg_orgspecCTS21_1Association_Association__httpwww_omg_orgspecCTS21_1AssociationderivationReasoningAlgorithm', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 53, 5), )

    
    derivationReasoningAlgorithm = property(__derivationReasoningAlgorithm.value, __derivationReasoningAlgorithm.set, None, u'a reasoning algorithm that was used to derive an association of \n\t\t\t\t\t\t\t\t. Note that more than one reasoning algorithm may be present for the same association.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}sourceStatements uses Python identifier sourceStatements
    __sourceStatements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'sourceStatements'), 'sourceStatements', '__httpwww_omg_orgspecCTS21_1Association_Association__httpwww_omg_orgspecCTS21_1AssociationsourceStatements', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 59, 5), )

    
    sourceStatements = property(__sourceStatements.value, __sourceStatements.set, None, u'detail about the provenance and history of the statement(s) from which this particular association is derived. This attribute will only be present in CTS service implementations that\n\t\t\t\t\t\t\t\tsupport the statements model.')

    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute associationID uses Python identifier associationID
    __associationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'associationID'), 'associationID', '__httpwww_omg_orgspecCTS21_1Association_Association__associationID', URI)
    __associationID._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 66, 4)
    __associationID._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 66, 4)
    
    associationID = property(__associationID.value, __associationID.set, None, u'the unique identifier of the association instance. While the update mechanism of the CTS specifications requires that all  elements have unique identifiers, the rules\n\t\t\t\t\t\t\tand mechanism for assigning unique identifiers to statements and associations are non-trivial. At the moment, the CTS specification remains silent when it comes to arriving at how this identifier is\n\t\t\t\t\t\t\tgenerated except to note that, if two service implementations do not generate the same unique identifier for the same assertion, then the  element in  becomes the only way to\n\t\t\t\t\t\t\tidentify which Association instance is being updated or deleted.')

    
    # Attribute derivation uses Python identifier derivation
    __derivation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'derivation'), 'derivation', '__httpwww_omg_orgspecCTS21_1Association_Association__derivation', AssociationDerivation)
    __derivation._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 74, 4)
    __derivation._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 74, 4)
    
    derivation = property(__derivation.value, __derivation.set, None, u'how this association was derived. takes precedence over , meaning that an assertion that is both asserted and derived is marked as asserted.  If absent\n\t\t\t\t\t\tthe derivation is unknown.')

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    _ElementMap.update({
        __subject.name() : __subject,
        __predicate.name() : __predicate,
        __target.name() : __target,
        __associationQualifier.name() : __associationQualifier,
        __assertedBy.name() : __assertedBy,
        __assertedIn.name() : __assertedIn,
        __derivationReasoningAlgorithm.name() : __derivationReasoningAlgorithm,
        __sourceStatements.name() : __sourceStatements
    })
    _AttributeMap.update({
        __associationID.name() : __associationID,
        __derivation.name() : __derivation
    })
_Namespace_association.addCategoryObject('typeBinding', u'Association', Association_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}ConceptDomainBinding with content type ELEMENT_ONLY
class ConceptDomainBinding_ (Changeable):
    """The binding of a and a  that supplies the set of permissible value meanings in a given context.  can also bind specific value set definitions
				and/or specific code system versions where desired. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'ConceptDomainBinding')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 14, 1)
    _ElementMap = Changeable._ElementMap.copy()
    _AttributeMap = Changeable._AttributeMap.copy()
    # Base type is Changeable
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}bindingURI uses Python identifier bindingURI
    __bindingURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingURI'), 'bindingURI', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBinding__httpwww_omg_orgspecCTS21_1ConceptDomainBindingbindingURI', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 22, 5), )

    
    bindingURI = property(__bindingURI.value, __bindingURI.set, None, u'The unique identifier of this particular binding instance.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}bindingFor uses Python identifier bindingFor
    __bindingFor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingFor'), 'bindingFor', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBinding__httpwww_omg_orgspecCTS21_1ConceptDomainBindingbindingFor', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 27, 5), )

    
    bindingFor = property(__bindingFor.value, __bindingFor.set, None, u'the  being bound to a value set.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}boundValueSet uses Python identifier boundValueSet
    __boundValueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'boundValueSet'), 'boundValueSet', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBinding__httpwww_omg_orgspecCTS21_1ConceptDomainBindingboundValueSet', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 32, 5), )

    
    boundValueSet = property(__boundValueSet.value, __boundValueSet.set, None, u'the bound value set')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}applicableContext uses Python identifier applicableContext
    __applicableContext = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'applicableContext'), 'applicableContext', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBinding__httpwww_omg_orgspecCTS21_1ConceptDomainBindingapplicableContext', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 37, 5), )

    
    applicableContext = property(__applicableContext.value, __applicableContext.set, None, u'a realm or context in which the particular binding applies. If not present, the binding applies in any context not stated in another binding')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}boundValueSetDefinition uses Python identifier boundValueSetDefinition
    __boundValueSetDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'boundValueSetDefinition'), 'boundValueSetDefinition', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBinding__httpwww_omg_orgspecCTS21_1ConceptDomainBindingboundValueSetDefinition', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 42, 5), )

    
    boundValueSetDefinition = property(__boundValueSetDefinition.value, __boundValueSetDefinition.set, None, u'the specific definition of the value set to be bound. If not specified, the definition that is used to determine the permissible values is specified when the concept domain is applied in the\n\t\t\t\t\t\t\t\tcontext.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}useCodeSystemVersion uses Python identifier useCodeSystemVersion
    __useCodeSystemVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'useCodeSystemVersion'), 'useCodeSystemVersion', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBinding__httpwww_omg_orgspecCTS21_1ConceptDomainBindinguseCodeSystemVersion', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 48, 5), )

    
    useCodeSystemVersion = property(__useCodeSystemVersion.value, __useCodeSystemVersion.set, None, u'the specific version(s) of the code systems to be used in the resolution of the value set definition. Note that it is also possible for value set definitions themselves to state which version of\n\t\t\t\t\t\t\t\ta code system is to be used. When this is the case, the code system version(s) specified in the  do not override those stated in the value set definition - the value set definition\n\t\t\t\t\t\t\t\tversion information takes precedence.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}bindingQualifier uses Python identifier bindingQualifier
    __bindingQualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingQualifier'), 'bindingQualifier', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBinding__httpwww_omg_orgspecCTS21_1ConceptDomainBindingbindingQualifier', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 55, 5), )

    
    bindingQualifier = property(__bindingQualifier.value, __bindingQualifier.set, None, u'additional information that qualifies the intent or purpose of the binding. In the HL7 case, this is intended to indicate "whether the binding is \'overall\', \'minimum\' or \'maximum\'." The actual\n\t\t\t\t\t\t\t\tinterpretation of the qualifier is outside of the scope of the CTS specification but, if present,  contributes to the identity of the specific binding.')

    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    _ElementMap.update({
        __bindingURI.name() : __bindingURI,
        __bindingFor.name() : __bindingFor,
        __boundValueSet.name() : __boundValueSet,
        __applicableContext.name() : __applicableContext,
        __boundValueSetDefinition.name() : __boundValueSetDefinition,
        __useCodeSystemVersion.name() : __useCodeSystemVersion,
        __bindingQualifier.name() : __bindingQualifier
    })
    _AttributeMap.update({
        
    })
_Namespace_conceptdomainbinding.addCategoryObject('typeBinding', u'ConceptDomainBinding', ConceptDomainBinding_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ChangeDescription with content type ELEMENT_ONLY
class ChangeDescription (pyxb.binding.basis.complexTypeDefinition):
    """The detailed description of what happened to a changeable resource.  will only be present in service profiles that support either the  or profiles.
			"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ChangeDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 263, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}prevImage uses Python identifier prevImage
    __prevImage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'prevImage'), 'prevImage', '__httpwww_omg_orgspecCTS21_1Core_ChangeDescription_httpwww_omg_orgspecCTS21_1CoreprevImage', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 269, 3), )

    
    prevImage = property(__prevImage.value, __prevImage.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}changeNotes uses Python identifier changeNotes
    __changeNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'changeNotes'), 'changeNotes', '__httpwww_omg_orgspecCTS21_1Core_ChangeDescription_httpwww_omg_orgspecCTS21_1CorechangeNotes', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 270, 3), )

    
    changeNotes = property(__changeNotes.value, __changeNotes.set, None, u'a note, set of instructions and other information about the nature and purpose of this change')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}changeSource uses Python identifier changeSource
    __changeSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'changeSource'), 'changeSource', '__httpwww_omg_orgspecCTS21_1Core_ChangeDescription_httpwww_omg_orgspecCTS21_1CorechangeSource', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 275, 3), )

    
    changeSource = property(__changeSource.value, __changeSource.set, None, u'the person or organization responsible for this change')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}clonedResource uses Python identifier clonedResource
    __clonedResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'clonedResource'), 'clonedResource', '__httpwww_omg_orgspecCTS21_1Core_ChangeDescription_httpwww_omg_orgspecCTS21_1CoreclonedResource', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 280, 3), )

    
    clonedResource = property(__clonedResource.value, __clonedResource.set, None, u'the local identifier and URI of the resource that was cloned in this change if this is a  operation.')

    
    # Attribute changeType uses Python identifier changeType
    __changeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'changeType'), 'changeType', '__httpwww_omg_orgspecCTS21_1Core_ChangeDescription_changeType', ChangeType, required=True)
    __changeType._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 286, 2)
    __changeType._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 286, 2)
    
    changeType = property(__changeType.value, __changeType.set, None, u'the type of change that occurred to cause the associated  element to reach the state it is in')

    
    # Attribute committed uses Python identifier committed
    __committed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'committed'), 'committed', '__httpwww_omg_orgspecCTS21_1Core_ChangeDescription_committed', ChangeCommitted, unicode_default=u'COMMITTED')
    __committed._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 291, 2)
    __committed._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 291, 2)
    
    committed = property(__committed.value, __committed.set, None, u'an indicator that states whether the change has been committed and is available to service consumers or is still pending while further authoring may occur.  must always be \n\t\t\t\t\tin services that do not support the  profile')

    
    # Attribute containingChangeSet uses Python identifier containingChangeSet
    __containingChangeSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'containingChangeSet'), 'containingChangeSet', '__httpwww_omg_orgspecCTS21_1Core_ChangeDescription_containingChangeSet', ChangeSetURI, required=True)
    __containingChangeSet._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 297, 2)
    __containingChangeSet._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 297, 2)
    
    containingChangeSet = property(__containingChangeSet.value, __containingChangeSet.set, None, u'the URI of the  that contains the described change')

    
    # Attribute prevChangeSet uses Python identifier prevChangeSet
    __prevChangeSet = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prevChangeSet'), 'prevChangeSet', '__httpwww_omg_orgspecCTS21_1Core_ChangeDescription_prevChangeSet', ChangeSetURI)
    __prevChangeSet._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 302, 2)
    __prevChangeSet._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 302, 2)
    
    prevChangeSet = property(__prevChangeSet.value, __prevChangeSet.set, None, u'the URI of the  that contains the change that immediately preceded this change, if any')

    
    # Attribute changeDate uses Python identifier changeDate
    __changeDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'changeDate'), 'changeDate', '__httpwww_omg_orgspecCTS21_1Core_ChangeDescription_changeDate', DateAndTime, required=True)
    __changeDate._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 307, 2)
    __changeDate._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 307, 2)
    
    changeDate = property(__changeDate.value, __changeDate.set, None, u'the date and time when this change was applied to the .  is only present on committed changes.')

    
    # Attribute effectiveDate uses Python identifier effectiveDate
    __effectiveDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'effectiveDate'), 'effectiveDate', '__httpwww_omg_orgspecCTS21_1Core_ChangeDescription_effectiveDate', DateAndTime)
    __effectiveDate._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 312, 2)
    __effectiveDate._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 312, 2)
    
    effectiveDate = property(__effectiveDate.value, __effectiveDate.set, None, u'the date and time that this change is (or was) scheduled to take effect in the . Typically this attribute is used to schedule a component to become active on a given date.A\n\t\t\t\t\tchange having a future  will not be visible to service calls whose reference time is earlier to this time. This attribute may only be present in committed changes. A compliant CTS service\n\t\t\t\t\timplementation MUST not allow a change to be written with a  that is earlier than . The purpose of this requirement is to prevent the "rewriting of history" - making a change\n\t\t\t\t\teffective in the past.')

    _ElementMap.update({
        __prevImage.name() : __prevImage,
        __changeNotes.name() : __changeNotes,
        __changeSource.name() : __changeSource,
        __clonedResource.name() : __clonedResource
    })
    _AttributeMap.update({
        __changeType.name() : __changeType,
        __committed.name() : __committed,
        __containingChangeSet.name() : __containingChangeSet,
        __prevChangeSet.name() : __prevChangeSet,
        __changeDate.name() : __changeDate,
        __effectiveDate.name() : __effectiveDate
    })
_Namespace_core.addCategoryObject('typeBinding', u'ChangeDescription', ChangeDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ChangeSetBase with content type ELEMENT_ONLY
class ChangeSetBase (Finalizable):
    """A common base for various change set elements. This exists to allow ChangeSet to be represented as a choice in the "Updates" module"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ChangeSetBase')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 383, 1)
    _ElementMap = Finalizable._ElementMap.copy()
    _AttributeMap = Finalizable._AttributeMap.copy()
    # Base type is Finalizable
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}member uses Python identifier member
    __member = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'member'), 'member', '__httpwww_omg_orgspecCTS21_1Core_ChangeSetBase_httpwww_omg_orgspecCTS21_1Coremember', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 393, 5), )

    
    member = property(__member.value, __member.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'creator'), 'creator', '__httpwww_omg_orgspecCTS21_1Core_ChangeSetBase_httpwww_omg_orgspecCTS21_1Corecreator', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3), )

    
    creator = property(__creator.value, __creator.set, None, u'the person or organization who initially created the change set')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}changeInstructions uses Python identifier changeInstructions
    __changeInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'changeInstructions'), 'changeInstructions', '__httpwww_omg_orgspecCTS21_1Core_ChangeSetBase_httpwww_omg_orgspecCTS21_1CorechangeInstructions', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3), )

    
    changeInstructions = property(__changeInstructions.value, __changeInstructions.set, None, u'documentation and instructions about the purpose and application of the change set')

    
    # Attribute changeSetURI uses Python identifier changeSetURI
    __changeSetURI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'changeSetURI'), 'changeSetURI', '__httpwww_omg_orgspecCTS21_1Core_ChangeSetBase_changeSetURI', ChangeSetURI, required=True)
    __changeSetURI._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 416, 2)
    __changeSetURI._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 416, 2)
    
    changeSetURI = property(__changeSetURI.value, __changeSetURI.set, None, u'a globally unique identifier that signifies this particular change set')

    
    # Attribute creationDate uses Python identifier creationDate
    __creationDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'creationDate'), 'creationDate', '__httpwww_omg_orgspecCTS21_1Core_ChangeSetBase_creationDate', DateAndTime, required=True)
    __creationDate._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 421, 2)
    __creationDate._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 421, 2)
    
    creationDate = property(__creationDate.value, __creationDate.set, None, u'the date and time that the change set was initially created')

    
    # Attribute officialEffectiveDate uses Python identifier officialEffectiveDate
    __officialEffectiveDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'officialEffectiveDate'), 'officialEffectiveDate', '__httpwww_omg_orgspecCTS21_1Core_ChangeSetBase_officialEffectiveDate', DateAndTime)
    __officialEffectiveDate._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 426, 2)
    __officialEffectiveDate._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 426, 2)
    
    officialEffectiveDate = property(__officialEffectiveDate.value, __officialEffectiveDate.set, None, u'the date and time that this set of changes became (or should become) effective . This parameter enables history queries from both the perspective of the service\n\t\t\t\t\t("What did the service return on July 1") and the perspective of the resource author ("What would the state of the terminology have been on July 1 had it been loaded prior to that date and not been locally modified?").\n\t\t\t\t')

    
    # Attribute closeDate uses Python identifier closeDate
    __closeDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'closeDate'), 'closeDate', '__httpwww_omg_orgspecCTS21_1Core_ChangeSetBase_closeDate', DateAndTime)
    __closeDate._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 433, 2)
    __closeDate._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 433, 2)
    
    closeDate = property(__closeDate.value, __closeDate.set, None, u'the date and time that this change set was finalized ( = ). Once finalized, a change set cannot be further modified.')

    
    # Attribute entryCount uses Python identifier entryCount
    __entryCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'entryCount'), 'entryCount', '__httpwww_omg_orgspecCTS21_1Core_ChangeSetBase_entryCount', NaturalNumber)
    __entryCount._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 438, 2)
    __entryCount._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 438, 2)
    
    entryCount = property(__entryCount.value, __entryCount.set, None, u'the number of  members in the set')

    
    # Attribute state inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Finalizable
    _ElementMap.update({
        __member.name() : __member,
        __creator.name() : __creator,
        __changeInstructions.name() : __changeInstructions
    })
    _AttributeMap.update({
        __changeSetURI.name() : __changeSetURI,
        __creationDate.name() : __creationDate,
        __officialEffectiveDate.name() : __officialEffectiveDate,
        __closeDate.name() : __closeDate,
        __entryCount.name() : __entryCount
    })
_Namespace_core.addCategoryObject('typeBinding', u'ChangeSetBase', ChangeSetBase)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}Directory with content type ELEMENT_ONLY
class Directory (Message):
    """Provides a directory or list of resources that match a specific filter and are ordered in a specified order. A directory is read-only and is not necessarily immutable.Note that the name of the link to
					 is called "entries" rather than "entry". This allows subclasses to use "entry" without type collisions in the Z."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Directory')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 485, 1)
    _ElementMap = Message._ElementMap.copy()
    _AttributeMap = Message._AttributeMap.copy()
    # Base type is Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter uses Python identifier directoryFilter
    __directoryFilter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter'), 'directoryFilter', '__httpwww_omg_orgspecCTS21_1Core_Directory_httpwww_omg_orgspecCTS21_1CoredirectoryFilter', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5), )

    
    directoryFilter = property(__directoryFilter.value, __directoryFilter.set, None, u'the filter(s) that were applied to generate this directory')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria uses Python identifier sortCriteria
    __sortCriteria = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria'), 'sortCriteria', '__httpwww_omg_orgspecCTS21_1Core_Directory_httpwww_omg_orgspecCTS21_1CoresortCriteria', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5), )

    
    sortCriteria = property(__sortCriteria.value, __sortCriteria.set, None, u'the sort criteria used in the directory. When this is left as optional, there is the possibility that some directories may not be ordered. Some PSMs may chose to make \n\t\t\t\t\t\t\t\tmandatory, meaning that all directory listings must reflect some sort order.')

    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute complete uses Python identifier complete
    __complete = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'complete'), 'complete', '__httpwww_omg_orgspecCTS21_1Core_Directory_complete', CompleteDirectory, required=True)
    __complete._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 508, 4)
    __complete._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 508, 4)
    
    complete = property(__complete.value, __complete.set, None, u'an indicator that states whether the complete directory listing is included in  or whether additional retrievals are needed to get the full listing.')

    
    # Attribute numEntries uses Python identifier numEntries
    __numEntries = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'numEntries'), 'numEntries', '__httpwww_omg_orgspecCTS21_1Core_Directory_numEntries', NaturalNumber, required=True)
    __numEntries._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 513, 4)
    __numEntries._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 513, 4)
    
    numEntries = property(__numEntries.value, __numEntries.set, None, u'the number of entries in this directory segment. Note that this is  the total number of entries in the complete directory listing - just the number of entries in this\n\t\t\t\t\t\t\tsegment.')

    
    # Attribute prev uses Python identifier prev
    __prev = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'prev'), 'prev', '__httpwww_omg_orgspecCTS21_1Core_Directory_prev', DirectoryURI)
    __prev._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 519, 4)
    __prev._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 519, 4)
    
    prev = property(__prev.value, __prev.set, None, u'a URI that, when de-referenced, produces the preceding set of entries in the directory.')

    
    # Attribute next uses Python identifier next
    __next = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'next'), 'next', '__httpwww_omg_orgspecCTS21_1Core_Directory_next', DirectoryURI)
    __next._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 524, 4)
    __next._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 524, 4)
    
    next = property(__next.value, __next.set, None, u'a URI that, when de-referenced, produces the next set of entries in the directory.')

    _ElementMap.update({
        __directoryFilter.name() : __directoryFilter,
        __sortCriteria.name() : __sortCriteria
    })
    _AttributeMap.update({
        __complete.name() : __complete,
        __numEntries.name() : __numEntries,
        __prev.name() : __prev,
        __next.name() : __next
    })
_Namespace_core.addCategoryObject('typeBinding', u'Directory', Directory)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry with content type ELEMENT_ONLY
class DirectoryEntry (pyxb.binding.basis.complexTypeDefinition):
    """an entry in a directory.  is a mixin that identifies the attributes that must or may be present in any element that can be represented as an entry in a ."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'DirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 556, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_omg_orgspecCTS21_1Core_DirectoryEntry_href', RenderingURI)
    __href._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    __href._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    
    href = property(__href.value, __href.set, None, u'a that resolves to the full resource described by the . This should be present if the service either (a) supports the  functional profile for the specified\n\t\t\t\t\t\tor (b) is aware of another service that does.')

    
    # Attribute resourceName uses Python identifier resourceName
    __resourceName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resourceName'), 'resourceName', '__httpwww_omg_orgspecCTS21_1Core_DirectoryEntry_resourceName', LocalIdentifier)
    __resourceName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    __resourceName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    
    resourceName = property(__resourceName.value, __resourceName.set, None, u'a local identifier that names a unique resource within the context of  and the service context. This attribute must be present if the corresponding element has a local name. Note, however, that\n\t\t\t\t\tsome elements (e.g. , , etc.) do not local names and are identified exclusively by their .')

    
    # Attribute matchStrength uses Python identifier matchStrength
    __matchStrength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'matchStrength'), 'matchStrength', '__httpwww_omg_orgspecCTS21_1Core_DirectoryEntry_matchStrength', MatchStrength)
    __matchStrength._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    __matchStrength._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    
    matchStrength = property(__matchStrength.value, __matchStrength.set, None, u'a relative measure of the "goodness of fit" of the directory entry within the context of the  in the containing ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __href.name() : __href,
        __resourceName.name() : __resourceName,
        __matchStrength.name() : __matchStrength
    })
_Namespace_core.addCategoryObject('typeBinding', u'DirectoryEntry', DirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}DescriptionInCodeSystem with content type ELEMENT_ONLY
class DescriptionInCodeSystem (pyxb.binding.basis.complexTypeDefinition):
    """A reference to specific version of a code system that contains assertions about a given entity, including the namespace and name by which the entity is referenced, an optional designation appropriate to the
				given usage context and an optional  that references the full  contained in the specific code system version."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'DescriptionInCodeSystem')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 693, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}describingCodeSystemVersion uses Python identifier describingCodeSystemVersion
    __describingCodeSystemVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'describingCodeSystemVersion'), 'describingCodeSystemVersion', '__httpwww_omg_orgspecCTS21_1Core_DescriptionInCodeSystem_httpwww_omg_orgspecCTS21_1CoredescribingCodeSystemVersion', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 699, 3), )

    
    describingCodeSystemVersion = property(__describingCodeSystemVersion.value, __describingCodeSystemVersion.set, None, u'a reference to the code system version that describes the entity')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}designation uses Python identifier designation
    __designation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'designation'), 'designation', '__httpwww_omg_orgspecCTS21_1Core_DescriptionInCodeSystem_httpwww_omg_orgspecCTS21_1Coredesignation', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 704, 3), )

    
    designation = property(__designation.value, __designation.set, None, u'a contextually appropriate designation for the entity derived from the \\\\ ')

    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_omg_orgspecCTS21_1Core_DescriptionInCodeSystem_href', RenderingURI)
    __href._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 710, 2)
    __href._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 710, 2)
    
    href = property(__href.value, __href.set, None, u'a  that, if followed, will provide a full CTS\n\t\t\t\t\t derived from the corresponding code system version')

    
    # Attribute codeSystemRole uses Python identifier codeSystemRole
    __codeSystemRole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSystemRole'), 'codeSystemRole', '__httpwww_omg_orgspecCTS21_1Core_DescriptionInCodeSystem_codeSystemRole', CodeSystemRole)
    __codeSystemRole._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 716, 2)
    __codeSystemRole._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 716, 2)
    
    codeSystemRole = property(__codeSystemRole.value, __codeSystemRole.set, None, u'If present, identifies the role that the code system plays in the description\n\t\t\t\tof the entity.  If absent, the role is unknown.')

    _ElementMap.update({
        __describingCodeSystemVersion.name() : __describingCodeSystemVersion,
        __designation.name() : __designation
    })
    _AttributeMap.update({
        __href.name() : __href,
        __codeSystemRole.name() : __codeSystemRole
    })
_Namespace_core.addCategoryObject('typeBinding', u'DescriptionInCodeSystem', DescriptionInCodeSystem)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}NamedEntityReference with content type ELEMENT_ONLY
class NamedEntityReference (EntityReference):
    """A reference to an entity that is identified through a globally unique URI."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'NamedEntityReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 765, 1)
    _ElementMap = EntityReference._ElementMap.copy()
    _AttributeMap = EntityReference._AttributeMap.copy()
    # Base type is EntityReference
    
    # Element name ({http://www.omg.org/spec/CTS2/1.1/Core}name) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}EntityReference
    
    # Element knownEntityDescription ({http://www.omg.org/spec/CTS2/1.1/Core}knownEntityDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}EntityReference
    
    # Attribute about is restricted from parent
    
    # Attribute about uses Python identifier about
    __about = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'about'), 'about', '__httpwww_omg_orgspecCTS21_1Core_EntityReference_about', ExternalURI, required=True)
    __about._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 784, 4)
    __about._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 784, 4)
    
    about = property(__about.value, __about.set, None, u'a URI that identifies a unique entity in a global context')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __about.name() : __about
    })
_Namespace_core.addCategoryObject('typeBinding', u'NamedEntityReference', NamedEntityReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}URIAndEntityName with content type ELEMENT_ONLY
class URIAndEntityName (pyxb.binding.basis.complexTypeDefinition):
    """The combination of a URI and an optional ScopedEntityName and an optional designation for a resource. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'URIAndEntityName')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 815, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}namespace uses Python identifier namespace
    __namespace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'namespace'), 'namespace', '__httpwww_omg_orgspecCTS21_1Core_URIAndEntityName_httpwww_omg_orgspecCTS21_1Corenamespace', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 820, 3), )

    
    namespace = property(__namespace.value, __namespace.set, None, u'an identifier that references a unique namespace URI within the context of the service')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'name'), 'name', '__httpwww_omg_orgspecCTS21_1Core_URIAndEntityName_httpwww_omg_orgspecCTS21_1Corename', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 825, 3), )

    
    name = property(__name.value, __name.set, None, u'the local entity name within the context of the namespace. What is chosen for the entity name is service specific')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}designation uses Python identifier designation
    __designation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'designation'), 'designation', '__httpwww_omg_orgspecCTS21_1Core_URIAndEntityName_httpwww_omg_orgspecCTS21_1Coredesignation', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 830, 3), )

    
    designation = property(__designation.value, __designation.set, None, u'a designation considered appropriate for the entity in the specific context of use')

    
    # Attribute uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uri'), 'uri', '__httpwww_omg_orgspecCTS21_1Core_URIAndEntityName_uri', ExternalURI, required=True)
    __uri._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 836, 2)
    __uri._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 836, 2)
    
    uri = property(__uri.value, __uri.set, None, u'a URI that uniquely references the target entity')

    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_omg_orgspecCTS21_1Core_URIAndEntityName_href', RenderingURI)
    __href._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 841, 2)
    __href._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 841, 2)
    
    href = property(__href.value, __href.set, None, u'a URI that resolves to the full  represented by this resource')

    _ElementMap.update({
        __namespace.name() : __namespace,
        __name.name() : __name,
        __designation.name() : __designation
    })
    _AttributeMap.update({
        __uri.name() : __uri,
        __href.name() : __href
    })
_Namespace_core.addCategoryObject('typeBinding', u'URIAndEntityName', URIAndEntityName)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference with content type SIMPLE
class NameAndMeaningReference (pyxb.binding.basis.complexTypeDefinition):
    """A  consists of a local identifier that references a unique meaning within the context of a given domain in a CTS service instance and a globally unique URI that
				identifies the intended meaning of the identifier. """
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'NameAndMeaningReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 920, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is String
    
    # Attribute uri uses Python identifier uri
    __uri = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'uri'), 'uri', '__httpwww_omg_orgspecCTS21_1Core_NameAndMeaningReference_uri', ExternalURI)
    __uri._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 927, 4)
    __uri._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 927, 4)
    
    uri = property(__uri.value, __uri.set, None, u'an  that references the meaning of a .  is optional only because the meaning of some of the elements have not been fully specified in some legacy\n\t\t\t\t\t\t\tterminology resources. If  is not supplied, the intent of a reference cannot be shared among services or between other resources.')

    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_omg_orgspecCTS21_1Core_NameAndMeaningReference_href', RenderingURI)
    __href._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 933, 4)
    __href._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 933, 4)
    
    href = property(__href.value, __href.set, None, u'a  that, when dereferenced, results in a CTS compliant representation of the meaning of the given . This must be present if the\n\t\t\t\t\t\t\timplementing CTS service is aware of a CTS resource that carries the definition. ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __uri.name() : __uri,
        __href.name() : __href
    })
_Namespace_core.addCategoryObject('typeBinding', u'NameAndMeaningReference', NameAndMeaningReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}Note with content type ELEMENT_ONLY
class Note (EntryDescription):
    """ corresponds to the target of . It contains an attributed literal that may include a language, format and, when appropriate,
				schema. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Note')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1473, 1)
    _ElementMap = EntryDescription._ElementMap.copy()
    _AttributeMap = EntryDescription._AttributeMap.copy()
    # Base type is EntryDescription
    
    # Element value_ ({http://www.omg.org/spec/CTS2/1.1/Core}value) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element format ({http://www.omg.org/spec/CTS2/1.1/Core}format) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element language ({http://www.omg.org/spec/CTS2/1.1/Core}language) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element schema ({http://www.omg.org/spec/CTS2/1.1/Core}schema) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Attribute assertedInCodeSystemVersion uses Python identifier assertedInCodeSystemVersion
    __assertedInCodeSystemVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'assertedInCodeSystemVersion'), 'assertedInCodeSystemVersion', '__httpwww_omg_orgspecCTS21_1Core_Note_assertedInCodeSystemVersion', CodeSystemVersionName)
    __assertedInCodeSystemVersion._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1480, 4)
    __assertedInCodeSystemVersion._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1480, 4)
    
    assertedInCodeSystemVersion = property(__assertedInCodeSystemVersion.value, __assertedInCodeSystemVersion.set, None, u'the code system version that contains the assertion(s) represented in the ')

    
    # Attribute correspondingStatement uses Python identifier correspondingStatement
    __correspondingStatement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'correspondingStatement'), 'correspondingStatement', '__httpwww_omg_orgspecCTS21_1Core_Note_correspondingStatement', RenderingURI)
    __correspondingStatement._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1485, 4)
    __correspondingStatement._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1485, 4)
    
    correspondingStatement = property(__correspondingStatement.value, __correspondingStatement.set, None, u'the URI of the  from which this note was derived. This will only be present in services that support the  profile.')

    
    # Attribute externalIdentifier uses Python identifier externalIdentifier
    __externalIdentifier = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'externalIdentifier'), 'externalIdentifier', '__httpwww_omg_orgspecCTS21_1Core_Note_externalIdentifier', String)
    __externalIdentifier._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1490, 4)
    __externalIdentifier._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1490, 4)
    
    externalIdentifier = property(__externalIdentifier.value, __externalIdentifier.set, None, u'an external identifier assigned to this note by an outside party')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __assertedInCodeSystemVersion.name() : __assertedInCodeSystemVersion,
        __correspondingStatement.name() : __correspondingStatement,
        __externalIdentifier.name() : __externalIdentifier
    })
_Namespace_core.addCategoryObject('typeBinding', u'Note', Note)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription with content type ELEMENT_ONLY
class ResourceDescription (Changeable):
    """represents the shared characteristics common to both abstract and resource version descriptions. is an abstract type and, as such, cannot be directly
				created. Resource descriptions are , meaning that they have identity and can be created, updated and deleted."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ResourceDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1629, 1)
    _ElementMap = Changeable._ElementMap.copy()
    _AttributeMap = Changeable._AttributeMap.copy()
    # Base type is Changeable
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}keyword uses Python identifier keyword
    __keyword = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword'), 'keyword', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_httpwww_omg_orgspecCTS21_1Corekeyword', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5), )

    
    keyword = property(__keyword.value, __keyword.set, None, u'additional identifiers that are used to index and locatethe resource')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}resourceType uses Python identifier resourceType
    __resourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType'), 'resourceType', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_httpwww_omg_orgspecCTS21_1CoreresourceType', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5), )

    
    resourceType = property(__resourceType.value, __resourceType.set, None, u'the class(es) that this resource instantiates')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis uses Python identifier resourceSynopsis
    __resourceSynopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis'), 'resourceSynopsis', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_httpwww_omg_orgspecCTS21_1CoreresourceSynopsis', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5), )

    
    resourceSynopsis = property(__resourceSynopsis.value, __resourceSynopsis.set, None, u'a textual summary of the resource - what it is, what it is for, etc.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}additionalDocumentation uses Python identifier additionalDocumentation
    __additionalDocumentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation'), 'additionalDocumentation', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_httpwww_omg_orgspecCTS21_1CoreadditionalDocumentation', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5), )

    
    additionalDocumentation = property(__additionalDocumentation.value, __additionalDocumentation.set, None, u'a reference to a document thatprovide additional information about the resource')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}sourceAndRole uses Python identifier sourceAndRole
    __sourceAndRole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole'), 'sourceAndRole', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_httpwww_omg_orgspecCTS21_1CoresourceAndRole', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5), )

    
    sourceAndRole = property(__sourceAndRole.value, __sourceAndRole.set, None, u'a reference to an individual, organization of bibliographic reference that participated in the creation, validation, review, dissemination of this resource and therole(s) they\n\t\t\t\t\t\t\t\tplayed')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}rights uses Python identifier rights
    __rights = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'rights'), 'rights', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_httpwww_omg_orgspecCTS21_1Corerights', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5), )

    
    rights = property(__rights.value, __rights.set, None, u'copyright and IP information. Note that  applies to the source resource, not the CTS rendering.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'note'), 'note', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_httpwww_omg_orgspecCTS21_1Corenote', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5), )

    
    note = property(__note.value, __note.set, None, u'an additional note or comment about the resource')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}property uses Python identifier property_
    __property = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'property'), 'property_', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_httpwww_omg_orgspecCTS21_1Coreproperty', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5), )

    
    property_ = property(__property.value, __property.set, None, u'additional information about the resource that doesnot fit into any of the attributes described above')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}alternateID uses Python identifier alternateID
    __alternateID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID'), 'alternateID', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_httpwww_omg_orgspecCTS21_1CorealternateID', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5), )

    
    alternateID = property(__alternateID.value, __alternateID.set, None, u'an alternative identifier that uniquely names this resource in other environments as contexts. As an example, if a resource had both an ISO Object Identifier and a DNS name, the DNS name might\n\t\t\t\t\t\t\t\tbe assigned as the  of the resource by one service while the ISO OID would be recorded as an using the "urn:oid" prefix. Note that s can be added or removed\n\t\t\t\t\t\t\t\tduring resource updates.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}sourceStatements uses Python identifier sourceStatements
    __sourceStatements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements'), 'sourceStatements', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_httpwww_omg_orgspecCTS21_1CoresourceStatements', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5), )

    
    sourceStatements = property(__sourceStatements.value, __sourceStatements.set, None, u'a  that references the set of statements that were used to construct the containing resource. This attribute must (may?) be present if and only if the service supports the\n\t\t\t\t\t\t\t\t\t profile ')

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute about uses Python identifier about
    __about = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'about'), 'about', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_about', ExternalURI, required=True)
    __about._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1693, 4)
    __about._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1693, 4)
    
    about = property(__about.value, __about.set, None, u'the (or a) definitive URI that represents the resource being described. Note that this is NOT the URI of the resource description in the CTS2 format, but of the resource itself. As an example, the\n\t\t\t\t\t\t\t\tURI for the Wine ontology would be "http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#". The  has, amongst others, the\n\t\t\t\t\t\t\t\tURI of http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#. HL7 uses ISO Object Identifiers (OIDs) to label resources so, from the HL7 perspective, the  URI of the NCI Thesaurus would\n\t\t\t\t\t\t\tbe "urn:oid:2.16.840.1.113883.3.26.1.1"')

    
    # Attribute formalName uses Python identifier formalName
    __formalName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'formalName'), 'formalName', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescription_formalName', String)
    __formalName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1701, 4)
    __formalName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1701, 4)
    
    formalName = property(__formalName.value, __formalName.set, None, u'the formal or officially assigned name of this resource, if any')

    _ElementMap.update({
        __keyword.name() : __keyword,
        __resourceType.name() : __resourceType,
        __resourceSynopsis.name() : __resourceSynopsis,
        __additionalDocumentation.name() : __additionalDocumentation,
        __sourceAndRole.name() : __sourceAndRole,
        __rights.name() : __rights,
        __note.name() : __note,
        __property.name() : __property,
        __alternateID.name() : __alternateID,
        __sourceStatements.name() : __sourceStatements
    })
    _AttributeMap.update({
        __about.name() : __about,
        __formalName.name() : __formalName
    })
_Namespace_core.addCategoryObject('typeBinding', u'ResourceDescription', ResourceDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}Property with content type ELEMENT_ONLY
class Property (pyxb.binding.basis.complexTypeDefinition):
    """A tag/value pair that does not have a corresponding model attribute.  represent any statement about a resource (e.g. CodeSystem, Entity, etc.) that does not have a corresponding attribute in the
					CTS model. As an example, the NCI Thesaurus uses a tag named  (C43677) to associate appropriate thesaurus entities with Bio Carta pathway references. This would be represented by a property,
				whose predicate is the URI for C436777 and the value is the actual id."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Property')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2000, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}predicate uses Python identifier predicate
    __predicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'predicate'), 'predicate', '__httpwww_omg_orgspecCTS21_1Core_Property_httpwww_omg_orgspecCTS21_1Corepredicate', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2007, 3), )

    
    predicate = property(__predicate.value, __predicate.set, None, u'the name and URI of the property predicate')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'value'), 'value_', '__httpwww_omg_orgspecCTS21_1Core_Property_httpwww_omg_orgspecCTS21_1Corevalue', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2012, 3), )

    
    value_ = property(__value.value, __value.set, None, u'the target(s) of the property. Note that this can only represent the literal format of the property. The details about the original property will be found in the if the\n\t\t\t\t\t\t\tCTS implementation supports the profile.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}propertyQualifier uses Python identifier propertyQualifier
    __propertyQualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'propertyQualifier'), 'propertyQualifier', '__httpwww_omg_orgspecCTS21_1Core_Property_httpwww_omg_orgspecCTS21_1CorepropertyQualifier', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2018, 3), )

    
    propertyQualifier = property(__propertyQualifier.value, __propertyQualifier.set, None, u'an assertion whose subject is the assertion in the property instead of the property subject')

    
    # Attribute correspondingStatement uses Python identifier correspondingStatement
    __correspondingStatement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'correspondingStatement'), 'correspondingStatement', '__httpwww_omg_orgspecCTS21_1Core_Property_correspondingStatement', RenderingURI)
    __correspondingStatement._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2024, 2)
    __correspondingStatement._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2024, 2)
    
    correspondingStatement = property(__correspondingStatement.value, __correspondingStatement.set, None, u'a link to the original statement from which this  is derived. Will only be present in CTS implementations that support the  profile.')

    _ElementMap.update({
        __predicate.name() : __predicate,
        __value.name() : __value,
        __propertyQualifier.name() : __propertyQualifier
    })
    _AttributeMap.update({
        __correspondingStatement.name() : __correspondingStatement
    })
_Namespace_core.addCategoryObject('typeBinding', u'Property', Property)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription with content type ELEMENT_ONLY
class NamedEntityDescription (EntityDescriptionBase):
    """An entity description that is referenced by a globally unique external URI"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'NamedEntityDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 185, 1)
    _ElementMap = EntityDescriptionBase._ElementMap.copy()
    _AttributeMap = EntityDescriptionBase._AttributeMap.copy()
    # Base type is EntityDescriptionBase
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'status'), 'status', '__httpwww_omg_orgspecCTS21_1Entity_NamedEntityDescription_httpwww_omg_orgspecCTS21_1Corestatus', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3), )

    
    status = property(__status.value, __status.set, None, u'the state of this model element in an externally defined workflow')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}changeDescription uses Python identifier changeDescription
    __changeDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription'), 'changeDescription', '__httpwww_omg_orgspecCTS21_1Entity_NamedEntityDescription_httpwww_omg_orgspecCTS21_1CorechangeDescription', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3), )

    
    changeDescription = property(__changeDescription.value, __changeDescription.set, None, u'Detailed information about the last change that resulted in this changeable element being in the state that it is now. changeDescription is only present in services that support the HISTORY profile and then only when specifically requested.')

    
    # Element entityID ({http://www.omg.org/spec/CTS2/1.1/Entity}entityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element alternateEntityID ({http://www.omg.org/spec/CTS2/1.1/Entity}alternateEntityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element describingCodeSystemVersion ({http://www.omg.org/spec/CTS2/1.1/Entity}describingCodeSystemVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element designation ({http://www.omg.org/spec/CTS2/1.1/Entity}designation) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element definition ({http://www.omg.org/spec/CTS2/1.1/Entity}definition) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element example ({http://www.omg.org/spec/CTS2/1.1/Entity}example) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Entity}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Entity}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Entity}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element subjectOf ({http://www.omg.org/spec/CTS2/1.1/Entity}subjectOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element predicateOf ({http://www.omg.org/spec/CTS2/1.1/Entity}predicateOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element targetOf ({http://www.omg.org/spec/CTS2/1.1/Entity}targetOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parent ({http://www.omg.org/spec/CTS2/1.1/Entity}parent) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parents ({http://www.omg.org/spec/CTS2/1.1/Entity}parents) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element ancestors ({http://www.omg.org/spec/CTS2/1.1/Entity}ancestors) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element children ({http://www.omg.org/spec/CTS2/1.1/Entity}children) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element descendants ({http://www.omg.org/spec/CTS2/1.1/Entity}descendants) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element entityType ({http://www.omg.org/spec/CTS2/1.1/Entity}entityType) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element instances ({http://www.omg.org/spec/CTS2/1.1/Entity}instances) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element equivalentEntity ({http://www.omg.org/spec/CTS2/1.1/Entity}equivalentEntity) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute entryState uses Python identifier entryState
    __entryState = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'entryState'), 'entryState', '__httpwww_omg_orgspecCTS21_1Entity_NamedEntityDescription_entryState', EntryState, unicode_default=u'ACTIVE')
    __entryState._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 227, 2)
    __entryState._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 227, 2)
    
    entryState = property(__entryState.value, __entryState.set, None, u'an indicator that states whether the  element is , and subject to searching and browsing access or , meaning that it is only accessible if its identity is\n\t\t\t\t\talready known or if the service calls specifically state that they want to see inactive service elements')

    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute codeSystemRole inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    _ElementMap.update({
        __status.name() : __status,
        __changeDescription.name() : __changeDescription
    })
    _AttributeMap.update({
        __entryState.name() : __entryState
    })
_Namespace_entity.addCategoryObject('typeBinding', u'NamedEntityDescription', NamedEntityDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}AnonymousEntityDescription with content type ELEMENT_ONLY
class AnonymousEntityDescription (EntityDescriptionBase):
    """An entity description that is local to a given code system version. Anonymous entity descriptions are not changeable and have no external URI"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'AnonymousEntityDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 197, 1)
    _ElementMap = EntityDescriptionBase._ElementMap.copy()
    _AttributeMap = EntityDescriptionBase._AttributeMap.copy()
    # Base type is EntityDescriptionBase
    
    # Element entityID ({http://www.omg.org/spec/CTS2/1.1/Entity}entityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element alternateEntityID ({http://www.omg.org/spec/CTS2/1.1/Entity}alternateEntityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element describingCodeSystemVersion ({http://www.omg.org/spec/CTS2/1.1/Entity}describingCodeSystemVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element designation ({http://www.omg.org/spec/CTS2/1.1/Entity}designation) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element definition ({http://www.omg.org/spec/CTS2/1.1/Entity}definition) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element example ({http://www.omg.org/spec/CTS2/1.1/Entity}example) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Entity}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Entity}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Entity}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element subjectOf ({http://www.omg.org/spec/CTS2/1.1/Entity}subjectOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element predicateOf ({http://www.omg.org/spec/CTS2/1.1/Entity}predicateOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element targetOf ({http://www.omg.org/spec/CTS2/1.1/Entity}targetOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parent ({http://www.omg.org/spec/CTS2/1.1/Entity}parent) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parents ({http://www.omg.org/spec/CTS2/1.1/Entity}parents) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element ancestors ({http://www.omg.org/spec/CTS2/1.1/Entity}ancestors) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element children ({http://www.omg.org/spec/CTS2/1.1/Entity}children) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element descendants ({http://www.omg.org/spec/CTS2/1.1/Entity}descendants) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element entityType ({http://www.omg.org/spec/CTS2/1.1/Entity}entityType) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element instances ({http://www.omg.org/spec/CTS2/1.1/Entity}instances) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element equivalentEntity ({http://www.omg.org/spec/CTS2/1.1/Entity}equivalentEntity) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute codeSystemRole inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'AnonymousEntityDescription', AnonymousEntityDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}Designation with content type ELEMENT_ONLY
class Designation (EntryDescription):
    """A  is identical to a  as defined in . It is a "string of
				(UNICODE) characters ... in a given natural language, such as English or Japanese." "These labels provide the strongest clues as to the meaning of a (SKOS concept)". The CTS specification generalizes the label
				use to include not only SKOS concepts but any class, predicate or individual - collectively referred to as . Note that  is intended only for identifiers that are interpreted by human beings.
				Numeric codes and other machine readable identifiers should be recorded as s."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'Designation')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 211, 1)
    _ElementMap = EntryDescription._ElementMap.copy()
    _AttributeMap = EntryDescription._AttributeMap.copy()
    # Base type is EntryDescription
    
    # Element value_ ({http://www.omg.org/spec/CTS2/1.1/Core}value) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element format ({http://www.omg.org/spec/CTS2/1.1/Core}format) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element language ({http://www.omg.org/spec/CTS2/1.1/Core}language) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element schema ({http://www.omg.org/spec/CTS2/1.1/Core}schema) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}usageContext uses Python identifier usageContext
    __usageContext = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'usageContext'), 'usageContext', '__httpwww_omg_orgspecCTS21_1Entity_Designation_httpwww_omg_orgspecCTS21_1EntityusageContext', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 221, 5), )

    
    usageContext = property(__usageContext.value, __usageContext.set, None, u'the context(s) in which this designation is applicable')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}designationType uses Python identifier designationType
    __designationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'designationType'), 'designationType', '__httpwww_omg_orgspecCTS21_1Entity_Designation_httpwww_omg_orgspecCTS21_1EntitydesignationType', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 226, 5), )

    
    designationType = property(__designationType.value, __designationType.set, None, u'the type of designation (e.g. abbreviation, eponym, short name, long name, etc.) of the given designation.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}caseSignificance uses Python identifier caseSignificance
    __caseSignificance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'caseSignificance'), 'caseSignificance', '__httpwww_omg_orgspecCTS21_1Entity_Designation_httpwww_omg_orgspecCTS21_1EntitycaseSignificance', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 231, 5), )

    
    caseSignificance = property(__caseSignificance.value, __caseSignificance.set, None, u'identifies the significance that case plays in the value of this particular designation.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}degreeOfFidelity uses Python identifier degreeOfFidelity
    __degreeOfFidelity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'degreeOfFidelity'), 'degreeOfFidelity', '__httpwww_omg_orgspecCTS21_1Entity_Designation_httpwww_omg_orgspecCTS21_1EntitydegreeOfFidelity', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 236, 5), )

    
    degreeOfFidelity = property(__degreeOfFidelity.value, __degreeOfFidelity.set, None, u'a measure of how closely this designation actually matches the intended meaning of the target entity. Typical values might represent "exact", "approximate", "broader", "narrower",\n\t\t\t\t\t\t\t\tetc.')

    
    # Attribute designationRole uses Python identifier designationRole
    __designationRole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'designationRole'), 'designationRole', '__httpwww_omg_orgspecCTS21_1Entity_Designation_designationRole', DesignationRole, unicode_default=u'ALTERNATIVE')
    __designationRole._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 243, 4)
    __designationRole._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 243, 4)
    
    designationRole = property(__designationRole.value, __designationRole.set, None, u'an indicator that determines the particular role that this designation plays')

    
    # Attribute assertedInCodeSystemVersion uses Python identifier assertedInCodeSystemVersion
    __assertedInCodeSystemVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'assertedInCodeSystemVersion'), 'assertedInCodeSystemVersion', '__httpwww_omg_orgspecCTS21_1Entity_Designation_assertedInCodeSystemVersion', CodeSystemVersionName)
    __assertedInCodeSystemVersion._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 248, 4)
    __assertedInCodeSystemVersion._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 248, 4)
    
    assertedInCodeSystemVersion = property(__assertedInCodeSystemVersion.value, __assertedInCodeSystemVersion.set, None, u'the code system version that contains the assertion(s) represented in the ')

    
    # Attribute externalIdentifier uses Python identifier externalIdentifier
    __externalIdentifier = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'externalIdentifier'), 'externalIdentifier', '__httpwww_omg_orgspecCTS21_1Entity_Designation_externalIdentifier', String)
    __externalIdentifier._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 253, 4)
    __externalIdentifier._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 253, 4)
    
    externalIdentifier = property(__externalIdentifier.value, __externalIdentifier.set, None, u'an identifier that is assigned to this designation / entity pair by the authoring body. As an example this would carry the SCTID for SNOMED-CT concepts.')

    
    # Attribute correspondingStatement uses Python identifier correspondingStatement
    __correspondingStatement = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'correspondingStatement'), 'correspondingStatement', '__httpwww_omg_orgspecCTS21_1Entity_Designation_correspondingStatement', RenderingURI)
    __correspondingStatement._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 258, 4)
    __correspondingStatement._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 258, 4)
    
    correspondingStatement = property(__correspondingStatement.value, __correspondingStatement.set, None, u'a URI that, when de-referenced, provides the equivalent  that forms this designation. This is only present when the  profile is supported by the implementing\n\t\t\t\t\t\t\tservice.')

    _ElementMap.update({
        __usageContext.name() : __usageContext,
        __designationType.name() : __designationType,
        __caseSignificance.name() : __caseSignificance,
        __degreeOfFidelity.name() : __degreeOfFidelity
    })
    _AttributeMap.update({
        __designationRole.name() : __designationRole,
        __assertedInCodeSystemVersion.name() : __assertedInCodeSystemVersion,
        __externalIdentifier.name() : __externalIdentifier,
        __correspondingStatement.name() : __correspondingStatement
    })
_Namespace_entity.addCategoryObject('typeBinding', u'Designation', Designation)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDirectoryEntry with content type ELEMENT_ONLY
class EntityDirectoryEntry (EntityReference):
    """A synopsis of an  along with information about how to access the complete resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 562, 1)
    _ElementMap = EntityReference._ElementMap.copy()
    _AttributeMap = EntityReference._AttributeMap.copy()
    # Base type is EntityReference
    
    # Element name ({http://www.omg.org/spec/CTS2/1.1/Core}name) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}EntityReference
    
    # Element knownEntityDescription ({http://www.omg.org/spec/CTS2/1.1/Core}knownEntityDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}EntityReference
    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_omg_orgspecCTS21_1Entity_EntityDirectoryEntry_href', RenderingURI)
    __href._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    __href._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    
    href = property(__href.value, __href.set, None, u'a that resolves to the full resource described by the . This should be present if the service either (a) supports the  functional profile for the specified\n\t\t\t\t\t\tor (b) is aware of another service that does.')

    
    # Attribute resourceName uses Python identifier resourceName
    __resourceName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resourceName'), 'resourceName', '__httpwww_omg_orgspecCTS21_1Entity_EntityDirectoryEntry_resourceName', LocalIdentifier)
    __resourceName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    __resourceName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    
    resourceName = property(__resourceName.value, __resourceName.set, None, u'a local identifier that names a unique resource within the context of  and the service context. This attribute must be present if the corresponding element has a local name. Note, however, that\n\t\t\t\t\tsome elements (e.g. , , etc.) do not local names and are identified exclusively by their .')

    
    # Attribute matchStrength uses Python identifier matchStrength
    __matchStrength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'matchStrength'), 'matchStrength', '__httpwww_omg_orgspecCTS21_1Entity_EntityDirectoryEntry_matchStrength', MatchStrength)
    __matchStrength._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    __matchStrength._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    
    matchStrength = property(__matchStrength.value, __matchStrength.set, None, u'a relative measure of the "goodness of fit" of the directory entry within the context of the  in the containing ')

    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}EntityReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __href.name() : __href,
        __resourceName.name() : __resourceName,
        __matchStrength.name() : __matchStrength
    })
_Namespace_entity.addCategoryObject('typeBinding', u'EntityDirectoryEntry', EntityDirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapEntry with content type ELEMENT_ONLY
class MapEntry_ (Changeable):
    """ defines a set of rules that identify how a single Entity maps to zero or more target Entities. A  instance is uniquely identified by the combination of
				the 
				 and the  entity identifier."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 179, 1)
    _ElementMap = Changeable._ElementMap.copy()
    _AttributeMap = Changeable._AttributeMap.copy()
    # Base type is Changeable
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}assertedBy uses Python identifier assertedBy
    __assertedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'assertedBy'), 'assertedBy', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntry__httpwww_omg_orgspecCTS21_1MapVersionassertedBy', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 188, 5), )

    
    assertedBy = property(__assertedBy.value, __assertedBy.set, None, u'the mapping version that asserts this entry')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}mapFrom uses Python identifier mapFrom
    __mapFrom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapFrom'), 'mapFrom', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntry__httpwww_omg_orgspecCTS21_1MapVersionmapFrom', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 193, 5), )

    
    mapFrom = property(__mapFrom.value, __mapFrom.set, None, u'the name and URI of the "from" or "source" side of the map. There can be at most one  entry for every unique entity in a given .')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'source'), 'source', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntry__httpwww_omg_orgspecCTS21_1MapVersionsource', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 198, 5), )

    
    source = property(__source.value, __source.set, None, u'a list individuals or organizations and the role(s) they played in this entry')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}sourceStatements uses Python identifier sourceStatements
    __sourceStatements = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'sourceStatements'), 'sourceStatements', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntry__httpwww_omg_orgspecCTS21_1MapVersionsourceStatements', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 203, 5), )

    
    sourceStatements = property(__sourceStatements.value, __sourceStatements.set, None, u'a URI that resolves to the set of statements that were used to construct this entry')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}mapSet uses Python identifier mapSet
    __mapSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapSet'), 'mapSet', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntry__httpwww_omg_orgspecCTS21_1MapVersionmapSet', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 208, 5), )

    
    mapSet = property(__mapSet.value, __mapSet.set, None, None)

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute processingRule uses Python identifier processingRule
    __processingRule = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'processingRule'), 'processingRule', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntry__processingRule', MapProcessingRule, required=True)
    __processingRule._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 210, 4)
    __processingRule._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 210, 4)
    
    processingRule = property(__processingRule.value, __processingRule.set, None, u'an indicator that etermines how the  entries are evaluated. The first  is evaluated and, if no match is found, the second set is evaluated, etc. If a match is found\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tis set to then processing terminates. Processing continues until all s have been evaluated in all other cases')

    _ElementMap.update({
        __assertedBy.name() : __assertedBy,
        __mapFrom.name() : __mapFrom,
        __source.name() : __source,
        __sourceStatements.name() : __sourceStatements,
        __mapSet.name() : __mapSet
    })
    _AttributeMap.update({
        __processingRule.name() : __processingRule
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapEntry', MapEntry_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Statement}Statement with content type ELEMENT_ONLY
class Statement_ (Changeable):
    """An assertion about a CTS model element. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_stmt, u'Statement')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 12, 1)
    _ElementMap = Changeable._ElementMap.copy()
    _AttributeMap = Changeable._AttributeMap.copy()
    # Base type is Changeable
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}statementURI uses Python identifier statementURI
    __statementURI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'statementURI'), 'statementURI', '__httpwww_omg_orgspecCTS21_1Statement_Statement__httpwww_omg_orgspecCTS21_1StatementstatementURI', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 19, 5), )

    
    statementURI = property(__statementURI.value, __statementURI.set, None, u'The unique statement identifier.  Must be globally unique if information is to be exchanged and updated on the statement leve.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}subject uses Python identifier subject
    __subject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'subject'), 'subject', '__httpwww_omg_orgspecCTS21_1Statement_Statement__httpwww_omg_orgspecCTS21_1Statementsubject', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 24, 5), )

    
    subject = property(__subject.value, __subject.set, None, u'the subject of the statement - either a resource or a reference to a terminological entity.  may reference a specific , ,\n\t\t\t\t\t\t\t\t\t, , , , \n\t\t\t\t\t\t\t\t, , , , ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}predicate uses Python identifier predicate
    __predicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'predicate'), 'predicate', '__httpwww_omg_orgspecCTS21_1Statement_Statement__httpwww_omg_orgspecCTS21_1Statementpredicate', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 31, 5), )

    
    predicate = property(__predicate.value, __predicate.set, None, u'the predicate of the statement. Note that this is type as, while it serves as a predicate in the statement itself it is not necessary that it be formally recognized as a\n\t\t\t\t\t\t\t\tpredicate by the CTS service - it may have been translated or transformed by the load process.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}target uses Python identifier target
    __target = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'target'), 'target', '__httpwww_omg_orgspecCTS21_1Statement_Statement__httpwww_omg_orgspecCTS21_1Statementtarget', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 37, 5), )

    
    target = property(__target.value, __target.set, None, None)

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}associatedAttribute uses Python identifier associatedAttribute
    __associatedAttribute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'associatedAttribute'), 'associatedAttribute', '__httpwww_omg_orgspecCTS21_1Statement_Statement__httpwww_omg_orgspecCTS21_1StatementassociatedAttribute', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 38, 5), )

    
    associatedAttribute = property(__associatedAttribute.value, __associatedAttribute.set, None, u'the identifier and name of the CTS attribute or element that renders this statement, if any')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'source'), 'source', '__httpwww_omg_orgspecCTS21_1Statement_Statement__httpwww_omg_orgspecCTS21_1Statementsource', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 43, 5), )

    
    source = property(__source.value, __source.set, None, u'the source(s) of the statement and the role(s) they played')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}assertedBy uses Python identifier assertedBy
    __assertedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'assertedBy'), 'assertedBy', '__httpwww_omg_orgspecCTS21_1Statement_Statement__httpwww_omg_orgspecCTS21_1StatementassertedBy', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 48, 5), )

    
    assertedBy = property(__assertedBy.value, __assertedBy.set, None, u'the code system version that is asserting this particular statement. In the case of ontologies that import other ontologies, this is the outermost importing ontology.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}assertedIn uses Python identifier assertedIn
    __assertedIn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'assertedIn'), 'assertedIn', '__httpwww_omg_orgspecCTS21_1Statement_Statement__httpwww_omg_orgspecCTS21_1StatementassertedIn', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 53, 5), )

    
    assertedIn = property(__assertedIn.value, __assertedIn.set, None, u'the code system version (ontology) that actually makes this statement. In the case of ontologies, this is the innermost imported ontology.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}qualifier uses Python identifier qualifier
    __qualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'qualifier'), 'qualifier', '__httpwww_omg_orgspecCTS21_1Statement_Statement__httpwww_omg_orgspecCTS21_1Statementqualifier', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 58, 5), )

    
    qualifier = property(__qualifier.value, __qualifier.set, None, None)

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    _ElementMap.update({
        __statementURI.name() : __statementURI,
        __subject.name() : __subject,
        __predicate.name() : __predicate,
        __target.name() : __target,
        __associatedAttribute.name() : __associatedAttribute,
        __source.name() : __source,
        __assertedBy.name() : __assertedBy,
        __assertedIn.name() : __assertedIn,
        __qualifier.name() : __qualifier
    })
    _AttributeMap.update({
        
    })
_Namespace_stmt.addCategoryObject('typeBinding', u'Statement', Statement_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeSet with content type ELEMENT_ONLY
class ChangeSet_ (pyxb.binding.basis.complexTypeDefinition):
    """An ordered collection of changes that, when applied, will transform a service instance from one consistent state to
				another. A  is viewed as an atomic unit of change - either all of the  elements in a change set will
				be applied or none of them will be applied. It is anticipated that service implementations will provide a mechanism by which it can
				apply local business rules to the validation and application of change sets. These rules may include the option to selectively apply,
				reject, modify or ignore the elements of change sets as they arrive. In this case, it is up to the developers of the business rules to
				determine what constitutes a "complete" change set that can be applied."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ChangeSet')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 26, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'creator'), 'creator', '__httpwww_omg_orgspecCTS21_1Updates_ChangeSet__httpwww_omg_orgspecCTS21_1Corecreator', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3), )

    
    creator = property(__creator.value, __creator.set, None, u'the person or organization who initially created the change set')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}changeInstructions uses Python identifier changeInstructions
    __changeInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'changeInstructions'), 'changeInstructions', '__httpwww_omg_orgspecCTS21_1Updates_ChangeSet__httpwww_omg_orgspecCTS21_1CorechangeInstructions', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3), )

    
    changeInstructions = property(__changeInstructions.value, __changeInstructions.set, None, u'documentation and instructions about the purpose and application of the change set')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}member uses Python identifier member
    __member = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'member'), 'member', '__httpwww_omg_orgspecCTS21_1Updates_ChangeSet__httpwww_omg_orgspecCTS21_1Updatesmember', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 37, 3), )

    
    member = property(__member.value, __member.set, None, None)

    
    # Attribute changeSetURI uses Python identifier changeSetURI
    __changeSetURI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'changeSetURI'), 'changeSetURI', '__httpwww_omg_orgspecCTS21_1Updates_ChangeSet__changeSetURI', ChangeSetURI, required=True)
    __changeSetURI._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 416, 2)
    __changeSetURI._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 416, 2)
    
    changeSetURI = property(__changeSetURI.value, __changeSetURI.set, None, u'a globally unique identifier that signifies this particular change set')

    
    # Attribute creationDate uses Python identifier creationDate
    __creationDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'creationDate'), 'creationDate', '__httpwww_omg_orgspecCTS21_1Updates_ChangeSet__creationDate', DateAndTime, required=True)
    __creationDate._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 421, 2)
    __creationDate._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 421, 2)
    
    creationDate = property(__creationDate.value, __creationDate.set, None, u'the date and time that the change set was initially created')

    
    # Attribute officialEffectiveDate uses Python identifier officialEffectiveDate
    __officialEffectiveDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'officialEffectiveDate'), 'officialEffectiveDate', '__httpwww_omg_orgspecCTS21_1Updates_ChangeSet__officialEffectiveDate', DateAndTime)
    __officialEffectiveDate._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 426, 2)
    __officialEffectiveDate._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 426, 2)
    
    officialEffectiveDate = property(__officialEffectiveDate.value, __officialEffectiveDate.set, None, u'the date and time that this set of changes became (or should become) effective . This parameter enables history queries from both the perspective of the service\n\t\t\t\t\t("What did the service return on July 1") and the perspective of the resource author ("What would the state of the terminology have been on July 1 had it been loaded prior to that date and not been locally modified?").\n\t\t\t\t')

    
    # Attribute closeDate uses Python identifier closeDate
    __closeDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'closeDate'), 'closeDate', '__httpwww_omg_orgspecCTS21_1Updates_ChangeSet__closeDate', DateAndTime)
    __closeDate._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 433, 2)
    __closeDate._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 433, 2)
    
    closeDate = property(__closeDate.value, __closeDate.set, None, u'the date and time that this change set was finalized ( = ). Once finalized, a change set cannot be further modified.')

    
    # Attribute entryCount uses Python identifier entryCount
    __entryCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'entryCount'), 'entryCount', '__httpwww_omg_orgspecCTS21_1Updates_ChangeSet__entryCount', NaturalNumber)
    __entryCount._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 438, 2)
    __entryCount._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 438, 2)
    
    entryCount = property(__entryCount.value, __entryCount.set, None, u'the number of  members in the set')

    
    # Attribute state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'state'), 'state', '__httpwww_omg_orgspecCTS21_1Updates_ChangeSet__state', FinalizableState, unicode_default=u'FINAL')
    __state._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 40, 2)
    __state._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 40, 2)
    
    state = property(__state.value, __state.set, None, None)

    _ElementMap.update({
        __creator.name() : __creator,
        __changeInstructions.name() : __changeInstructions,
        __member.name() : __member
    })
    _AttributeMap.update({
        __changeSetURI.name() : __changeSetURI,
        __creationDate.name() : __creationDate,
        __officialEffectiveDate.name() : __officialEffectiveDate,
        __closeDate.name() : __closeDate,
        __entryCount.name() : __entryCount,
        __state.name() : __state
    })
_Namespace.addCategoryObject('typeBinding', u'ChangeSet', ChangeSet_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableAsDirectoryEntry with content type ELEMENT_ONLY
class ChangeableAsDirectoryEntry (ChangeableResource):
    """A changeable element that occurs in an """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'ChangeableAsDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 108, 1)
    _ElementMap = ChangeableResource._ElementMap.copy()
    _AttributeMap = ChangeableResource._AttributeMap.copy()
    # Base type is ChangeableResource
    
    # Element association ({http://www.omg.org/spec/CTS2/1.1/Updates}association) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Element codeSystem ({http://www.omg.org/spec/CTS2/1.1/Updates}codeSystem) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Element codeSystemVersion ({http://www.omg.org/spec/CTS2/1.1/Updates}codeSystemVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Element conceptDomain ({http://www.omg.org/spec/CTS2/1.1/Updates}conceptDomain) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Element conceptDomainBinding ({http://www.omg.org/spec/CTS2/1.1/Updates}conceptDomainBinding) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Element entityDescription ({http://www.omg.org/spec/CTS2/1.1/Updates}entityDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Element map ({http://www.omg.org/spec/CTS2/1.1/Updates}map) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Element mapVersion ({http://www.omg.org/spec/CTS2/1.1/Updates}mapVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Element mapEntry ({http://www.omg.org/spec/CTS2/1.1/Updates}mapEntry) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Element statement ({http://www.omg.org/spec/CTS2/1.1/Updates}statement) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Element valueSet ({http://www.omg.org/spec/CTS2/1.1/Updates}valueSet) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Element valueSetDefinition ({http://www.omg.org/spec/CTS2/1.1/Updates}valueSetDefinition) inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableAsDirectoryEntry_href', RenderingURI)
    __href._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    __href._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    
    href = property(__href.value, __href.set, None, u'a that resolves to the full resource described by the . This should be present if the service either (a) supports the  functional profile for the specified\n\t\t\t\t\t\tor (b) is aware of another service that does.')

    
    # Attribute resourceName uses Python identifier resourceName
    __resourceName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resourceName'), 'resourceName', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableAsDirectoryEntry_resourceName', LocalIdentifier)
    __resourceName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    __resourceName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    
    resourceName = property(__resourceName.value, __resourceName.set, None, u'a local identifier that names a unique resource within the context of  and the service context. This attribute must be present if the corresponding element has a local name. Note, however, that\n\t\t\t\t\tsome elements (e.g. , , etc.) do not local names and are identified exclusively by their .')

    
    # Attribute matchStrength uses Python identifier matchStrength
    __matchStrength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'matchStrength'), 'matchStrength', '__httpwww_omg_orgspecCTS21_1Updates_ChangeableAsDirectoryEntry_matchStrength', MatchStrength)
    __matchStrength._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    __matchStrength._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    
    matchStrength = property(__matchStrength.value, __matchStrength.set, None, u'a relative measure of the "goodness of fit" of the directory entry within the context of the  in the containing ')

    
    # Attribute entryOrder inherited from {http://www.omg.org/spec/CTS2/1.1/Updates}ChangeableResource
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __href.name() : __href,
        __resourceName.name() : __resourceName,
        __matchStrength.name() : __matchStrength
    })
_Namespace.addCategoryObject('typeBinding', u'ChangeableAsDirectoryEntry', ChangeableAsDirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ResolvedValueSetDirectoryEntry with content type ELEMENT_ONLY
class ResolvedValueSetDirectoryEntry (ResolvedValueSetSummary_):
    """An entry in a ."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ResolvedValueSetDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 473, 1)
    _ElementMap = ResolvedValueSetSummary_._ElementMap.copy()
    _AttributeMap = ResolvedValueSetSummary_._AttributeMap.copy()
    # Base type is ResolvedValueSetSummary_
    
    # Element resolvedHeader ({http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}resolvedHeader) inherited from {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ResolvedValueSetSummary
    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSetDirectoryEntry_href', RenderingURI)
    __href._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    __href._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    
    href = property(__href.value, __href.set, None, u'a that resolves to the full resource described by the . This should be present if the service either (a) supports the  functional profile for the specified\n\t\t\t\t\t\tor (b) is aware of another service that does.')

    
    # Attribute resourceName uses Python identifier resourceName
    __resourceName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resourceName'), 'resourceName', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSetDirectoryEntry_resourceName', LocalIdentifier)
    __resourceName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    __resourceName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    
    resourceName = property(__resourceName.value, __resourceName.set, None, u'a local identifier that names a unique resource within the context of  and the service context. This attribute must be present if the corresponding element has a local name. Note, however, that\n\t\t\t\t\tsome elements (e.g. , , etc.) do not local names and are identified exclusively by their .')

    
    # Attribute matchStrength uses Python identifier matchStrength
    __matchStrength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'matchStrength'), 'matchStrength', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSetDirectoryEntry_matchStrength', MatchStrength)
    __matchStrength._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    __matchStrength._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    
    matchStrength = property(__matchStrength.value, __matchStrength.set, None, u'a relative measure of the "goodness of fit" of the directory entry within the context of the  in the containing ')

    
    # Attribute resolvedValueSetURI inherited from {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ResolvedValueSetSummary
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __href.name() : __href,
        __resourceName.name() : __resourceName,
        __matchStrength.name() : __matchStrength
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ResolvedValueSetDirectoryEntry', ResolvedValueSetDirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Association}AssociationDirectory with content type ELEMENT_ONLY
class AssociationDirectory_ (Directory):
    """A directory of  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationDirectory')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 133, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Association_AssociationDirectory__httpwww_omg_orgspecCTS21_1Associationentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 140, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_association.addCategoryObject('typeBinding', u'AssociationDirectory', AssociationDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Association}AssociationDirectoryEntry with content type ELEMENT_ONLY
class AssociationDirectoryEntry (DirectoryEntry):
    """A synopsis of an  along with information about how to access the complete resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 146, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}subject uses Python identifier subject
    __subject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'subject'), 'subject', '__httpwww_omg_orgspecCTS21_1Association_AssociationDirectoryEntry_httpwww_omg_orgspecCTS21_1Associationsubject', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 153, 5), )

    
    subject = property(__subject.value, __subject.set, None, u'the subject of the association statement')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}predicate uses Python identifier predicate
    __predicate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'predicate'), 'predicate', '__httpwww_omg_orgspecCTS21_1Association_AssociationDirectoryEntry_httpwww_omg_orgspecCTS21_1Associationpredicate', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 158, 5), )

    
    predicate = property(__predicate.value, __predicate.set, None, u'the predicate of the association statement')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}target uses Python identifier target
    __target = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'target'), 'target', '__httpwww_omg_orgspecCTS21_1Association_AssociationDirectoryEntry_httpwww_omg_orgspecCTS21_1Associationtarget', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 163, 5), )

    
    target = property(__target.value, __target.set, None, u'the target (object) of the association statement')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}assertedBy uses Python identifier assertedBy
    __assertedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedBy'), 'assertedBy', '__httpwww_omg_orgspecCTS21_1Association_AssociationDirectoryEntry_httpwww_omg_orgspecCTS21_1AssociationassertedBy', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 168, 5), )

    
    assertedBy = property(__assertedBy.value, __assertedBy.set, None, u'the code system version that is making this assertion')

    
    # Attribute associationID uses Python identifier associationID
    __associationID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'associationID'), 'associationID', '__httpwww_omg_orgspecCTS21_1Association_AssociationDirectoryEntry_associationID', URI)
    __associationID._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 174, 4)
    __associationID._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 174, 4)
    
    associationID = property(__associationID.value, __associationID.set, None, u'the unique identifier of the association instance. While the update mechanism of the CTS specifications requires that all  elements have unique identifiers, the rules\n\t\t\t\t\t\t\tand mechanism for assigning unique identifiers to statements and associations are non-trivial. At the moment, the CTS specification remains silent when it comes to arriving at how this identifier is\n\t\t\t\t\t\t\tgenerated except to note that, if two service implementations do not generate the same unique identifier for the same assertion, then the  element in  becomes the only way to\n\t\t\t\t\t\t\tidentify which Association instance is being updated or deleted.')

    
    # Attribute localID uses Python identifier localID
    __localID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'localID'), 'localID', '__httpwww_omg_orgspecCTS21_1Association_AssociationDirectoryEntry_localID', String)
    __localID._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 182, 4)
    __localID._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 182, 4)
    
    localID = property(__localID.value, __localID.set, None, u'the local identifier of the association instance. If externalStatementID is present, it will be used\n\t\t\t\t\t\tfor the localId. If not, the localID will be generated by the service.')

    
    # Attribute derivation uses Python identifier derivation
    __derivation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'derivation'), 'derivation', '__httpwww_omg_orgspecCTS21_1Association_AssociationDirectoryEntry_derivation', AssociationDerivation)
    __derivation._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 189, 4)
    __derivation._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 189, 4)
    
    derivation = property(__derivation.value, __derivation.set, None, u'how this association was derived. takes precedence over , meaning that an assertion that is both asserted and derived is marked as asserted.')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __subject.name() : __subject,
        __predicate.name() : __predicate,
        __target.name() : __target,
        __assertedBy.name() : __assertedBy
    })
    _AttributeMap.update({
        __associationID.name() : __associationID,
        __localID.name() : __localID,
        __derivation.name() : __derivation
    })
_Namespace_association.addCategoryObject('typeBinding', u'AssociationDirectoryEntry', AssociationDirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Association}AssociationList with content type ELEMENT_ONLY
class AssociationList_ (Directory):
    """A collection of complete  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationList')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 199, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Association_AssociationList__httpwww_omg_orgspecCTS21_1Associationentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 206, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_association.addCategoryObject('typeBinding', u'AssociationList', AssociationList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Association}AssociationListEntry with content type ELEMENT_ONLY
class AssociationListEntry (Association_):
    """An instance of  that meets a specified filter criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationListEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 213, 1)
    _ElementMap = Association_._ElementMap.copy()
    _AttributeMap = Association_._AttributeMap.copy()
    # Base type is Association_
    
    # Element subject ({http://www.omg.org/spec/CTS2/1.1/Association}subject) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}Association
    
    # Element predicate ({http://www.omg.org/spec/CTS2/1.1/Association}predicate) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}Association
    
    # Element target ({http://www.omg.org/spec/CTS2/1.1/Association}target) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}Association
    
    # Element associationQualifier ({http://www.omg.org/spec/CTS2/1.1/Association}associationQualifier) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}Association
    
    # Element assertedBy ({http://www.omg.org/spec/CTS2/1.1/Association}assertedBy) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}Association
    
    # Element assertedIn ({http://www.omg.org/spec/CTS2/1.1/Association}assertedIn) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}Association
    
    # Element derivationReasoningAlgorithm ({http://www.omg.org/spec/CTS2/1.1/Association}derivationReasoningAlgorithm) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}Association
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Association}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}Association
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute associationID inherited from {http://www.omg.org/spec/CTS2/1.1/Association}Association
    
    # Attribute derivation inherited from {http://www.omg.org/spec/CTS2/1.1/Association}Association
    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_omg_orgspecCTS21_1Association_AssociationListEntry_href', RenderingURI)
    __href._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    __href._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    
    href = property(__href.value, __href.set, None, u'a that resolves to the full resource described by the . This should be present if the service either (a) supports the  functional profile for the specified\n\t\t\t\t\t\tor (b) is aware of another service that does.')

    
    # Attribute resourceName uses Python identifier resourceName
    __resourceName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resourceName'), 'resourceName', '__httpwww_omg_orgspecCTS21_1Association_AssociationListEntry_resourceName', LocalIdentifier)
    __resourceName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    __resourceName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    
    resourceName = property(__resourceName.value, __resourceName.set, None, u'a local identifier that names a unique resource within the context of  and the service context. This attribute must be present if the corresponding element has a local name. Note, however, that\n\t\t\t\t\tsome elements (e.g. , , etc.) do not local names and are identified exclusively by their .')

    
    # Attribute matchStrength uses Python identifier matchStrength
    __matchStrength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'matchStrength'), 'matchStrength', '__httpwww_omg_orgspecCTS21_1Association_AssociationListEntry_matchStrength', MatchStrength)
    __matchStrength._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    __matchStrength._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    
    matchStrength = property(__matchStrength.value, __matchStrength.set, None, u'a relative measure of the "goodness of fit" of the directory entry within the context of the  in the containing ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __href.name() : __href,
        __resourceName.name() : __resourceName,
        __matchStrength.name() : __matchStrength
    })
_Namespace_association.addCategoryObject('typeBinding', u'AssociationListEntry', AssociationListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Association}AssociationGraph with content type ELEMENT_ONLY
class AssociationGraph_ (Directory):
    """An augmented rendering of a set of where the linkage between subject and target nodes has been normalized for easier traversal."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationGraph')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 232, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}focusEntity uses Python identifier focusEntity
    __focusEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'focusEntity'), 'focusEntity', '__httpwww_omg_orgspecCTS21_1Association_AssociationGraph__httpwww_omg_orgspecCTS21_1AssociationfocusEntity', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 239, 5), )

    
    focusEntity = property(__focusEntity.value, __focusEntity.set, None, u'the focus entity of the graph, if any. This is a copy of the focus parameter from the  method in the ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Association_AssociationGraph__httpwww_omg_orgspecCTS21_1Associationentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 244, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute expansionDepth uses Python identifier expansionDepth
    __expansionDepth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'expansionDepth'), 'expansionDepth', '__httpwww_omg_orgspecCTS21_1Association_AssociationGraph__expansionDepth', NaturalNumber)
    __expansionDepth._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 246, 4)
    __expansionDepth._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 246, 4)
    
    expansionDepth = property(__expansionDepth.value, __expansionDepth.set, None, u'the depth (one based) of the graph.  This is a copy of the  parameter of the  method in the ')

    
    # Attribute expansionDirection uses Python identifier expansionDirection
    __expansionDirection = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'expansionDirection'), 'expansionDirection', '__httpwww_omg_orgspecCTS21_1Association_AssociationGraph__expansionDirection', GraphDirection, required=True)
    __expansionDirection._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 251, 4)
    __expansionDirection._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 251, 4)
    
    expansionDirection = property(__expansionDirection.value, __expansionDirection.set, None, u'the direction the graph was expanded.  This is a copy of the  parameter of the  method in the ')

    
    # Attribute graphFocus uses Python identifier graphFocus
    __graphFocus = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'graphFocus'), 'graphFocus', '__httpwww_omg_orgspecCTS21_1Association_AssociationGraph__graphFocus', GraphFocus, required=True)
    __graphFocus._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 256, 4)
    __graphFocus._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 256, 4)
    
    graphFocus = property(__graphFocus.value, __graphFocus.set, None, u'the focus of the graph')

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __focusEntity.name() : __focusEntity,
        __entry.name() : __entry
    })
    _AttributeMap.update({
        __expansionDepth.name() : __expansionDepth,
        __expansionDirection.name() : __expansionDirection,
        __graphFocus.name() : __graphFocus
    })
_Namespace_association.addCategoryObject('typeBinding', u'AssociationGraph', AssociationGraph_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystem}CodeSystemCatalogEntryDirectory with content type ELEMENT_ONLY
class CodeSystemCatalogEntryDirectory_ (Directory):
    """A directory that summarizes a set of catalog entries."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystem, u'CodeSystemCatalogEntryDirectory')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 100, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntryDirectory__httpwww_omg_orgspecCTS21_1CodeSystementry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 107, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_codesystem.addCategoryObject('typeBinding', u'CodeSystemCatalogEntryDirectory', CodeSystemCatalogEntryDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystem}CodeSystemCatalogEntryList with content type ELEMENT_ONLY
class CodeSystemCatalogEntryList_ (Directory):
    """A set of code system catalog entries."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystem, u'CodeSystemCatalogEntryList')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 142, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntryList__httpwww_omg_orgspecCTS21_1CodeSystementry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 149, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_codesystem.addCategoryObject('typeBinding', u'CodeSystemCatalogEntryList', CodeSystemCatalogEntryList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystem}CodeSystemCatalogEntryListEntry with content type ELEMENT_ONLY
class CodeSystemCatalogEntryListEntry (DirectoryEntry):
    """An instance of  that meets a specified filter criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystem, u'CodeSystemCatalogEntryListEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 155, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntryListEntry_httpwww_omg_orgspecCTS21_1CodeSystementry', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 162, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_codesystem.addCategoryObject('typeBinding', u'CodeSystemCatalogEntryListEntry', CodeSystemCatalogEntryListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}CodeSystemVersionCatalogEntryDirectory with content type ELEMENT_ONLY
class CodeSystemVersionCatalogEntryDirectory_ (Directory):
    """A directory of  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'CodeSystemVersionCatalogEntryDirectory')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 102, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntryDirectory__httpwww_omg_orgspecCTS21_1CodeSystemVersionentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 109, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_codesystemversion.addCategoryObject('typeBinding', u'CodeSystemVersionCatalogEntryDirectory', CodeSystemVersionCatalogEntryDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}CodeSystemVersionCatalogEntryList with content type ELEMENT_ONLY
class CodeSystemVersionCatalogEntryList_ (Directory):
    """A collection of complete  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'CodeSystemVersionCatalogEntryList')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 145, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntryList__httpwww_omg_orgspecCTS21_1CodeSystemVersionentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 152, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_codesystemversion.addCategoryObject('typeBinding', u'CodeSystemVersionCatalogEntryList', CodeSystemVersionCatalogEntryList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}CodeSystemVersionCatalogEntryListEntry with content type ELEMENT_ONLY
class CodeSystemVersionCatalogEntryListEntry (DirectoryEntry):
    """An instance of  that meets a specified filter criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'CodeSystemVersionCatalogEntryListEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 158, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntryListEntry_httpwww_omg_orgspecCTS21_1CodeSystemVersionentry', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 165, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_codesystemversion.addCategoryObject('typeBinding', u'CodeSystemVersionCatalogEntryListEntry', CodeSystemVersionCatalogEntryListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}ConceptDomainCatalogEntryDirectory with content type ELEMENT_ONLY
class ConceptDomainCatalogEntryDirectory_ (Directory):
    """A directory of  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'ConceptDomainCatalogEntryDirectory')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 72, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ConceptDomain_ConceptDomainCatalogEntryDirectory__httpwww_omg_orgspecCTS21_1ConceptDomainentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 79, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_conceptdomain.addCategoryObject('typeBinding', u'ConceptDomainCatalogEntryDirectory', ConceptDomainCatalogEntryDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}ConceptDomainCatalogEntryList with content type ELEMENT_ONLY
class ConceptDomainCatalogEntryList_ (Directory):
    """A collection of complete  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'ConceptDomainCatalogEntryList')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 117, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ConceptDomain_ConceptDomainCatalogEntryList__httpwww_omg_orgspecCTS21_1ConceptDomainentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 124, 6), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_conceptdomain.addCategoryObject('typeBinding', u'ConceptDomainCatalogEntryList', ConceptDomainCatalogEntryList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}ConceptDomainCatalogEntryListEntry with content type ELEMENT_ONLY
class ConceptDomainCatalogEntryListEntry (DirectoryEntry):
    """An instance of  that meets a specified filter criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'ConceptDomainCatalogEntryListEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 130, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ConceptDomain_ConceptDomainCatalogEntryListEntry_httpwww_omg_orgspecCTS21_1ConceptDomainentry', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 137, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_conceptdomain.addCategoryObject('typeBinding', u'ConceptDomainCatalogEntryListEntry', ConceptDomainCatalogEntryListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}ConceptDomainBindingDirectory with content type ELEMENT_ONLY
class ConceptDomainBindingDirectory_ (Directory):
    """A directory that summarizes a set of concept domain bindings."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'ConceptDomainBindingDirectory')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 87, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBindingDirectory__httpwww_omg_orgspecCTS21_1ConceptDomainBindingentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 94, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_conceptdomainbinding.addCategoryObject('typeBinding', u'ConceptDomainBindingDirectory', ConceptDomainBindingDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}ConceptDomainBindingList with content type ELEMENT_ONLY
class ConceptDomainBindingList_ (Directory):
    """A collection of complete  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'ConceptDomainBindingList')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 133, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBindingList__httpwww_omg_orgspecCTS21_1ConceptDomainBindingentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 140, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_conceptdomainbinding.addCategoryObject('typeBinding', u'ConceptDomainBindingList', ConceptDomainBindingList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}ConceptDomainBindingListEntry with content type ELEMENT_ONLY
class ConceptDomainBindingListEntry (DirectoryEntry):
    """A directory of a set of concept domain bindings."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'ConceptDomainBindingListEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 146, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBindingListEntry_httpwww_omg_orgspecCTS21_1ConceptDomainBindingentry', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 153, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_conceptdomainbinding.addCategoryObject('typeBinding', u'ConceptDomainBindingListEntry', ConceptDomainBindingListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}AssociationReference with content type SIMPLE
class AssociationReference (NameAndMeaningReference):
    """a name or identifier that uniquely names an association instance in a code system"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'AssociationReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 896, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'AssociationReference', AssociationReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}OntologyEngineeringToolReference with content type SIMPLE
class OntologyEngineeringToolReference (NameAndMeaningReference):
    """a reference to a tool that can be used to create an ontology"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'OntologyEngineeringToolReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 904, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'OntologyEngineeringToolReference', OntologyEngineeringToolReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}OntologyEngineeringMethodologyReference with content type SIMPLE
class OntologyEngineeringMethodologyReference (NameAndMeaningReference):
    """a reference to a method model that can be used to create an ontology"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'OntologyEngineeringMethodologyReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 912, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'OntologyEngineeringMethodologyReference', OntologyEngineeringMethodologyReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}BindingQualifierReference with content type SIMPLE
class BindingQualifierReference (NameAndMeaningReference):
    """a reference to an entity that describes the role that a given value set binding plays for a concept domain. Typical values represent "overall", "minimum" or "maximum", the significance of which can be found in
				HL7 Version 3 documentation."""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'BindingQualifierReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 943, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'BindingQualifierReference', BindingQualifierReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}FormalityLevelReference with content type SIMPLE
class FormalityLevelReference (NameAndMeaningReference):
    """a reference to a description of the relative formality an ontology"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'FormalityLevelReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 953, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'FormalityLevelReference', FormalityLevelReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}CaseSignificanceReference with content type SIMPLE
class CaseSignificanceReference (NameAndMeaningReference):
    """a reference to an entity that describes significance of the case in term or designation"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'CaseSignificanceReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 961, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'CaseSignificanceReference', CaseSignificanceReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}CodeSystemCategoryReference with content type SIMPLE
class CodeSystemCategoryReference (NameAndMeaningReference):
    """a reference to information about a paradigm model used to create an ontology (aka. knowledge representation paradigm"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'CodeSystemCategoryReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 970, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'CodeSystemCategoryReference', CodeSystemCategoryReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}CodeSystemReference with content type SIMPLE
class CodeSystemReference (NameAndMeaningReference):
    """a reference to a code system or ontology"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'CodeSystemReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 979, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'CodeSystemReference', CodeSystemReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ConceptDomainReference with content type SIMPLE
class ConceptDomainReference (NameAndMeaningReference):
    """a reference to a concept domain"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ConceptDomainReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1002, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'ConceptDomainReference', ConceptDomainReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ContextReference with content type SIMPLE
class ContextReference (NameAndMeaningReference):
    """a reference to a realm or context"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ContextReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1011, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'ContextReference', ContextReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}DesignationFidelityReference with content type SIMPLE
class DesignationFidelityReference (NameAndMeaningReference):
    """a reference to a description about designation faithfulness or accuracy"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'DesignationFidelityReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1020, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'DesignationFidelityReference', DesignationFidelityReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}DesignationTypeReference with content type SIMPLE
class DesignationTypeReference (NameAndMeaningReference):
    """a reference to a designation type or form such as "short name", "abbreviation", "eponym" """
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'DesignationTypeReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1029, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'DesignationTypeReference', DesignationTypeReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}FormatReference with content type SIMPLE
class FormatReference (NameAndMeaningReference):
    """a reference to a particular way that information is encoded for storage or transmission"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'FormatReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1038, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'FormatReference', FormatReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}LanguageReference with content type SIMPLE
class LanguageReference (NameAndMeaningReference):
    """a reference to a spoken or written human language"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'LanguageReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1047, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'LanguageReference', LanguageReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}MapReference with content type SIMPLE
class MapReference (NameAndMeaningReference):
    """a reference to an abstract map"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'MapReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1056, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'MapReference', MapReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}MapCorrelationReference with content type SIMPLE
class MapCorrelationReference (NameAndMeaningReference):
    """a reference to a way that the source and target in a map can be related or assessed"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'MapCorrelationReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1079, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'MapCorrelationReference', MapCorrelationReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}MatchAlgorithmReference with content type SIMPLE
class MatchAlgorithmReference (NameAndMeaningReference):
    """a reference to an algorithm used for selecting and filtering data"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'MatchAlgorithmReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1088, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'MatchAlgorithmReference', MatchAlgorithmReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ModelAttributeReference with content type SIMPLE
class ModelAttributeReference (NameAndMeaningReference):
    """a reference to an attribute defined in the CTS specification"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ModelAttributeReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1097, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'ModelAttributeReference', ModelAttributeReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}NamespaceReference with content type SIMPLE
class NamespaceReference (NameAndMeaningReference):
    """a reference to a conceptual space that groups identifiers to avoid conflict with items that have the same name but different meanings"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'NamespaceReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1106, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'NamespaceReference', NamespaceReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}OntologyDomainReference with content type SIMPLE
class OntologyDomainReference (NameAndMeaningReference):
    """a reference to a subject domain for an ontology"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'OntologyDomainReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1115, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'OntologyDomainReference', OntologyDomainReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}OntologyLanguageReference with content type SIMPLE
class OntologyLanguageReference (NameAndMeaningReference):
    """a reference to a language in which an ontology may be implemented"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'OntologyLanguageReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1124, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'OntologyLanguageReference', OntologyLanguageReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}OntologySyntaxReference with content type SIMPLE
class OntologySyntaxReference (NameAndMeaningReference):
    """a reference to a syntax in which an ontology may be represented"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'OntologySyntaxReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1133, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'OntologySyntaxReference', OntologySyntaxReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}OntologyTaskReference with content type SIMPLE
class OntologyTaskReference (NameAndMeaningReference):
    """a reference to a purpose for which an ontology can be designed"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'OntologyTaskReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1142, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'OntologyTaskReference', OntologyTaskReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}OntologyTypeReference with content type SIMPLE
class OntologyTypeReference (NameAndMeaningReference):
    """a reference to the nature of the content of an ontology"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'OntologyTypeReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1151, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'OntologyTypeReference', OntologyTypeReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}PredicateReference with content type ELEMENT_ONLY
class PredicateReference (URIAndEntityName):
    """An  that serves the role of predicate. Note that this varies slightly from the base class of  because the  attribute is a namespace/name
				combination rather than a simple name scoped exclusively by the domain."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'PredicateReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1160, 1)
    _ElementMap = URIAndEntityName._ElementMap.copy()
    _AttributeMap = URIAndEntityName._AttributeMap.copy()
    # Base type is URIAndEntityName
    
    # Element namespace ({http://www.omg.org/spec/CTS2/1.1/Core}namespace) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}URIAndEntityName
    
    # Element name ({http://www.omg.org/spec/CTS2/1.1/Core}name) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}URIAndEntityName
    
    # Element designation ({http://www.omg.org/spec/CTS2/1.1/Core}designation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}URIAndEntityName
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}URIAndEntityName
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}URIAndEntityName
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'PredicateReference', PredicateReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ReasoningAlgorithmReference with content type SIMPLE
class ReasoningAlgorithmReference (NameAndMeaningReference):
    """a reference to a formal algorithm for making inferences about an ontology"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ReasoningAlgorithmReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1170, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'ReasoningAlgorithmReference', ReasoningAlgorithmReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}RoleReference with content type SIMPLE
class RoleReference (NameAndMeaningReference):
    """a reference to a role that an individual, organization or bibliographic reference can play in the construction of a resource or resource component"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'RoleReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1179, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'RoleReference', RoleReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}SourceReference with content type SIMPLE
class SourceReference (NameAndMeaningReference):
    """a reference to an individual, organization of bibliographic reference"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'SourceReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1188, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'SourceReference', SourceReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}StatusReference with content type SIMPLE
class StatusReference (NameAndMeaningReference):
    """a reference to a state in an external ontology authoring workflow"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'StatusReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1216, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'StatusReference', StatusReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ValueSetReference with content type SIMPLE
class ValueSetReference (NameAndMeaningReference):
    """a reference to a named set of entity references"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ValueSetReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1225, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'ValueSetReference', ValueSetReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}VersionTagReference with content type SIMPLE
class VersionTagReference (NameAndMeaningReference):
    """a reference to a tag that can be assigned to versionable resources within the context of a service implementation"""
    _TypeDefinition = String
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'VersionTagReference')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1248, 1)
    _ElementMap = NameAndMeaningReference._ElementMap.copy()
    _AttributeMap = NameAndMeaningReference._AttributeMap.copy()
    # Base type is NameAndMeaningReference
    
    # Attribute uri inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}NameAndMeaningReference
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'VersionTagReference', VersionTagReference)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}Definition with content type ELEMENT_ONLY
class Definition (Note):
    """Text or other representation that is intended to communicate the intended meaning of the associated entity to a human being. While this is intended to be very close in meaning to , its intent is slightly different in that the CTS specification does not treat  as a subproperty of  -
				rather it views comments, examples and definitions as separate entities."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Definition')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1499, 1)
    _ElementMap = Note._ElementMap.copy()
    _AttributeMap = Note._AttributeMap.copy()
    # Base type is Note
    
    # Element value_ ({http://www.omg.org/spec/CTS2/1.1/Core}value) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element format ({http://www.omg.org/spec/CTS2/1.1/Core}format) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element language ({http://www.omg.org/spec/CTS2/1.1/Core}language) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element schema ({http://www.omg.org/spec/CTS2/1.1/Core}schema) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}usageContext uses Python identifier usageContext
    __usageContext = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'usageContext'), 'usageContext', '__httpwww_omg_orgspecCTS21_1Core_Definition_httpwww_omg_orgspecCTS21_1CoreusageContext', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1508, 5), )

    
    usageContext = property(__usageContext.value, __usageContext.set, None, u'the context(s) in which the definition is considered applicable')

    
    # Attribute assertedInCodeSystemVersion inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Note
    
    # Attribute correspondingStatement inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Note
    
    # Attribute externalIdentifier inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Note
    
    # Attribute definitionRole uses Python identifier definitionRole
    __definitionRole = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'definitionRole'), 'definitionRole', '__httpwww_omg_orgspecCTS21_1Core_Definition_definitionRole', DefinitionRole, unicode_default=u'NORMATIVE')
    __definitionRole._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1514, 4)
    __definitionRole._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1514, 4)
    
    definitionRole = property(__definitionRole.value, __definitionRole.set, None, u'the role that the definition plays with respect to the defined entity')

    _ElementMap.update({
        __usageContext.name() : __usageContext
    })
    _AttributeMap.update({
        __definitionRole.name() : __definitionRole
    })
_Namespace_core.addCategoryObject('typeBinding', u'Definition', Definition)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}Example with content type ELEMENT_ONLY
class Example (Note):
    """An example. See: """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Example')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1523, 1)
    _ElementMap = Note._ElementMap.copy()
    _AttributeMap = Note._AttributeMap.copy()
    # Base type is Note
    
    # Element value_ ({http://www.omg.org/spec/CTS2/1.1/Core}value) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element format ({http://www.omg.org/spec/CTS2/1.1/Core}format) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element language ({http://www.omg.org/spec/CTS2/1.1/Core}language) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element schema ({http://www.omg.org/spec/CTS2/1.1/Core}schema) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Attribute assertedInCodeSystemVersion inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Note
    
    # Attribute correspondingStatement inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Note
    
    # Attribute externalIdentifier inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Note
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'Example', Example)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}Comment with content type ELEMENT_ONLY
class Comment (Note):
    """A  about the history, scope or provenance of the containing element.  is differentiated from  and  specifically because it is frequently searched and
				displayed under different circumstances and usage contexts.  and  are frequently made available to the end users of a code system while s are typically consumed by authors and
				editors."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'Comment')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1533, 1)
    _ElementMap = Note._ElementMap.copy()
    _AttributeMap = Note._AttributeMap.copy()
    # Base type is Note
    
    # Element value_ ({http://www.omg.org/spec/CTS2/1.1/Core}value) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element format ({http://www.omg.org/spec/CTS2/1.1/Core}format) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element language ({http://www.omg.org/spec/CTS2/1.1/Core}language) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Element schema ({http://www.omg.org/spec/CTS2/1.1/Core}schema) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}OpaqueData
    
    # Attribute assertedInCodeSystemVersion inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Note
    
    # Attribute correspondingStatement inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Note
    
    # Attribute externalIdentifier inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Note
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'type'), 'type', '__httpwww_omg_orgspecCTS21_1Core_Comment_type', NoteType)
    __type._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1541, 4)
    __type._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1541, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type
    })
_Namespace_core.addCategoryObject('typeBinding', u'Comment', Comment)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry with content type ELEMENT_ONLY
class ResourceDescriptionDirectoryEntry (DirectoryEntry):
    """
				that identifies the elements of a resource description that appear in every directory of resources of a particular type. is an abstract type and is realized in
				the implementing subtypes listed in """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ResourceDescriptionDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1759, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis uses Python identifier resourceSynopsis
    __resourceSynopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis'), 'resourceSynopsis', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescriptionDirectoryEntry_httpwww_omg_orgspecCTS21_1CoreresourceSynopsis', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5), )

    
    resourceSynopsis = property(__resourceSynopsis.value, __resourceSynopsis.set, None, u'a textual summary of the resource - what it is, what it is for, etc.')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute about uses Python identifier about
    __about = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'about'), 'about', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescriptionDirectoryEntry_about', ExternalURI, required=True)
    __about._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1775, 4)
    __about._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1775, 4)
    
    about = property(__about.value, __about.set, None, u'the (or a) definitive URI that represents the resource being described. ')

    
    # Attribute formalName uses Python identifier formalName
    __formalName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'formalName'), 'formalName', '__httpwww_omg_orgspecCTS21_1Core_ResourceDescriptionDirectoryEntry_formalName', String)
    __formalName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1781, 4)
    __formalName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1781, 4)
    
    formalName = property(__formalName.value, __formalName.set, None, u'the formal or officially assigned name of this resource')

    _ElementMap.update({
        __resourceSynopsis.name() : __resourceSynopsis
    })
    _AttributeMap.update({
        __about.name() : __about,
        __formalName.name() : __formalName
    })
_Namespace_core.addCategoryObject('typeBinding', u'ResourceDescriptionDirectoryEntry', ResourceDescriptionDirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}AbstractResourceDescription with content type ELEMENT_ONLY
class AbstractResourceDescription (ResourceDescription):
    """the description of the characteristics of a resource that are independent of the resource content"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'AbstractResourceDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1832, 1)
    _ElementMap = ResourceDescription._ElementMap.copy()
    _AttributeMap = ResourceDescription._AttributeMap.copy()
    # Base type is ResourceDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element keyword ({http://www.omg.org/spec/CTS2/1.1/Core}keyword) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceType ({http://www.omg.org/spec/CTS2/1.1/Core}resourceType) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element additionalDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}additionalDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndRole ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndRole) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element rights ({http://www.omg.org/spec/CTS2/1.1/Core}rights) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Core}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Core}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element alternateID ({http://www.omg.org/spec/CTS2/1.1/Core}alternateID) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Core}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}releaseDocumentation uses Python identifier releaseDocumentation
    __releaseDocumentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseDocumentation'), 'releaseDocumentation', '__httpwww_omg_orgspecCTS21_1Core_AbstractResourceDescription_httpwww_omg_orgspecCTS21_1CorereleaseDocumentation', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5), )

    
    releaseDocumentation = property(__releaseDocumentation.value, __releaseDocumentation.set, None, u'documentation about the frequency and natureof releases (version) of this resource.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}releaseFormat uses Python identifier releaseFormat
    __releaseFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseFormat'), 'releaseFormat', '__httpwww_omg_orgspecCTS21_1Core_AbstractResourceDescription_httpwww_omg_orgspecCTS21_1CorereleaseFormat', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5), )

    
    releaseFormat = property(__releaseFormat.value, __releaseFormat.set, None, u'a format and notation that thereleases (versions) of this resource are published in')

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    _ElementMap.update({
        __releaseDocumentation.name() : __releaseDocumentation,
        __releaseFormat.name() : __releaseFormat
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'AbstractResourceDescription', AbstractResourceDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription with content type ELEMENT_ONLY
class ResourceVersionDescription (ResourceDescription):
    """information about the source, format, release date, version identifier, etc. of a specific version of an abstract resource"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ResourceVersionDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1858, 1)
    _ElementMap = ResourceDescription._ElementMap.copy()
    _AttributeMap = ResourceDescription._AttributeMap.copy()
    # Base type is ResourceDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element keyword ({http://www.omg.org/spec/CTS2/1.1/Core}keyword) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceType ({http://www.omg.org/spec/CTS2/1.1/Core}resourceType) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element additionalDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}additionalDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndRole ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndRole) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element rights ({http://www.omg.org/spec/CTS2/1.1/Core}rights) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Core}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Core}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element alternateID ({http://www.omg.org/spec/CTS2/1.1/Core}alternateID) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Core}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}sourceAndNotation uses Python identifier sourceAndNotation
    __sourceAndNotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndNotation'), 'sourceAndNotation', '__httpwww_omg_orgspecCTS21_1Core_ResourceVersionDescription_httpwww_omg_orgspecCTS21_1CoresourceAndNotation', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1865, 5), )

    
    sourceAndNotation = property(__sourceAndNotation.value, __sourceAndNotation.set, None, u'a description of where the (or a) source of the version may be found, what format and language it is available in, etc. ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}predecessor uses Python identifier predecessor
    __predecessor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'predecessor'), 'predecessor', '__httpwww_omg_orgspecCTS21_1Core_ResourceVersionDescription_httpwww_omg_orgspecCTS21_1Corepredecessor', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1870, 5), )

    
    predecessor = property(__predecessor.value, __predecessor.set, None, u'a reference to the name and URI version of the resource from which this current version is derived - the version of the resource that immediately preceded it')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}officialResourceVersionId uses Python identifier officialResourceVersionId
    __officialResourceVersionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId'), 'officialResourceVersionId', '__httpwww_omg_orgspecCTS21_1Core_ResourceVersionDescription_httpwww_omg_orgspecCTS21_1CoreofficialResourceVersionId', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1875, 5), )

    
    officialResourceVersionId = property(__officialResourceVersionId.value, __officialResourceVersionId.set, None, u'an official label or identifier that was assigned to this version by its publisher')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}officialReleaseDate uses Python identifier officialReleaseDate
    __officialReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate'), 'officialReleaseDate', '__httpwww_omg_orgspecCTS21_1Core_ResourceVersionDescription_httpwww_omg_orgspecCTS21_1CoreofficialReleaseDate', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1880, 5), )

    
    officialReleaseDate = property(__officialReleaseDate.value, __officialReleaseDate.set, None, u'the date that this version of the resource officially became available')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}officialActivationDate uses Python identifier officialActivationDate
    __officialActivationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'officialActivationDate'), 'officialActivationDate', '__httpwww_omg_orgspecCTS21_1Core_ResourceVersionDescription_httpwww_omg_orgspecCTS21_1CoreofficialActivationDate', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1885, 5), )

    
    officialActivationDate = property(__officialActivationDate.value, __officialActivationDate.set, None, u'the date that this version of the resource is stated by its publishers to go into effect')

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute documentURI uses Python identifier documentURI
    __documentURI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'documentURI'), 'documentURI', '__httpwww_omg_orgspecCTS21_1Core_ResourceVersionDescription_documentURI', DocumentURI)
    __documentURI._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1891, 4)
    __documentURI._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1891, 4)
    
    documentURI = property(__documentURI.value, __documentURI.set, None, u'a URI that identifies the specific version, language and notation of the  resource. This URI needs to be constructed in such a way that, if necessary, it will be possible to\n\t\t\t\t\t\t\tdifferentiate resource versions that were loaded from different document syntaxes. As an example, if an image of a the wine ontology was loaded from a resource that was in Manchester Syntax, it should be given a\n\t\t\t\t\t\t\tdifferent URI than the image loaded from the RDF/XML syntax. The reasoning behind this is, even in cases where different syntaxes are 100% compatible the transformation into the CTS model may not be\n\t\t\t\t\t\t\tidentical.')

    
    # Attribute state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'state'), 'state', '__httpwww_omg_orgspecCTS21_1Core_ResourceVersionDescription_state', FinalizableState, unicode_default=u'FINAL')
    __state._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1899, 4)
    __state._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1899, 4)
    
    state = property(__state.value, __state.set, None, None)

    _ElementMap.update({
        __sourceAndNotation.name() : __sourceAndNotation,
        __predecessor.name() : __predecessor,
        __officialResourceVersionId.name() : __officialResourceVersionId,
        __officialReleaseDate.name() : __officialReleaseDate,
        __officialActivationDate.name() : __officialActivationDate
    })
    _AttributeMap.update({
        __documentURI.name() : __documentURI,
        __state.name() : __state
    })
_Namespace_core.addCategoryObject('typeBinding', u'ResourceVersionDescription', ResourceVersionDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}ClassDescription with content type ELEMENT_ONLY
class ClassDescription (NamedEntityDescription):
    """the description of an entity that is a Class, Type or "Concept". ."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'ClassDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 299, 1)
    _ElementMap = NamedEntityDescription._ElementMap.copy()
    _AttributeMap = NamedEntityDescription._AttributeMap.copy()
    # Base type is NamedEntityDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element entityID ({http://www.omg.org/spec/CTS2/1.1/Entity}entityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element alternateEntityID ({http://www.omg.org/spec/CTS2/1.1/Entity}alternateEntityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element describingCodeSystemVersion ({http://www.omg.org/spec/CTS2/1.1/Entity}describingCodeSystemVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element designation ({http://www.omg.org/spec/CTS2/1.1/Entity}designation) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element definition ({http://www.omg.org/spec/CTS2/1.1/Entity}definition) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element example ({http://www.omg.org/spec/CTS2/1.1/Entity}example) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Entity}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Entity}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Entity}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element subjectOf ({http://www.omg.org/spec/CTS2/1.1/Entity}subjectOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element predicateOf ({http://www.omg.org/spec/CTS2/1.1/Entity}predicateOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element targetOf ({http://www.omg.org/spec/CTS2/1.1/Entity}targetOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parent ({http://www.omg.org/spec/CTS2/1.1/Entity}parent) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parents ({http://www.omg.org/spec/CTS2/1.1/Entity}parents) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element ancestors ({http://www.omg.org/spec/CTS2/1.1/Entity}ancestors) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element children ({http://www.omg.org/spec/CTS2/1.1/Entity}children) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element descendants ({http://www.omg.org/spec/CTS2/1.1/Entity}descendants) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element entityType ({http://www.omg.org/spec/CTS2/1.1/Entity}entityType) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element instances ({http://www.omg.org/spec/CTS2/1.1/Entity}instances) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element equivalentEntity ({http://www.omg.org/spec/CTS2/1.1/Entity}equivalentEntity) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute codeSystemRole inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute descriptionType uses Python identifier descriptionType
    __descriptionType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'descriptionType'), 'descriptionType', '__httpwww_omg_orgspecCTS21_1Entity_ClassDescription_descriptionType', ClassDescriptionType)
    __descriptionType._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 306, 4)
    __descriptionType._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 306, 4)
    
    descriptionType = property(__descriptionType.value, __descriptionType.set, None, u'the specific role that the class description plays, if known.')

    
    # Attribute descriptionState uses Python identifier descriptionState
    __descriptionState = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'descriptionState'), 'descriptionState', '__httpwww_omg_orgspecCTS21_1Entity_ClassDescription_descriptionState', ClassDescriptionState)
    __descriptionState._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 311, 4)
    __descriptionState._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 311, 4)
    
    descriptionState = property(__descriptionState.value, __descriptionState.set, None, u'an indicator that states whether the class description contains only necessary assertions  or is considered to be both necessary and sufficient assertions\n\t\t\t\t\t\t\t.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __descriptionType.name() : __descriptionType,
        __descriptionState.name() : __descriptionState
    })
_Namespace_entity.addCategoryObject('typeBinding', u'ClassDescription', ClassDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}NamedIndividualDescription with content type ELEMENT_ONLY
class NamedIndividualDescription (NamedEntityDescription):
    """a description of an individual that has identity"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'NamedIndividualDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 369, 1)
    _ElementMap = NamedEntityDescription._ElementMap.copy()
    _AttributeMap = NamedEntityDescription._AttributeMap.copy()
    # Base type is NamedEntityDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element entityID ({http://www.omg.org/spec/CTS2/1.1/Entity}entityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element alternateEntityID ({http://www.omg.org/spec/CTS2/1.1/Entity}alternateEntityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element describingCodeSystemVersion ({http://www.omg.org/spec/CTS2/1.1/Entity}describingCodeSystemVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element designation ({http://www.omg.org/spec/CTS2/1.1/Entity}designation) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element definition ({http://www.omg.org/spec/CTS2/1.1/Entity}definition) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element example ({http://www.omg.org/spec/CTS2/1.1/Entity}example) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Entity}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Entity}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Entity}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element subjectOf ({http://www.omg.org/spec/CTS2/1.1/Entity}subjectOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element predicateOf ({http://www.omg.org/spec/CTS2/1.1/Entity}predicateOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element targetOf ({http://www.omg.org/spec/CTS2/1.1/Entity}targetOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parent ({http://www.omg.org/spec/CTS2/1.1/Entity}parent) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parents ({http://www.omg.org/spec/CTS2/1.1/Entity}parents) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element ancestors ({http://www.omg.org/spec/CTS2/1.1/Entity}ancestors) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element children ({http://www.omg.org/spec/CTS2/1.1/Entity}children) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element descendants ({http://www.omg.org/spec/CTS2/1.1/Entity}descendants) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element entityType ({http://www.omg.org/spec/CTS2/1.1/Entity}entityType) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element instances ({http://www.omg.org/spec/CTS2/1.1/Entity}instances) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element equivalentEntity ({http://www.omg.org/spec/CTS2/1.1/Entity}equivalentEntity) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute codeSystemRole inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'NamedIndividualDescription', NamedIndividualDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}AnonymousIndividualDescription with content type ELEMENT_ONLY
class AnonymousIndividualDescription (NamedEntityDescription):
    """an "intensional" description of an individual that describes the individual by its characteristics without supplying its identity. As an example, the description "The sole occupant of 773 Main Street in Sioux
				City, South Dakota" would reference an anonymous individual."If an individual is not expected to be used outside a particular ontology, one can use an anonymous individual, which is identified by a local node ID rather than
				a global IRI. Anonymous individuals are analogous to blank nodes in RDF" """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'AnonymousIndividualDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 377, 1)
    _ElementMap = NamedEntityDescription._ElementMap.copy()
    _AttributeMap = NamedEntityDescription._AttributeMap.copy()
    # Base type is NamedEntityDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element entityID ({http://www.omg.org/spec/CTS2/1.1/Entity}entityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element alternateEntityID ({http://www.omg.org/spec/CTS2/1.1/Entity}alternateEntityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element describingCodeSystemVersion ({http://www.omg.org/spec/CTS2/1.1/Entity}describingCodeSystemVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element designation ({http://www.omg.org/spec/CTS2/1.1/Entity}designation) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element definition ({http://www.omg.org/spec/CTS2/1.1/Entity}definition) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element example ({http://www.omg.org/spec/CTS2/1.1/Entity}example) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Entity}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Entity}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Entity}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element subjectOf ({http://www.omg.org/spec/CTS2/1.1/Entity}subjectOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element predicateOf ({http://www.omg.org/spec/CTS2/1.1/Entity}predicateOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element targetOf ({http://www.omg.org/spec/CTS2/1.1/Entity}targetOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parent ({http://www.omg.org/spec/CTS2/1.1/Entity}parent) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parents ({http://www.omg.org/spec/CTS2/1.1/Entity}parents) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element ancestors ({http://www.omg.org/spec/CTS2/1.1/Entity}ancestors) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element children ({http://www.omg.org/spec/CTS2/1.1/Entity}children) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element descendants ({http://www.omg.org/spec/CTS2/1.1/Entity}descendants) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element entityType ({http://www.omg.org/spec/CTS2/1.1/Entity}entityType) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element instances ({http://www.omg.org/spec/CTS2/1.1/Entity}instances) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element equivalentEntity ({http://www.omg.org/spec/CTS2/1.1/Entity}equivalentEntity) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute codeSystemRole inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'AnonymousIndividualDescription', AnonymousIndividualDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}DataTypeDescription with content type ELEMENT_ONLY
class DataTypeDescription (AnonymousEntityDescription):
    """ahe description of a data type, which, in this context, represents a constraint on the set of possible values in a text or literal field. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'DataTypeDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 387, 1)
    _ElementMap = AnonymousEntityDescription._ElementMap.copy()
    _AttributeMap = AnonymousEntityDescription._AttributeMap.copy()
    # Base type is AnonymousEntityDescription
    
    # Element entityID ({http://www.omg.org/spec/CTS2/1.1/Entity}entityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element alternateEntityID ({http://www.omg.org/spec/CTS2/1.1/Entity}alternateEntityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element describingCodeSystemVersion ({http://www.omg.org/spec/CTS2/1.1/Entity}describingCodeSystemVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element designation ({http://www.omg.org/spec/CTS2/1.1/Entity}designation) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element definition ({http://www.omg.org/spec/CTS2/1.1/Entity}definition) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element example ({http://www.omg.org/spec/CTS2/1.1/Entity}example) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Entity}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Entity}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Entity}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element subjectOf ({http://www.omg.org/spec/CTS2/1.1/Entity}subjectOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element predicateOf ({http://www.omg.org/spec/CTS2/1.1/Entity}predicateOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element targetOf ({http://www.omg.org/spec/CTS2/1.1/Entity}targetOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parent ({http://www.omg.org/spec/CTS2/1.1/Entity}parent) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parents ({http://www.omg.org/spec/CTS2/1.1/Entity}parents) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element ancestors ({http://www.omg.org/spec/CTS2/1.1/Entity}ancestors) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element children ({http://www.omg.org/spec/CTS2/1.1/Entity}children) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element descendants ({http://www.omg.org/spec/CTS2/1.1/Entity}descendants) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element entityType ({http://www.omg.org/spec/CTS2/1.1/Entity}entityType) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element instances ({http://www.omg.org/spec/CTS2/1.1/Entity}instances) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element equivalentEntity ({http://www.omg.org/spec/CTS2/1.1/Entity}equivalentEntity) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute codeSystemRole inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'DataTypeDescription', DataTypeDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}PredicateDescription with content type ELEMENT_ONLY
class PredicateDescription (NamedEntityDescription):
    """ covers the spectrum of entities deemed "Role" in description logic, "Relation" in predicate logic, "Property" in RDF and OWL, and "Association" in Ontylog DL. It describes the nature
				and the purpose of the role, not the individual elements.Note that section 2.4.2.11 of the HL7 SFM calls for an attribute called "associationKind". While we are not absolutely certain what this was intended to represent, we
				believe that its intent is probably subsumed under the various individual types as well as the transitivity attribute.  and are called for in the SFM. The way that they are represented in
				this model lacks the ability to represent them in a multi-lingual environment which may cause difficulties down the line. Service implementers who are concerned about this aspect are encouraged to extend the service to allow
				forward and reverse Name to be returned in the language appropriate to the service viewer.The  attribute is actually more of a characteristic of the type of logic being used than the individual properties, but
				returning it as an attribute of a property seems sufficient.The HL7 SFM ruleSetId construct is not supported in this specification."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'PredicateDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 397, 1)
    _ElementMap = NamedEntityDescription._ElementMap.copy()
    _AttributeMap = NamedEntityDescription._AttributeMap.copy()
    # Base type is NamedEntityDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element entityID ({http://www.omg.org/spec/CTS2/1.1/Entity}entityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element alternateEntityID ({http://www.omg.org/spec/CTS2/1.1/Entity}alternateEntityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element describingCodeSystemVersion ({http://www.omg.org/spec/CTS2/1.1/Entity}describingCodeSystemVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element designation ({http://www.omg.org/spec/CTS2/1.1/Entity}designation) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element definition ({http://www.omg.org/spec/CTS2/1.1/Entity}definition) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element example ({http://www.omg.org/spec/CTS2/1.1/Entity}example) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Entity}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Entity}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Entity}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element subjectOf ({http://www.omg.org/spec/CTS2/1.1/Entity}subjectOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element predicateOf ({http://www.omg.org/spec/CTS2/1.1/Entity}predicateOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element targetOf ({http://www.omg.org/spec/CTS2/1.1/Entity}targetOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parent ({http://www.omg.org/spec/CTS2/1.1/Entity}parent) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parents ({http://www.omg.org/spec/CTS2/1.1/Entity}parents) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element ancestors ({http://www.omg.org/spec/CTS2/1.1/Entity}ancestors) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element children ({http://www.omg.org/spec/CTS2/1.1/Entity}children) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element descendants ({http://www.omg.org/spec/CTS2/1.1/Entity}descendants) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element entityType ({http://www.omg.org/spec/CTS2/1.1/Entity}entityType) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element instances ({http://www.omg.org/spec/CTS2/1.1/Entity}instances) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element equivalentEntity ({http://www.omg.org/spec/CTS2/1.1/Entity}equivalentEntity) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}forwardName uses Python identifier forwardName
    __forwardName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'forwardName'), 'forwardName', '__httpwww_omg_orgspecCTS21_1Entity_PredicateDescription_httpwww_omg_orgspecCTS21_1EntityforwardName', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 409, 5), )

    
    forwardName = property(__forwardName.value, __forwardName.set, None, u'the name assigned to the predicate when applied in the source to target direction. The primary purpose of this attribute is to provide some notion of "directional" semantics, as predicates named\n\t\t\t\t\t\t\t\t"part" or "broader term" often lack sufficient information to understand where the whole or broader component goes. Implementers will note that, as opposed to official designations,  and\n\t\t\t\t\t\t\t\t\t are not keyed by language. Implementers are encouraged to develop designations and use the  and  tags if a richer model is\n\t\t\t\t\t\t\t\tdesired.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}reverseName uses Python identifier reverseName
    __reverseName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'reverseName'), 'reverseName', '__httpwww_omg_orgspecCTS21_1Entity_PredicateDescription_httpwww_omg_orgspecCTS21_1EntityreverseName', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 417, 5), )

    
    reverseName = property(__reverseName.value, __reverseName.set, None, u'the name assigned to the predicate when applied in the target to source direction. The primary purpose of this attribute is to provide some notion of "directional" semantics, as predicates named\n\t\t\t\t\t\t\t\t"part" or "broader term" often lack sufficient information to understand where the whole or broader component goes. ')

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute codeSystemRole inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    _ElementMap.update({
        __forwardName.name() : __forwardName,
        __reverseName.name() : __reverseName
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'PredicateDescription', PredicateDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDirectory with content type ELEMENT_ONLY
class EntityDirectory_ (Directory):
    """a directory of  resources that meet a specified criteria"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityDirectory')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 549, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Entity_EntityDirectory__httpwww_omg_orgspecCTS21_1Entityentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 556, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'EntityDirectory', EntityDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}EntityList with content type ELEMENT_ONLY
class EntityList_ (Directory):
    """a collection of complete  resources that meet a specified criteria"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityList')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 577, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Entity_EntityList__httpwww_omg_orgspecCTS21_1Entityentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 584, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'EntityList', EntityList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}EntityListEntry with content type ELEMENT_ONLY
class EntityListEntry (DirectoryEntry):
    """An instance of  that meets a specified filter criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityListEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 590, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Entity}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_entity, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Entity_EntityListEntry_httpwww_omg_orgspecCTS21_1Entityentry', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 597, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'EntityListEntry', EntityListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapCatalog}MapCatalogEntryDirectory with content type ELEMENT_ONLY
class MapCatalogEntryDirectory_ (Directory):
    """A directory summarizing all or some of the  known to the service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_map, u'MapCatalogEntryDirectory')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 92, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntryDirectory__httpwww_omg_orgspecCTS21_1MapCatalogentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 99, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_map.addCategoryObject('typeBinding', u'MapCatalogEntryDirectory', MapCatalogEntryDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapCatalog}MapCatalogEntryList with content type ELEMENT_ONLY
class MapCatalogEntryList_ (Directory):
    """A collection of complete resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_map, u'MapCatalogEntryList')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 148, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntryList__httpwww_omg_orgspecCTS21_1MapCatalogentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 155, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_map.addCategoryObject('typeBinding', u'MapCatalogEntryList', MapCatalogEntryList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapCatalog}MapCatalogEntryListEntry with content type ELEMENT_ONLY
class MapCatalogEntryListEntry (DirectoryEntry):
    """A that meets a specified filter criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_map, u'MapCatalogEntryListEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 161, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntryListEntry_httpwww_omg_orgspecCTS21_1MapCatalogentry', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 168, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_map.addCategoryObject('typeBinding', u'MapCatalogEntryListEntry', MapCatalogEntryListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapVersionDirectory with content type ELEMENT_ONLY
class MapVersionDirectory_ (Directory):
    """A directory of  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapVersionDirectory')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 102, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersionDirectory__httpwww_omg_orgspecCTS21_1MapVersionentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 109, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapVersionDirectory', MapVersionDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapVersionList with content type ELEMENT_ONLY
class MapVersionList_ (Directory):
    """A collection of complete  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapVersionList')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 143, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersionList__httpwww_omg_orgspecCTS21_1MapVersionentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 150, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapVersionList', MapVersionList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapVersionListEntry with content type ELEMENT_ONLY
class MapVersionListEntry (DirectoryEntry):
    """An instance of  that meets a specified filter criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapVersionListEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 156, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersionListEntry_httpwww_omg_orgspecCTS21_1MapVersionentry', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 163, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapVersionListEntry', MapVersionListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapEntryDirectory with content type ELEMENT_ONLY
class MapEntryDirectory_ (Directory):
    """A directory of  that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapEntryDirectory')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 334, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntryDirectory__httpwww_omg_orgspecCTS21_1MapVersionentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 341, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapEntryDirectory', MapEntryDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapEntryDirectoryEntry with content type ELEMENT_ONLY
class MapEntryDirectoryEntry (DirectoryEntry):
    """A synopsis of a  along with information about how to access the complete resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapEntryDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 347, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}assertedBy uses Python identifier assertedBy
    __assertedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'assertedBy'), 'assertedBy', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntryDirectoryEntry_httpwww_omg_orgspecCTS21_1MapVersionassertedBy', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 354, 5), )

    
    assertedBy = property(__assertedBy.value, __assertedBy.set, None, u'a reference to the  that contains or asserts this entry')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}mapFrom uses Python identifier mapFrom
    __mapFrom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapFrom'), 'mapFrom', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntryDirectoryEntry_httpwww_omg_orgspecCTS21_1MapVersionmapFrom', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 359, 5), )

    
    mapFrom = property(__mapFrom.value, __mapFrom.set, None, u'the URI and name of the source entity for this entry.')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __assertedBy.name() : __assertedBy,
        __mapFrom.name() : __mapFrom
    })
    _AttributeMap.update({
        
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapEntryDirectoryEntry', MapEntryDirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapEntryList with content type ELEMENT_ONLY
class MapEntryList_ (Directory):
    """A collection of complete  that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapEntryList')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 370, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntryList__httpwww_omg_orgspecCTS21_1MapVersionentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 377, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapEntryList', MapEntryList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapEntryListEntry with content type ELEMENT_ONLY
class MapEntryListEntry (DirectoryEntry):
    """An instance of  that meets a specified filter criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapEntryListEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 383, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1MapVersion_MapEntryListEntry_httpwww_omg_orgspecCTS21_1MapVersionentry', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 390, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapEntryListEntry', MapEntryListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Statement}StatementDirectory with content type ELEMENT_ONLY
class StatementDirectory_ (Directory):
    """A directory of  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_stmt, u'StatementDirectory')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 115, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Statement_StatementDirectory__httpwww_omg_orgspecCTS21_1Statemententry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 122, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_stmt.addCategoryObject('typeBinding', u'StatementDirectory', StatementDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Statement}StatementDirectoryEntry with content type ELEMENT_ONLY
class StatementDirectoryEntry (Statement_):
    """A synopsis of a  along with information about how to access the complete resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_stmt, u'StatementDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 128, 1)
    _ElementMap = Statement_._ElementMap.copy()
    _AttributeMap = Statement_._AttributeMap.copy()
    # Base type is Statement_
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element statementURI ({http://www.omg.org/spec/CTS2/1.1/Statement}statementURI) inherited from {http://www.omg.org/spec/CTS2/1.1/Statement}Statement
    
    # Element subject ({http://www.omg.org/spec/CTS2/1.1/Statement}subject) inherited from {http://www.omg.org/spec/CTS2/1.1/Statement}Statement
    
    # Element predicate ({http://www.omg.org/spec/CTS2/1.1/Statement}predicate) inherited from {http://www.omg.org/spec/CTS2/1.1/Statement}Statement
    
    # Element target ({http://www.omg.org/spec/CTS2/1.1/Statement}target) inherited from {http://www.omg.org/spec/CTS2/1.1/Statement}Statement
    
    # Element associatedAttribute ({http://www.omg.org/spec/CTS2/1.1/Statement}associatedAttribute) inherited from {http://www.omg.org/spec/CTS2/1.1/Statement}Statement
    
    # Element source ({http://www.omg.org/spec/CTS2/1.1/Statement}source) inherited from {http://www.omg.org/spec/CTS2/1.1/Statement}Statement
    
    # Element assertedBy ({http://www.omg.org/spec/CTS2/1.1/Statement}assertedBy) inherited from {http://www.omg.org/spec/CTS2/1.1/Statement}Statement
    
    # Element assertedIn ({http://www.omg.org/spec/CTS2/1.1/Statement}assertedIn) inherited from {http://www.omg.org/spec/CTS2/1.1/Statement}Statement
    
    # Element qualifier ({http://www.omg.org/spec/CTS2/1.1/Statement}qualifier) inherited from {http://www.omg.org/spec/CTS2/1.1/Statement}Statement
    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute href uses Python identifier href
    __href = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'href'), 'href', '__httpwww_omg_orgspecCTS21_1Statement_StatementDirectoryEntry_href', RenderingURI)
    __href._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    __href._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 537, 2)
    
    href = property(__href.value, __href.set, None, u'a that resolves to the full resource described by the . This should be present if the service either (a) supports the  functional profile for the specified\n\t\t\t\t\t\tor (b) is aware of another service that does.')

    
    # Attribute resourceName uses Python identifier resourceName
    __resourceName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'resourceName'), 'resourceName', '__httpwww_omg_orgspecCTS21_1Statement_StatementDirectoryEntry_resourceName', LocalIdentifier)
    __resourceName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    __resourceName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 543, 2)
    
    resourceName = property(__resourceName.value, __resourceName.set, None, u'a local identifier that names a unique resource within the context of  and the service context. This attribute must be present if the corresponding element has a local name. Note, however, that\n\t\t\t\t\tsome elements (e.g. , , etc.) do not local names and are identified exclusively by their .')

    
    # Attribute matchStrength uses Python identifier matchStrength
    __matchStrength = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'matchStrength'), 'matchStrength', '__httpwww_omg_orgspecCTS21_1Statement_StatementDirectoryEntry_matchStrength', MatchStrength)
    __matchStrength._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    __matchStrength._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 549, 2)
    
    matchStrength = property(__matchStrength.value, __matchStrength.set, None, u'a relative measure of the "goodness of fit" of the directory entry within the context of the  in the containing ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __href.name() : __href,
        __resourceName.name() : __resourceName,
        __matchStrength.name() : __matchStrength
    })
_Namespace_stmt.addCategoryObject('typeBinding', u'StatementDirectoryEntry', StatementDirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Statement}StatementList with content type ELEMENT_ONLY
class StatementList_ (Directory):
    """A collection of complete resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_stmt, u'StatementList')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 141, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Statement_StatementList__httpwww_omg_orgspecCTS21_1Statemententry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 148, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_stmt.addCategoryObject('typeBinding', u'StatementList', StatementList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Statement}StatementListEntry with content type ELEMENT_ONLY
class StatementListEntry (DirectoryEntry):
    """An instance of that meets a specified filter criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_stmt, u'StatementListEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 154, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Statement}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Statement_StatementListEntry_httpwww_omg_orgspecCTS21_1Statemententry', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 161, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_stmt.addCategoryObject('typeBinding', u'StatementListEntry', StatementListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Updates}IteratableChangeSet with content type ELEMENT_ONLY
class IteratableChangeSet_ (Directory):
    """A change set whose contents is available as a set of directory entries that allows iteration."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace, u'IteratableChangeSet')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 92, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}creator uses Python identifier creator
    __creator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'creator'), 'creator', '__httpwww_omg_orgspecCTS21_1Updates_IteratableChangeSet__httpwww_omg_orgspecCTS21_1Corecreator', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3), )

    
    creator = property(__creator.value, __creator.set, None, u'the person or organization who initially created the change set')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}changeInstructions uses Python identifier changeInstructions
    __changeInstructions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'changeInstructions'), 'changeInstructions', '__httpwww_omg_orgspecCTS21_1Updates_IteratableChangeSet__httpwww_omg_orgspecCTS21_1CorechangeInstructions', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3), )

    
    changeInstructions = property(__changeInstructions.value, __changeInstructions.set, None, u'documentation and instructions about the purpose and application of the change set')

    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Updates}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1Updates_IteratableChangeSet__httpwww_omg_orgspecCTS21_1Updatesentry', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 100, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute changeSetURI uses Python identifier changeSetURI
    __changeSetURI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'changeSetURI'), 'changeSetURI', '__httpwww_omg_orgspecCTS21_1Updates_IteratableChangeSet__changeSetURI', ChangeSetURI, required=True)
    __changeSetURI._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 416, 2)
    __changeSetURI._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 416, 2)
    
    changeSetURI = property(__changeSetURI.value, __changeSetURI.set, None, u'a globally unique identifier that signifies this particular change set')

    
    # Attribute creationDate uses Python identifier creationDate
    __creationDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'creationDate'), 'creationDate', '__httpwww_omg_orgspecCTS21_1Updates_IteratableChangeSet__creationDate', DateAndTime, required=True)
    __creationDate._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 421, 2)
    __creationDate._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 421, 2)
    
    creationDate = property(__creationDate.value, __creationDate.set, None, u'the date and time that the change set was initially created')

    
    # Attribute officialEffectiveDate uses Python identifier officialEffectiveDate
    __officialEffectiveDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'officialEffectiveDate'), 'officialEffectiveDate', '__httpwww_omg_orgspecCTS21_1Updates_IteratableChangeSet__officialEffectiveDate', DateAndTime)
    __officialEffectiveDate._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 426, 2)
    __officialEffectiveDate._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 426, 2)
    
    officialEffectiveDate = property(__officialEffectiveDate.value, __officialEffectiveDate.set, None, u'the date and time that this set of changes became (or should become) effective . This parameter enables history queries from both the perspective of the service\n\t\t\t\t\t("What did the service return on July 1") and the perspective of the resource author ("What would the state of the terminology have been on July 1 had it been loaded prior to that date and not been locally modified?").\n\t\t\t\t')

    
    # Attribute closeDate uses Python identifier closeDate
    __closeDate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'closeDate'), 'closeDate', '__httpwww_omg_orgspecCTS21_1Updates_IteratableChangeSet__closeDate', DateAndTime)
    __closeDate._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 433, 2)
    __closeDate._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 433, 2)
    
    closeDate = property(__closeDate.value, __closeDate.set, None, u'the date and time that this change set was finalized ( = ). Once finalized, a change set cannot be further modified.')

    
    # Attribute entryCount uses Python identifier entryCount
    __entryCount = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'entryCount'), 'entryCount', '__httpwww_omg_orgspecCTS21_1Updates_IteratableChangeSet__entryCount', NaturalNumber)
    __entryCount._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 438, 2)
    __entryCount._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 438, 2)
    
    entryCount = property(__entryCount.value, __entryCount.set, None, u'the number of  members in the set')

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'state'), 'state', '__httpwww_omg_orgspecCTS21_1Updates_IteratableChangeSet__state', FinalizableState, unicode_default=u'FINAL')
    __state._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 103, 4)
    __state._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 103, 4)
    
    state = property(__state.value, __state.set, None, None)

    _ElementMap.update({
        __creator.name() : __creator,
        __changeInstructions.name() : __changeInstructions,
        __entry.name() : __entry
    })
    _AttributeMap.update({
        __changeSetURI.name() : __changeSetURI,
        __creationDate.name() : __creationDate,
        __officialEffectiveDate.name() : __officialEffectiveDate,
        __closeDate.name() : __closeDate,
        __entryCount.name() : __entryCount,
        __state.name() : __state
    })
_Namespace.addCategoryObject('typeBinding', u'IteratableChangeSet', IteratableChangeSet_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSet}ValueSetCatalogEntryDirectory with content type ELEMENT_ONLY
class ValueSetCatalogEntryDirectory_ (Directory):
    """A catalog that summarizes a set of value sets known to the service."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valueset, u'ValueSetCatalogEntryDirectory')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 69, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSet}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valueset, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ValueSet_ValueSetCatalogEntryDirectory__httpwww_omg_orgspecCTS21_1ValueSetentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 76, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_valueset.addCategoryObject('typeBinding', u'ValueSetCatalogEntryDirectory', ValueSetCatalogEntryDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSet}ValueSetCatalogEntryList with content type ELEMENT_ONLY
class ValueSetCatalogEntryList_ (Directory):
    """An iterable collection of """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valueset, u'ValueSetCatalogEntryList')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 105, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSet}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valueset, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ValueSet_ValueSetCatalogEntryList__httpwww_omg_orgspecCTS21_1ValueSetentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 112, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_valueset.addCategoryObject('typeBinding', u'ValueSetCatalogEntryList', ValueSetCatalogEntryList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSet}ValueSetCatalogEntryListEntry with content type ELEMENT_ONLY
class ValueSetCatalogEntryListEntry (DirectoryEntry):
    """A as it appears in a directory listing."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valueset, u'ValueSetCatalogEntryListEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 118, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSet}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valueset, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ValueSet_ValueSetCatalogEntryListEntry_httpwww_omg_orgspecCTS21_1ValueSetentry', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 125, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_valueset.addCategoryObject('typeBinding', u'ValueSetCatalogEntryListEntry', ValueSetCatalogEntryListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ValueSetDefinitionDirectory with content type ELEMENT_ONLY
class ValueSetDefinitionDirectory_ (Directory):
    """A directory of  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinitionDirectory')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 304, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionDirectory__httpwww_omg_orgspecCTS21_1ValueSetDefinitionentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 311, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ValueSetDefinitionDirectory', ValueSetDefinitionDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ValueSetDefinitionList with content type ELEMENT_ONLY
class ValueSetDefinitionList_ (Directory):
    """A collection of complete  resources that meet a specified criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinitionList')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 341, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionList__httpwww_omg_orgspecCTS21_1ValueSetDefinitionentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 348, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ValueSetDefinitionList', ValueSetDefinitionList_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ValueSetDefinitionListEntry with content type ELEMENT_ONLY
class ValueSetDefinitionListEntry (DirectoryEntry):
    """An instance of that meets a specified filter criteria."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinitionListEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 354, 1)
    _ElementMap = DirectoryEntry._ElementMap.copy()
    _AttributeMap = DirectoryEntry._AttributeMap.copy()
    # Base type is DirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionListEntry_httpwww_omg_orgspecCTS21_1ValueSetDefinitionentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 361, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ValueSetDefinitionListEntry', ValueSetDefinitionListEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}IteratableResolvedValueSet with content type ELEMENT_ONLY
class IteratableResolvedValueSet_ (Directory):
    """A ResolvedValueSet whose contents are available as a set of directory entries that allows iteration."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'IteratableResolvedValueSet')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 428, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}resolutionInfo uses Python identifier resolutionInfo
    __resolutionInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolutionInfo'), 'resolutionInfo', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_IteratableResolvedValueSet__httpwww_omg_orgspecCTS21_1ValueSetDefinitionresolutionInfo', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 435, 5), )

    
    resolutionInfo = property(__resolutionInfo.value, __resolutionInfo.set, None, u'the set of parameters that were used in the resolution of this set.  provides all the information necessary to recreate the actual  when presented to a\n\t\t\t\t\t\t\t\t\tCTS service instance that contains all of the necessary definitions and code system versions.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_IteratableResolvedValueSet__httpwww_omg_orgspecCTS21_1ValueSetDefinitionentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 441, 5), )

    
    entry = property(__entry.value, __entry.set, None, u'a synopsis of the  that has been determined to be a member of the value set named in  according to the stated criteria or "bindings"')

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __resolutionInfo.name() : __resolutionInfo,
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'IteratableResolvedValueSet', IteratableResolvedValueSet_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ResolvedValueSetDirectory with content type ELEMENT_ONLY
class ResolvedValueSetDirectory_ (Directory):
    """A directory of resolved value sets."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ResolvedValueSetDirectory')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 460, 1)
    _ElementMap = Directory._ElementMap.copy()
    _AttributeMap = Directory._AttributeMap.copy()
    # Base type is Directory
    
    # Element directoryFilter ({http://www.omg.org/spec/CTS2/1.1/Core}directoryFilter) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element sortCriteria ({http://www.omg.org/spec/CTS2/1.1/Core}sortCriteria) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Element heading ({http://www.omg.org/spec/CTS2/1.1/Core}heading) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Message
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ResolvedValueSetDirectory__httpwww_omg_orgspecCTS21_1ValueSetDefinitionentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 467, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute complete inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute numEntries inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute prev inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    
    # Attribute next inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Directory
    _ElementMap.update({
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ResolvedValueSetDirectory', ResolvedValueSetDirectory_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Association}GraphNode with content type ELEMENT_ONLY
class GraphNode (AssociationDirectoryEntry):
    """The summary of an association as represented in a flattened graph structure. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_association, u'GraphNode')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 312, 1)
    _ElementMap = AssociationDirectoryEntry._ElementMap.copy()
    _AttributeMap = AssociationDirectoryEntry._AttributeMap.copy()
    # Base type is AssociationDirectoryEntry
    
    # Element subject ({http://www.omg.org/spec/CTS2/1.1/Association}subject) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}AssociationDirectoryEntry
    
    # Element predicate ({http://www.omg.org/spec/CTS2/1.1/Association}predicate) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}AssociationDirectoryEntry
    
    # Element target ({http://www.omg.org/spec/CTS2/1.1/Association}target) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}AssociationDirectoryEntry
    
    # Element assertedBy ({http://www.omg.org/spec/CTS2/1.1/Association}assertedBy) inherited from {http://www.omg.org/spec/CTS2/1.1/Association}AssociationDirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Association}nodeEntity uses Python identifier nodeEntity
    __nodeEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_association, u'nodeEntity'), 'nodeEntity', '__httpwww_omg_orgspecCTS21_1Association_GraphNode_httpwww_omg_orgspecCTS21_1AssociationnodeEntity', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 319, 5), )

    
    nodeEntity = property(__nodeEntity.value, __nodeEntity.set, None, u'the URI, name and a designation for the  represented by this node.  represents the association  when  is\n\t\t\t\t\t\t\t\t\t and (one of the) targets when  is ')

    
    # Attribute associationID inherited from {http://www.omg.org/spec/CTS2/1.1/Association}AssociationDirectoryEntry
    
    # Attribute localID inherited from {http://www.omg.org/spec/CTS2/1.1/Association}AssociationDirectoryEntry
    
    # Attribute derivation inherited from {http://www.omg.org/spec/CTS2/1.1/Association}AssociationDirectoryEntry
    
    # Attribute nodeNumber uses Python identifier nodeNumber
    __nodeNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nodeNumber'), 'nodeNumber', '__httpwww_omg_orgspecCTS21_1Association_GraphNode_nodeNumber', NaturalNumber, required=True)
    __nodeNumber._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 326, 4)
    __nodeNumber._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 326, 4)
    
    nodeNumber = property(__nodeNumber.value, __nodeNumber.set, None, u'an integer that corresponds to the particular  in . Every instance of the same  will be represented by the same . There\n\t\t\t\t\t\t\twill be graph node for every combination in the association, with multiple GraphNodes being generated for  that are of type set or BNode.')

    
    # Attribute direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'direction'), 'direction', '__httpwww_omg_orgspecCTS21_1Association_GraphNode_direction', AssociationDirection, required=True)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 332, 4)
    __direction._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 332, 4)
    
    direction = property(__direction.value, __direction.set, None, u'an indicator whether  plays a source or a target role in the accompanying  instance')

    
    # Attribute nextNodeNumber uses Python identifier nextNodeNumber
    __nextNodeNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'nextNodeNumber'), 'nextNodeNumber', '__httpwww_omg_orgspecCTS21_1Association_GraphNode_nextNodeNumber', NaturalNumber)
    __nextNodeNumber._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 337, 4)
    __nextNodeNumber._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 337, 4)
    
    nextNodeNumber = property(__nextNodeNumber.value, __nextNodeNumber.set, None, u'an integer that represents the next graph node that is reached by traversing the specified  in the specified . This number will only be present if the result of\n\t\t\t\t\t\t\ttraversing  results in an . Target nodes of type  or  will not be assigned node numbers. Note that each  target of\n\t\t\t\t\t\t\ta nested BNODE will be represented by a different .')

    
    # Attribute depth uses Python identifier depth
    __depth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'depth'), 'depth', '__httpwww_omg_orgspecCTS21_1Association_GraphNode_depth', NaturalNumber)
    __depth._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 344, 4)
    __depth._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 344, 4)
    
    depth = property(__depth.value, __depth.set, None, u'The one based distance in hops between the nodeEntity and the graph focus.')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    _ElementMap.update({
        __nodeEntity.name() : __nodeEntity
    })
    _AttributeMap.update({
        __nodeNumber.name() : __nodeNumber,
        __direction.name() : __direction,
        __nextNodeNumber.name() : __nextNodeNumber,
        __depth.name() : __depth
    })
_Namespace_association.addCategoryObject('typeBinding', u'GraphNode', GraphNode)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystem}CodeSystemCatalogEntry with content type ELEMENT_ONLY
class CodeSystemCatalogEntry_ (AbstractResourceDescription):
    """Metadata and access information about a code system."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystem, u'CodeSystemCatalogEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 13, 1)
    _ElementMap = AbstractResourceDescription._ElementMap.copy()
    _AttributeMap = AbstractResourceDescription._AttributeMap.copy()
    # Base type is AbstractResourceDescription
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}codeSystemCategory uses Python identifier codeSystemCategory
    __codeSystemCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'codeSystemCategory'), 'codeSystemCategory', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemcodeSystemCategory', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 20, 5), )

    
    codeSystemCategory = property(__codeSystemCategory.value, __codeSystemCategory.set, None, u'the category or type of resource that the code system represents.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}ontologyDomain uses Python identifier ontologyDomain
    __ontologyDomain = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'ontologyDomain'), 'ontologyDomain', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemontologyDomain', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 25, 5), )

    
    ontologyDomain = property(__ontologyDomain.value, __ontologyDomain.set, None, u'the subject domain of the ontology')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}ontologyType uses Python identifier ontologyType
    __ontologyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'ontologyType'), 'ontologyType', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemontologyType', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 30, 5), )

    
    ontologyType = property(__ontologyType.value, __ontologyType.set, None, u'the nature of the content of the ontology')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}designedForOntologyTask uses Python identifier designedForOntologyTask
    __designedForOntologyTask = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'designedForOntologyTask'), 'designedForOntologyTask', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemdesignedForOntologyTask', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 35, 5), )

    
    designedForOntologyTask = property(__designedForOntologyTask.value, __designedForOntologyTask.set, None, u'the purpose for which the ontology was originally designed')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}hasOntologyLanguage uses Python identifier hasOntologyLanguage
    __hasOntologyLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'hasOntologyLanguage'), 'hasOntologyLanguage', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemhasOntologyLanguage', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 40, 5), )

    
    hasOntologyLanguage = property(__hasOntologyLanguage.value, __hasOntologyLanguage.set, None, u'the formal ontology language')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}includes uses Python identifier includes
    __includes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'includes'), 'includes', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemincludes', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 45, 5), )

    
    includes = property(__includes.value, __includes.set, None, u'a reference to an external code system that is included as a component of the referenced code system. The Wine Ontology,\n\t\t\t\t\t\t\t\tas an example, includes the Food Ontology as one of its components.  Similarly, the US Edition of SNOMED-CT includes the international edition.\t\t\t\t\t\n\t\t\t\t\t\t\t')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}versions uses Python identifier versions
    __versions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'versions'), 'versions', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemversions', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 52, 5), )

    
    versions = property(__versions.value, __versions.set, None, u'a  that references the known versions of this code system. ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}currentVersion uses Python identifier currentVersion
    __currentVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'currentVersion'), 'currentVersion', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemcurrentVersion', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 57, 5), )

    
    currentVersion = property(__currentVersion.value, __currentVersion.set, None, u'a reference to the code system version marked as  in the service instance.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}usedOntologyEngineeringTool uses Python identifier usedOntologyEngineeringTool
    __usedOntologyEngineeringTool = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'usedOntologyEngineeringTool'), 'usedOntologyEngineeringTool', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemusedOntologyEngineeringTool', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 62, 5), )

    
    usedOntologyEngineeringTool = property(__usedOntologyEngineeringTool.value, __usedOntologyEngineeringTool.set, None, u'information about a tool used to create the ontology')

    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element keyword ({http://www.omg.org/spec/CTS2/1.1/Core}keyword) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceType ({http://www.omg.org/spec/CTS2/1.1/Core}resourceType) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element additionalDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}additionalDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndRole ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndRole) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element rights ({http://www.omg.org/spec/CTS2/1.1/Core}rights) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Core}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Core}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element alternateID ({http://www.omg.org/spec/CTS2/1.1/Core}alternateID) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Core}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element releaseDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}releaseDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}AbstractResourceDescription
    
    # Element releaseFormat ({http://www.omg.org/spec/CTS2/1.1/Core}releaseFormat) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}AbstractResourceDescription
    
    # Attribute codeSystemName uses Python identifier codeSystemName
    __codeSystemName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSystemName'), 'codeSystemName', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntry__codeSystemName', CodeSystemName, required=True)
    __codeSystemName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 68, 4)
    __codeSystemName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 68, 4)
    
    codeSystemName = property(__codeSystemName.value, __codeSystemName.set, None, u'the local identifier that uniquely identifies the code system within the context of the implementing service. Note that the  URI is the globally unique identifier.')

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    _ElementMap.update({
        __codeSystemCategory.name() : __codeSystemCategory,
        __ontologyDomain.name() : __ontologyDomain,
        __ontologyType.name() : __ontologyType,
        __designedForOntologyTask.name() : __designedForOntologyTask,
        __hasOntologyLanguage.name() : __hasOntologyLanguage,
        __includes.name() : __includes,
        __versions.name() : __versions,
        __currentVersion.name() : __currentVersion,
        __usedOntologyEngineeringTool.name() : __usedOntologyEngineeringTool
    })
    _AttributeMap.update({
        __codeSystemName.name() : __codeSystemName
    })
_Namespace_codesystem.addCategoryObject('typeBinding', u'CodeSystemCatalogEntry', CodeSystemCatalogEntry_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}CodeSystemVersionCatalogEntry with content type ELEMENT_ONLY
class CodeSystemVersionCatalogEntry_ (ResourceVersionDescription):
    """ is a collection of assertions about one or more entities. If the  of a  is the set of assertions made the resource is fixed, meaning
				that if one knows the  assigned to the version and the specific  from which the version instance was derived, the set of assertions is known as well."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'CodeSystemVersionCatalogEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 14, 1)
    _ElementMap = ResourceVersionDescription._ElementMap.copy()
    _AttributeMap = ResourceVersionDescription._AttributeMap.copy()
    # Base type is ResourceVersionDescription
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}versionOf uses Python identifier versionOf
    __versionOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'versionOf'), 'versionOf', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemVersionversionOf', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 22, 5), )

    
    versionOf = property(__versionOf.value, __versionOf.set, None, u'the name, URI and, if supported by the service, link to the code system that this version represents.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}imports uses Python identifier imports
    __imports = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'imports'), 'imports', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemVersionimports', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 27, 5), )

    
    imports = property(__imports.value, __imports.set, None, u'a reference to a code system version whose assertions are included as part this code system version. ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}defaultLanguage uses Python identifier defaultLanguage
    __defaultLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'defaultLanguage'), 'defaultLanguage', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemVersiondefaultLanguage', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 32, 5), )

    
    defaultLanguage = property(__defaultLanguage.value, __defaultLanguage.set, None, u'the default spoken or written language used in this version')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}supportedLanguage uses Python identifier supportedLanguage
    __supportedLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'supportedLanguage'), 'supportedLanguage', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemVersionsupportedLanguage', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 37, 5), )

    
    supportedLanguage = property(__supportedLanguage.value, __supportedLanguage.set, None, u'all languages recognized by this particular code system version')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}entityDescriptions uses Python identifier entityDescriptions
    __entityDescriptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entityDescriptions'), 'entityDescriptions', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemVersionentityDescriptions', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 42, 5), )

    
    entityDescriptions = property(__entityDescriptions.value, __entityDescriptions.set, None, u'a DirectoryURI that resolves to the set of all entities and their descriptions asserted by this code system version. This attribute will only be present if and only if the service implementation\n\t\t\t\t\t\t\t\tsupports the  service profile.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}associations uses Python identifier associations
    __associations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'associations'), 'associations', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemVersionassociations', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 48, 5), )

    
    associations = property(__associations.value, __associations.set, None, u'a  that,resolves to a a list of all associations asserted by this particular code system version')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}classes uses Python identifier classes
    __classes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'classes'), 'classes', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemVersionclasses', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 53, 5), )

    
    classes = property(__classes.value, __classes.set, None, u'a  that resolves to the set of that are of type owl:Class within this code system. Will only be present in code systems that represent\n\t\t\t\t\t\t\t\tontologies.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}roles uses Python identifier roles
    __roles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'roles'), 'roles', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemVersionroles', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 59, 5), )

    
    roles = property(__roles.value, __roles.set, None, u'a  that resolves to the set of that are of type owl:ObjectProperty or owl:DataProperty within this code system. Will only be present in code systems\n\t\t\t\t\t\t\t\tthat represent ontologies.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}individuals uses Python identifier individuals
    __individuals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'individuals'), 'individuals', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntry__httpwww_omg_orgspecCTS21_1CodeSystemVersionindividuals', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 65, 5), )

    
    individuals = property(__individuals.value, __individuals.set, None, u'a  that resolves to the set of that are of type owl:Individual within this code system. Will only be present in code systems that represent\n\t\t\t\t\t\t\t\tontologies.')

    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element keyword ({http://www.omg.org/spec/CTS2/1.1/Core}keyword) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceType ({http://www.omg.org/spec/CTS2/1.1/Core}resourceType) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element additionalDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}additionalDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndRole ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndRole) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element rights ({http://www.omg.org/spec/CTS2/1.1/Core}rights) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Core}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Core}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element alternateID ({http://www.omg.org/spec/CTS2/1.1/Core}alternateID) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Core}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndNotation ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndNotation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element predecessor ({http://www.omg.org/spec/CTS2/1.1/Core}predecessor) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element officialResourceVersionId ({http://www.omg.org/spec/CTS2/1.1/Core}officialResourceVersionId) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element officialReleaseDate ({http://www.omg.org/spec/CTS2/1.1/Core}officialReleaseDate) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element officialActivationDate ({http://www.omg.org/spec/CTS2/1.1/Core}officialActivationDate) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Attribute codeSystemVersionName uses Python identifier codeSystemVersionName
    __codeSystemVersionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSystemVersionName'), 'codeSystemVersionName', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntry__codeSystemVersionName', CodeSystemVersionName, required=True)
    __codeSystemVersionName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 72, 4)
    __codeSystemVersionName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 72, 4)
    
    codeSystemVersionName = property(__codeSystemVersionName.value, __codeSystemVersionName.set, None, u'an identifier that uniquely names this particular code system version within the context of the CTS service instance.')

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute documentURI inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Attribute state inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    _ElementMap.update({
        __versionOf.name() : __versionOf,
        __imports.name() : __imports,
        __defaultLanguage.name() : __defaultLanguage,
        __supportedLanguage.name() : __supportedLanguage,
        __entityDescriptions.name() : __entityDescriptions,
        __associations.name() : __associations,
        __classes.name() : __classes,
        __roles.name() : __roles,
        __individuals.name() : __individuals
    })
    _AttributeMap.update({
        __codeSystemVersionName.name() : __codeSystemVersionName
    })
_Namespace_codesystemversion.addCategoryObject('typeBinding', u'CodeSystemVersionCatalogEntry', CodeSystemVersionCatalogEntry_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}ConceptDomainCatalogEntry with content type ELEMENT_ONLY
class ConceptDomainCatalogEntry_ (AbstractResourceDescription):
    """Metadata about what, in ISO-11179, is called a "Data Element Concept" - "a that can be expressed in the form of a , described independently of any particularrepresentation."The
				HL7 SFM defines a  as "A named category of like concepts (a semantic type) that will be bound to one or more attributes in a static model whose datatypes are coded. Concept Domains exist to constrain the
				intent of the coded element while deferring the association of the element to a specific coded terminology until later in the model development process. Thus, Concept Domains are independent of any specific vocabulary or
				codesystem.Concept Domains represents an abstract conceptual space such as 'countries of the world', 'the gender of a person used for administrative purposes', 'languages of the world', etc." """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'ConceptDomainCatalogEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 17, 1)
    _ElementMap = AbstractResourceDescription._ElementMap.copy()
    _AttributeMap = AbstractResourceDescription._AttributeMap.copy()
    # Base type is AbstractResourceDescription
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}definingEntity uses Python identifier definingEntity
    __definingEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'definingEntity'), 'definingEntity', '__httpwww_omg_orgspecCTS21_1ConceptDomain_ConceptDomainCatalogEntry__httpwww_omg_orgspecCTS21_1ConceptDomaindefiningEntity', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 27, 5), )

    
    definingEntity = property(__definingEntity.value, __definingEntity.set, None, u'the name and URI of an  that describes the domain and scope of meaning for the . If present, this association is equivalent to the\n\t\t\t\t\t\t\t\tdata_element_concept_domain association in section 11.2.3.2 of ISO 11179-3.  provides a definition for the  and potentially describes its relationship with other\n\t\t\t\t\t\t\t\t\t as well as providing a semantic link to the possible value meanings available to domain bindings.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}bindings uses Python identifier bindings
    __bindings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'bindings'), 'bindings', '__httpwww_omg_orgspecCTS21_1ConceptDomain_ConceptDomainCatalogEntry__httpwww_omg_orgspecCTS21_1ConceptDomainbindings', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 34, 5), )

    
    bindings = property(__bindings.value, __bindings.set, None, u'a URI that resolves to the known bindings (aka. Data Elements) of the referenced ')

    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element keyword ({http://www.omg.org/spec/CTS2/1.1/Core}keyword) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceType ({http://www.omg.org/spec/CTS2/1.1/Core}resourceType) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element additionalDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}additionalDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndRole ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndRole) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element rights ({http://www.omg.org/spec/CTS2/1.1/Core}rights) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Core}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Core}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element alternateID ({http://www.omg.org/spec/CTS2/1.1/Core}alternateID) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Core}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element releaseDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}releaseDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}AbstractResourceDescription
    
    # Element releaseFormat ({http://www.omg.org/spec/CTS2/1.1/Core}releaseFormat) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}AbstractResourceDescription
    
    # Attribute conceptDomainName uses Python identifier conceptDomainName
    __conceptDomainName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'conceptDomainName'), 'conceptDomainName', '__httpwww_omg_orgspecCTS21_1ConceptDomain_ConceptDomainCatalogEntry__conceptDomainName', pyxb.binding.datatypes.string, required=True)
    __conceptDomainName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 40, 4)
    __conceptDomainName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 40, 4)
    
    conceptDomainName = property(__conceptDomainName.value, __conceptDomainName.set, None, u'the name by which the concept domain is known within the context of the CTS service instance. must uniquely designate a single, abstract \n\t\t\t\t\t\t\twithin the context of all concept domains known to the instance of the service. Note that is not necessarily globally unique and the  URI should be used whenever communication\n\t\t\t\t\t\t\tinformation about the across time or service instances.')

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    _ElementMap.update({
        __definingEntity.name() : __definingEntity,
        __bindings.name() : __bindings
    })
    _AttributeMap.update({
        __conceptDomainName.name() : __conceptDomainName
    })
_Namespace_conceptdomain.addCategoryObject('typeBinding', u'ConceptDomainCatalogEntry', ConceptDomainCatalogEntry_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}ConceptDomainBindingDirectoryEntry with content type ELEMENT_ONLY
class ConceptDomainBindingDirectoryEntry (ResourceDescriptionDirectoryEntry):
    """A synopsis of a  along with information about how to access the complete resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'ConceptDomainBindingDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 100, 1)
    _ElementMap = ResourceDescriptionDirectoryEntry._ElementMap.copy()
    _AttributeMap = ResourceDescriptionDirectoryEntry._AttributeMap.copy()
    # Base type is ResourceDescriptionDirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}bindingFor uses Python identifier bindingFor
    __bindingFor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingFor'), 'bindingFor', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBindingDirectoryEntry_httpwww_omg_orgspecCTS21_1ConceptDomainBindingbindingFor', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 107, 5), )

    
    bindingFor = property(__bindingFor.value, __bindingFor.set, None, u'the  being bound to a value set')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}boundValueSet uses Python identifier boundValueSet
    __boundValueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'boundValueSet'), 'boundValueSet', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBindingDirectoryEntry_httpwww_omg_orgspecCTS21_1ConceptDomainBindingboundValueSet', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 112, 5), )

    
    boundValueSet = property(__boundValueSet.value, __boundValueSet.set, None, u'the  being bound')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}bindingQualifier uses Python identifier bindingQualifier
    __bindingQualifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingQualifier'), 'bindingQualifier', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBindingDirectoryEntry_httpwww_omg_orgspecCTS21_1ConceptDomainBindingbindingQualifier', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 117, 5), )

    
    bindingQualifier = property(__bindingQualifier.value, __bindingQualifier.set, None, u'additional information that qualifies the intent or purpose of the binding. ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomainBinding}applicableContext uses Python identifier applicableContext
    __applicableContext = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'applicableContext'), 'applicableContext', '__httpwww_omg_orgspecCTS21_1ConceptDomainBinding_ConceptDomainBindingDirectoryEntry_httpwww_omg_orgspecCTS21_1ConceptDomainBindingapplicableContext', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 122, 5), )

    
    applicableContext = property(__applicableContext.value, __applicableContext.set, None, u'the context or realm in which the binding applies')

    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    _ElementMap.update({
        __bindingFor.name() : __bindingFor,
        __boundValueSet.name() : __boundValueSet,
        __bindingQualifier.name() : __bindingQualifier,
        __applicableContext.name() : __applicableContext
    })
    _AttributeMap.update({
        
    })
_Namespace_conceptdomainbinding.addCategoryObject('typeBinding', u'ConceptDomainBindingDirectoryEntry', ConceptDomainBindingDirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}AbstractResourceDescriptionDirectoryEntry with content type ELEMENT_ONLY
class AbstractResourceDescriptionDirectoryEntry (ResourceDescriptionDirectoryEntry):
    """a summary of an abstract resource description"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'AbstractResourceDescriptionDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1790, 1)
    _ElementMap = ResourceDescriptionDirectoryEntry._ElementMap.copy()
    _AttributeMap = ResourceDescriptionDirectoryEntry._AttributeMap.copy()
    # Base type is ResourceDescriptionDirectoryEntry
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_core.addCategoryObject('typeBinding', u'AbstractResourceDescriptionDirectoryEntry', AbstractResourceDescriptionDirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescriptionDirectoryEntry with content type ELEMENT_ONLY
class ResourceVersionDescriptionDirectoryEntry (ResourceDescriptionDirectoryEntry):
    """A summary of a resource version."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_core, u'ResourceVersionDescriptionDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1799, 1)
    _ElementMap = ResourceDescriptionDirectoryEntry._ElementMap.copy()
    _AttributeMap = ResourceDescriptionDirectoryEntry._AttributeMap.copy()
    # Base type is ResourceDescriptionDirectoryEntry
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}officialResourceVersionId uses Python identifier officialResourceVersionId
    __officialResourceVersionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId'), 'officialResourceVersionId', '__httpwww_omg_orgspecCTS21_1Core_ResourceVersionDescriptionDirectoryEntry_httpwww_omg_orgspecCTS21_1CoreofficialResourceVersionId', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1806, 5), )

    
    officialResourceVersionId = property(__officialResourceVersionId.value, __officialResourceVersionId.set, None, u'a label or identifier that was assigned to this version by its publisher')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/Core}officialReleaseDate uses Python identifier officialReleaseDate
    __officialReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate'), 'officialReleaseDate', '__httpwww_omg_orgspecCTS21_1Core_ResourceVersionDescriptionDirectoryEntry_httpwww_omg_orgspecCTS21_1CoreofficialReleaseDate', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1811, 5), )

    
    officialReleaseDate = property(__officialReleaseDate.value, __officialReleaseDate.set, None, u'information about the source, format, release date, version identifier, etc. of a specific version of an abstract resource')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute documentURI uses Python identifier documentURI
    __documentURI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'documentURI'), 'documentURI', '__httpwww_omg_orgspecCTS21_1Core_ResourceVersionDescriptionDirectoryEntry_documentURI', DocumentURI)
    __documentURI._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1817, 4)
    __documentURI._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1817, 4)
    
    documentURI = property(__documentURI.value, __documentURI.set, None, u'a URI that identifies the specific version, language and notation of the  resource.  This URI needs to be constructed in such a way that, if necessary, it will be\n\t\t\t\t\t\tpossible to differentiate resource versions that were loaded from different document syntaxes.  As an example, if an image of the wine ontology was loaded from a resource whtat was in\n\t\t\t\t\t\tManchester Syntax, it should be given a different URI than the image loaded from the RDF/XML syntax.  The reasoning behind this is, even in cases where different syntaxes are 100%\n\t\t\t\t\t\tcompatible the transformation into the CTS2 model may not be identical.')

    _ElementMap.update({
        __officialResourceVersionId.name() : __officialResourceVersionId,
        __officialReleaseDate.name() : __officialReleaseDate
    })
    _AttributeMap.update({
        __documentURI.name() : __documentURI
    })
_Namespace_core.addCategoryObject('typeBinding', u'ResourceVersionDescriptionDirectoryEntry', ResourceVersionDescriptionDirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}AnnotationPropertyDescription with content type ELEMENT_ONLY
class AnnotationPropertyDescription (PredicateDescription):
    """A  that describes a predicate used for "lexical" annotation of an entity or other resource. Annotation properties are "semantically weak" (see below) in the sense that they are not
				inherited through subclass associations."For annotations properties note that annotations are not 'semantic-free' under the OWL 2 RDF-Based Semantics. Just like every other triple or set of triples occurring in an RDF graph,
				an annotation is assigned a truth value by any given OWL 2 RDF-Based interpretation. Hence, although annotations are meant to be 'semantically weak', i.e., their formal meaning does not significantly exceed that originating
				from the RDF Semantics specification, adding an annotation may still change the meaning of an ontology."
				"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'AnnotationPropertyDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 428, 1)
    _ElementMap = PredicateDescription._ElementMap.copy()
    _AttributeMap = PredicateDescription._AttributeMap.copy()
    # Base type is PredicateDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element entityID ({http://www.omg.org/spec/CTS2/1.1/Entity}entityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element alternateEntityID ({http://www.omg.org/spec/CTS2/1.1/Entity}alternateEntityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element describingCodeSystemVersion ({http://www.omg.org/spec/CTS2/1.1/Entity}describingCodeSystemVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element designation ({http://www.omg.org/spec/CTS2/1.1/Entity}designation) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element definition ({http://www.omg.org/spec/CTS2/1.1/Entity}definition) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element example ({http://www.omg.org/spec/CTS2/1.1/Entity}example) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Entity}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Entity}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Entity}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element subjectOf ({http://www.omg.org/spec/CTS2/1.1/Entity}subjectOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element predicateOf ({http://www.omg.org/spec/CTS2/1.1/Entity}predicateOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element targetOf ({http://www.omg.org/spec/CTS2/1.1/Entity}targetOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parent ({http://www.omg.org/spec/CTS2/1.1/Entity}parent) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parents ({http://www.omg.org/spec/CTS2/1.1/Entity}parents) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element ancestors ({http://www.omg.org/spec/CTS2/1.1/Entity}ancestors) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element children ({http://www.omg.org/spec/CTS2/1.1/Entity}children) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element descendants ({http://www.omg.org/spec/CTS2/1.1/Entity}descendants) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element entityType ({http://www.omg.org/spec/CTS2/1.1/Entity}entityType) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element instances ({http://www.omg.org/spec/CTS2/1.1/Entity}instances) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element equivalentEntity ({http://www.omg.org/spec/CTS2/1.1/Entity}equivalentEntity) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element forwardName ({http://www.omg.org/spec/CTS2/1.1/Entity}forwardName) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}PredicateDescription
    
    # Element reverseName ({http://www.omg.org/spec/CTS2/1.1/Entity}reverseName) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}PredicateDescription
    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute codeSystemRole inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'AnnotationPropertyDescription', AnnotationPropertyDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}DataPropertyDescription with content type ELEMENT_ONLY
class DataPropertyDescription (PredicateDescription):
    """A whose domain is a set of literals."Data properties connect individuals with literals. In some knowledge representation systems, functional data properties are called attributes."
						"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'DataPropertyDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 441, 1)
    _ElementMap = PredicateDescription._ElementMap.copy()
    _AttributeMap = PredicateDescription._AttributeMap.copy()
    # Base type is PredicateDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element entityID ({http://www.omg.org/spec/CTS2/1.1/Entity}entityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element alternateEntityID ({http://www.omg.org/spec/CTS2/1.1/Entity}alternateEntityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element describingCodeSystemVersion ({http://www.omg.org/spec/CTS2/1.1/Entity}describingCodeSystemVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element designation ({http://www.omg.org/spec/CTS2/1.1/Entity}designation) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element definition ({http://www.omg.org/spec/CTS2/1.1/Entity}definition) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element example ({http://www.omg.org/spec/CTS2/1.1/Entity}example) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Entity}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Entity}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Entity}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element subjectOf ({http://www.omg.org/spec/CTS2/1.1/Entity}subjectOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element predicateOf ({http://www.omg.org/spec/CTS2/1.1/Entity}predicateOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element targetOf ({http://www.omg.org/spec/CTS2/1.1/Entity}targetOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parent ({http://www.omg.org/spec/CTS2/1.1/Entity}parent) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parents ({http://www.omg.org/spec/CTS2/1.1/Entity}parents) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element ancestors ({http://www.omg.org/spec/CTS2/1.1/Entity}ancestors) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element children ({http://www.omg.org/spec/CTS2/1.1/Entity}children) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element descendants ({http://www.omg.org/spec/CTS2/1.1/Entity}descendants) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element entityType ({http://www.omg.org/spec/CTS2/1.1/Entity}entityType) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element instances ({http://www.omg.org/spec/CTS2/1.1/Entity}instances) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element equivalentEntity ({http://www.omg.org/spec/CTS2/1.1/Entity}equivalentEntity) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element forwardName ({http://www.omg.org/spec/CTS2/1.1/Entity}forwardName) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}PredicateDescription
    
    # Element reverseName ({http://www.omg.org/spec/CTS2/1.1/Entity}reverseName) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}PredicateDescription
    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute codeSystemRole inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_Namespace_entity.addCategoryObject('typeBinding', u'DataPropertyDescription', DataPropertyDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/Entity}ObjectPropertyDescription with content type ELEMENT_ONLY
class ObjectPropertyDescription (PredicateDescription):
    """the description of a "semantic" predicate. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_entity, u'ObjectPropertyDescription')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 451, 1)
    _ElementMap = PredicateDescription._ElementMap.copy()
    _AttributeMap = PredicateDescription._AttributeMap.copy()
    # Base type is PredicateDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Element entityID ({http://www.omg.org/spec/CTS2/1.1/Entity}entityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element alternateEntityID ({http://www.omg.org/spec/CTS2/1.1/Entity}alternateEntityID) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element describingCodeSystemVersion ({http://www.omg.org/spec/CTS2/1.1/Entity}describingCodeSystemVersion) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element designation ({http://www.omg.org/spec/CTS2/1.1/Entity}designation) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element definition ({http://www.omg.org/spec/CTS2/1.1/Entity}definition) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element example ({http://www.omg.org/spec/CTS2/1.1/Entity}example) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Entity}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Entity}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Entity}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element subjectOf ({http://www.omg.org/spec/CTS2/1.1/Entity}subjectOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element predicateOf ({http://www.omg.org/spec/CTS2/1.1/Entity}predicateOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element targetOf ({http://www.omg.org/spec/CTS2/1.1/Entity}targetOf) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parent ({http://www.omg.org/spec/CTS2/1.1/Entity}parent) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element parents ({http://www.omg.org/spec/CTS2/1.1/Entity}parents) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element ancestors ({http://www.omg.org/spec/CTS2/1.1/Entity}ancestors) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element children ({http://www.omg.org/spec/CTS2/1.1/Entity}children) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element descendants ({http://www.omg.org/spec/CTS2/1.1/Entity}descendants) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element entityType ({http://www.omg.org/spec/CTS2/1.1/Entity}entityType) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element instances ({http://www.omg.org/spec/CTS2/1.1/Entity}instances) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element equivalentEntity ({http://www.omg.org/spec/CTS2/1.1/Entity}equivalentEntity) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Element forwardName ({http://www.omg.org/spec/CTS2/1.1/Entity}forwardName) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}PredicateDescription
    
    # Element reverseName ({http://www.omg.org/spec/CTS2/1.1/Entity}reverseName) inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}PredicateDescription
    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}NamedEntityDescription
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute codeSystemRole inherited from {http://www.omg.org/spec/CTS2/1.1/Entity}EntityDescriptionBase
    
    # Attribute directed uses Python identifier directed
    __directed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'directed'), 'directed', '__httpwww_omg_orgspecCTS21_1Entity_ObjectPropertyDescription_directed', ObjectPropertyDirectionality)
    __directed._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 457, 4)
    __directed._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 457, 4)
    
    directed = property(__directed.value, __directed.set, None, u'an indicator that states whether the object property is unidirectional (i.e. requires an inverse to be explicitly declared) or is bidirectional.')

    
    # Attribute transitivity uses Python identifier transitivity
    __transitivity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'transitivity'), 'transitivity', '__httpwww_omg_orgspecCTS21_1Entity_ObjectPropertyDescription_transitivity', Transitivity)
    __transitivity._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 462, 4)
    __transitivity._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 462, 4)
    
    transitivity = property(__transitivity.value, __transitivity.set, None, u'transitivity characteristics of the property. If not supplied, transitivity characteristics are either unknown or not applicable (i.e. $domain \\cup range = \\emptyset$)')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __directed.name() : __directed,
        __transitivity.name() : __transitivity
    })
_Namespace_entity.addCategoryObject('typeBinding', u'ObjectPropertyDescription', ObjectPropertyDescription)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapCatalog}MapCatalogEntry with content type ELEMENT_ONLY
class MapCatalogEntry_ (AbstractResourceDescription):
    """An entry in a catalog of maps - organized collections of rules that describe how information encoded using one set of value meanings can be transformed into a second, related set of meanings. A map catalog
				contains information about who is responsible for creating and distributing the rules, the source code system or value set, the target code system or value set, how often the rules are updated, how they are distributed,
				etc."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_map, u'MapCatalogEntry')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 16, 1)
    _ElementMap = AbstractResourceDescription._ElementMap.copy()
    _AttributeMap = AbstractResourceDescription._AttributeMap.copy()
    # Base type is AbstractResourceDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element keyword ({http://www.omg.org/spec/CTS2/1.1/Core}keyword) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceType ({http://www.omg.org/spec/CTS2/1.1/Core}resourceType) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element additionalDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}additionalDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndRole ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndRole) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element rights ({http://www.omg.org/spec/CTS2/1.1/Core}rights) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Core}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Core}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element alternateID ({http://www.omg.org/spec/CTS2/1.1/Core}alternateID) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Core}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element releaseDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}releaseDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}AbstractResourceDescription
    
    # Element releaseFormat ({http://www.omg.org/spec/CTS2/1.1/Core}releaseFormat) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}AbstractResourceDescription
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}fromCodeSystem uses Python identifier fromCodeSystem
    __fromCodeSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'fromCodeSystem'), 'fromCodeSystem', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntry__httpwww_omg_orgspecCTS21_1MapCatalogfromCodeSystem', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 25, 5), )

    
    fromCodeSystem = property(__fromCodeSystem.value, __fromCodeSystem.set, None, u'the  from which the source codes in the Map are drawn. Note that the source codes may be drawn from either a  or a , but not\n\t\t\t\t\t\t\t\tboth.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}fromValueSet uses Python identifier fromValueSet
    __fromValueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'fromValueSet'), 'fromValueSet', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntry__httpwww_omg_orgspecCTS21_1MapCatalogfromValueSet', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 31, 5), )

    
    fromValueSet = property(__fromValueSet.value, __fromValueSet.set, None, u'the  from which the source codes in the Map are drawn. Note that the source codes may be drawn from either a  or a , but not\n\t\t\t\t\t\t\t\tboth.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}toCodeSystem uses Python identifier toCodeSystem
    __toCodeSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'toCodeSystem'), 'toCodeSystem', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntry__httpwww_omg_orgspecCTS21_1MapCatalogtoCodeSystem', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 37, 5), )

    
    toCodeSystem = property(__toCodeSystem.value, __toCodeSystem.set, None, u'the  from which the target codes in the Map are drawn. Note that the target codes may be drawn from either a  or a , but not\n\t\t\t\t\t\t\t\tboth.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}toValueSet uses Python identifier toValueSet
    __toValueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'toValueSet'), 'toValueSet', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntry__httpwww_omg_orgspecCTS21_1MapCatalogtoValueSet', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 43, 5), )

    
    toValueSet = property(__toValueSet.value, __toValueSet.set, None, u'the  from which the source codes in the Map are drawn. Note that the target codes may be drawn from either a  or a , but not\n\t\t\t\t\t\t\t\tboth.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}versions uses Python identifier versions
    __versions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'versions'), 'versions', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntry__httpwww_omg_orgspecCTS21_1MapCatalogversions', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 49, 5), )

    
    versions = property(__versions.value, __versions.set, None, u'a URI that, when resolved, returns the known versions of the containing ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}currentVersion uses Python identifier currentVersion
    __currentVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'currentVersion'), 'currentVersion', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntry__httpwww_omg_orgspecCTS21_1MapCatalogcurrentVersion', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 54, 5), )

    
    currentVersion = property(__currentVersion.value, __currentVersion.set, None, u'The map version associated with this catalog entry that has been assigned the  tag, if any')

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute mapName uses Python identifier mapName
    __mapName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mapName'), 'mapName', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntry__mapName', MapName, required=True)
    __mapName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 60, 4)
    __mapName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 60, 4)
    
    mapName = property(__mapName.value, __mapName.set, None, u'the name by which the map is known within the context of the CTS service instance.  must uniquely designate a single, abstract  within the context of all maps\n\t\t\t\t\t\t\tknown to the instance of the service. Note that  is not necessarily globally unique and the  URI should be used whenever communication information about the  across time or\n\t\t\t\t\t\t\tservice instances.')

    _ElementMap.update({
        __fromCodeSystem.name() : __fromCodeSystem,
        __fromValueSet.name() : __fromValueSet,
        __toCodeSystem.name() : __toCodeSystem,
        __toValueSet.name() : __toValueSet,
        __versions.name() : __versions,
        __currentVersion.name() : __currentVersion
    })
    _AttributeMap.update({
        __mapName.name() : __mapName
    })
_Namespace_map.addCategoryObject('typeBinding', u'MapCatalogEntry', MapCatalogEntry_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapVersion with content type ELEMENT_ONLY
class MapVersion_ (ResourceVersionDescription):
    """A specific version of a  is bound to specific code system versions and/or value set versions and references a set of mapping entries () that, if the resource is ,
				are fixed with respect to this version."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapVersion')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 16, 1)
    _ElementMap = ResourceVersionDescription._ElementMap.copy()
    _AttributeMap = ResourceVersionDescription._AttributeMap.copy()
    # Base type is ResourceVersionDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element keyword ({http://www.omg.org/spec/CTS2/1.1/Core}keyword) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceType ({http://www.omg.org/spec/CTS2/1.1/Core}resourceType) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element additionalDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}additionalDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndRole ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndRole) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element rights ({http://www.omg.org/spec/CTS2/1.1/Core}rights) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Core}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Core}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element alternateID ({http://www.omg.org/spec/CTS2/1.1/Core}alternateID) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Core}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndNotation ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndNotation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element predecessor ({http://www.omg.org/spec/CTS2/1.1/Core}predecessor) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element officialResourceVersionId ({http://www.omg.org/spec/CTS2/1.1/Core}officialResourceVersionId) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element officialReleaseDate ({http://www.omg.org/spec/CTS2/1.1/Core}officialReleaseDate) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element officialActivationDate ({http://www.omg.org/spec/CTS2/1.1/Core}officialActivationDate) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}versionOf uses Python identifier versionOf
    __versionOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionOf'), 'versionOf', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersion__httpwww_omg_orgspecCTS21_1MapVersionversionOf', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 24, 5), )

    
    versionOf = property(__versionOf.value, __versionOf.set, None, u'a reference to the  resource that this is a version of')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}fromValueSetDefinition uses Python identifier fromValueSetDefinition
    __fromValueSetDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'fromValueSetDefinition'), 'fromValueSetDefinition', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersion__httpwww_omg_orgspecCTS21_1MapVersionfromValueSetDefinition', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 29, 5), )

    
    fromValueSetDefinition = property(__fromValueSetDefinition.value, __fromValueSetDefinition.set, None, u'the specific value set definition that was used to resolve the  entities in this map')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}fromCodeSystemVersion uses Python identifier fromCodeSystemVersion
    __fromCodeSystemVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'fromCodeSystemVersion'), 'fromCodeSystemVersion', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersion__httpwww_omg_orgspecCTS21_1MapVersionfromCodeSystemVersion', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 34, 5), )

    
    fromCodeSystemVersion = property(__fromCodeSystemVersion.value, __fromCodeSystemVersion.set, None, u'the specific code system version that provided the  entities in this map')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}toValueSetDefinition uses Python identifier toValueSetDefinition
    __toValueSetDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'toValueSetDefinition'), 'toValueSetDefinition', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersion__httpwww_omg_orgspecCTS21_1MapVersiontoValueSetDefinition', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 39, 5), )

    
    toValueSetDefinition = property(__toValueSetDefinition.value, __toValueSetDefinition.set, None, u'the specific value set definition that was used to resolve the  entities in this map')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}toCodeSystemVersion uses Python identifier toCodeSystemVersion
    __toCodeSystemVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'toCodeSystemVersion'), 'toCodeSystemVersion', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersion__httpwww_omg_orgspecCTS21_1MapVersiontoCodeSystemVersion', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 44, 5), )

    
    toCodeSystemVersion = property(__toCodeSystemVersion.value, __toCodeSystemVersion.set, None, u'the specific code system version that provided the entities in this map')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}useCodeSystemVersion uses Python identifier useCodeSystemVersion
    __useCodeSystemVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'useCodeSystemVersion'), 'useCodeSystemVersion', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersion__httpwww_omg_orgspecCTS21_1MapVersionuseCodeSystemVersion', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 49, 5), )

    
    useCodeSystemVersion = property(__useCodeSystemVersion.value, __useCodeSystemVersion.set, None, u'a list of code system versions that should be used in the resolution of \\\\  and/or  If present, this states that, for these code systems,\n\t\t\t\t\t\t\t\tthese specific versions are to be used.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}applicableContext uses Python identifier applicableContext
    __applicableContext = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'applicableContext'), 'applicableContext', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersion__httpwww_omg_orgspecCTS21_1MapVersionapplicableContext', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 55, 5), )

    
    applicableContext = property(__applicableContext.value, __applicableContext.set, None, u'references to the realm, context or other external factor that determines the applicability of this particular map version')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}versionTag uses Python identifier versionTag
    __versionTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionTag'), 'versionTag', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersion__httpwww_omg_orgspecCTS21_1MapVersionversionTag', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 60, 5), )

    
    versionTag = property(__versionTag.value, __versionTag.set, None, u'a version tag assigned to this  instance by the implementing service')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}entries uses Python identifier entries
    __entries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entries'), 'entries', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersion__httpwww_omg_orgspecCTS21_1MapVersionentries', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 65, 5), )

    
    entries = property(__entries.value, __entries.set, None, u'a DirectoryURI that resolves to the set of  that are contained in this .')

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute documentURI inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Attribute state inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Attribute mapVersionName uses Python identifier mapVersionName
    __mapVersionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mapVersionName'), 'mapVersionName', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersion__mapVersionName', MapVersionName, required=True)
    __mapVersionName._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 71, 4)
    __mapVersionName._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 71, 4)
    
    mapVersionName = property(__mapVersionName.value, __mapVersionName.set, None, u'a local identifier that uniquely names this version within the context of the CTS service implementation')

    _ElementMap.update({
        __versionOf.name() : __versionOf,
        __fromValueSetDefinition.name() : __fromValueSetDefinition,
        __fromCodeSystemVersion.name() : __fromCodeSystemVersion,
        __toValueSetDefinition.name() : __toValueSetDefinition,
        __toCodeSystemVersion.name() : __toCodeSystemVersion,
        __useCodeSystemVersion.name() : __useCodeSystemVersion,
        __applicableContext.name() : __applicableContext,
        __versionTag.name() : __versionTag,
        __entries.name() : __entries
    })
    _AttributeMap.update({
        __mapVersionName.name() : __mapVersionName
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapVersion', MapVersion_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSet}ValueSetCatalogEntry with content type ELEMENT_ONLY
class ValueSetCatalogEntry_ (AbstractResourceDescription):
    """An entry in a value set catalog that describes the purpose, use, etc. of a value set."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valueset, u'ValueSetCatalogEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 14, 1)
    _ElementMap = AbstractResourceDescription._ElementMap.copy()
    _AttributeMap = AbstractResourceDescription._AttributeMap.copy()
    # Base type is AbstractResourceDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element keyword ({http://www.omg.org/spec/CTS2/1.1/Core}keyword) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceType ({http://www.omg.org/spec/CTS2/1.1/Core}resourceType) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element additionalDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}additionalDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndRole ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndRole) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element rights ({http://www.omg.org/spec/CTS2/1.1/Core}rights) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Core}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Core}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element alternateID ({http://www.omg.org/spec/CTS2/1.1/Core}alternateID) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Core}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element releaseDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}releaseDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}AbstractResourceDescription
    
    # Element releaseFormat ({http://www.omg.org/spec/CTS2/1.1/Core}releaseFormat) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}AbstractResourceDescription
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSet}definitions uses Python identifier definitions
    __definitions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valueset, u'definitions'), 'definitions', '__httpwww_omg_orgspecCTS21_1ValueSet_ValueSetCatalogEntry__httpwww_omg_orgspecCTS21_1ValueSetdefinitions', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 21, 5), )

    
    definitions = property(__definitions.value, __definitions.set, None, u'a that references a set of definition (versions) for this value set. If the service profile does not support value set definitions, this attribute should be omitted. If the\n\t\t\t\t\t\t\t\tservice supports definitions but none are known for this value set, the parameter should be supplied, but will resolve to an empty directory.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSet}currentDefinition uses Python identifier currentDefinition
    __currentDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valueset, u'currentDefinition'), 'currentDefinition', '__httpwww_omg_orgspecCTS21_1ValueSet_ValueSetCatalogEntry__httpwww_omg_orgspecCTS21_1ValueSetcurrentDefinition', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 27, 5), )

    
    currentDefinition = property(__currentDefinition.value, __currentDefinition.set, None, u'a reference to the definition associated with the CURRENT tag, if any ')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSet}currentResolution uses Python identifier currentResolution
    __currentResolution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valueset, u'currentResolution'), 'currentResolution', '__httpwww_omg_orgspecCTS21_1ValueSet_ValueSetCatalogEntry__httpwww_omg_orgspecCTS21_1ValueSetcurrentResolution', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 32, 5), )

    
    currentResolution = property(__currentResolution.value, __currentResolution.set, None, u'a URI that resolves to the resolution of this value set using the CURRENT tag for both the definition and the code system versions')

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute valueSetName uses Python identifier valueSetName
    __valueSetName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valueSetName'), 'valueSetName', '__httpwww_omg_orgspecCTS21_1ValueSet_ValueSetCatalogEntry__valueSetName', ValueSetName, required=True)
    __valueSetName._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 38, 4)
    __valueSetName._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 38, 4)
    
    valueSetName = property(__valueSetName.value, __valueSetName.set, None, u'the unique name of this value set within the context of the CTS service instance. ')

    _ElementMap.update({
        __definitions.name() : __definitions,
        __currentDefinition.name() : __currentDefinition,
        __currentResolution.name() : __currentResolution
    })
    _AttributeMap.update({
        __valueSetName.name() : __valueSetName
    })
_Namespace_valueset.addCategoryObject('typeBinding', u'ValueSetCatalogEntry', ValueSetCatalogEntry_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ValueSetDefinition with content type ELEMENT_ONLY
class ValueSetDefinition_ (ResourceVersionDescription):
    """Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ValueSetDefinition with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinition')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 10, 1)
    _ElementMap = ResourceVersionDescription._ElementMap.copy()
    _AttributeMap = ResourceVersionDescription._AttributeMap.copy()
    # Base type is ResourceVersionDescription
    
    # Element status ({http://www.omg.org/spec/CTS2/1.1/Core}status) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element changeDescription ({http://www.omg.org/spec/CTS2/1.1/Core}changeDescription) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Element keyword ({http://www.omg.org/spec/CTS2/1.1/Core}keyword) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceType ({http://www.omg.org/spec/CTS2/1.1/Core}resourceType) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element additionalDocumentation ({http://www.omg.org/spec/CTS2/1.1/Core}additionalDocumentation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndRole ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndRole) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element rights ({http://www.omg.org/spec/CTS2/1.1/Core}rights) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element note ({http://www.omg.org/spec/CTS2/1.1/Core}note) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element property_ ({http://www.omg.org/spec/CTS2/1.1/Core}property) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element alternateID ({http://www.omg.org/spec/CTS2/1.1/Core}alternateID) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceStatements ({http://www.omg.org/spec/CTS2/1.1/Core}sourceStatements) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Element sourceAndNotation ({http://www.omg.org/spec/CTS2/1.1/Core}sourceAndNotation) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element predecessor ({http://www.omg.org/spec/CTS2/1.1/Core}predecessor) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element officialResourceVersionId ({http://www.omg.org/spec/CTS2/1.1/Core}officialResourceVersionId) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element officialReleaseDate ({http://www.omg.org/spec/CTS2/1.1/Core}officialReleaseDate) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element officialActivationDate ({http://www.omg.org/spec/CTS2/1.1/Core}officialActivationDate) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}definedValueSet uses Python identifier definedValueSet
    __definedValueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'definedValueSet'), 'definedValueSet', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinition__httpwww_omg_orgspecCTS21_1ValueSetDefinitiondefinedValueSet', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 14, 5), )

    
    definedValueSet = property(__definedValueSet.value, __definedValueSet.set, None, u'a reference to the value set being defined')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}versionTag uses Python identifier versionTag
    __versionTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'versionTag'), 'versionTag', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinition__httpwww_omg_orgspecCTS21_1ValueSetDefinitionversionTag', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 19, 5), )

    
    versionTag = property(__versionTag.value, __versionTag.set, None, u'a version tag assigned to this definition by the implementing service')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}entry uses Python identifier entry
    __entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), 'entry', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinition__httpwww_omg_orgspecCTS21_1ValueSetDefinitionentry', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 24, 5), )

    
    entry = property(__entry.value, __entry.set, None, None)

    
    # Attribute entryState inherited from {http://www.omg.org/spec/CTS2/1.1/Core}Changeable
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescription
    
    # Attribute documentURI inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    
    # Attribute state inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescription
    _ElementMap.update({
        __definedValueSet.name() : __definedValueSet,
        __versionTag.name() : __versionTag,
        __entry.name() : __entry
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ValueSetDefinition', ValueSetDefinition_)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystem}CodeSystemCatalogEntrySummary with content type ELEMENT_ONLY
class CodeSystemCatalogEntrySummary (AbstractResourceDescriptionDirectoryEntry):
    """A synopsis of a CodeSystem along with information about how to access the complete resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystem, u'CodeSystemCatalogEntrySummary')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 113, 1)
    _ElementMap = AbstractResourceDescriptionDirectoryEntry._ElementMap.copy()
    _AttributeMap = AbstractResourceDescriptionDirectoryEntry._AttributeMap.copy()
    # Base type is AbstractResourceDescriptionDirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}versions uses Python identifier versions
    __versions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'versions'), 'versions', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntrySummary_httpwww_omg_orgspecCTS21_1CodeSystemversions', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 120, 5), )

    
    versions = property(__versions.value, __versions.set, None, u'a directory URI that resolves to an ordered list of code system versions associated with this code system.  may only be present if the service supports the  profile.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystem}currentVersion uses Python identifier currentVersion
    __currentVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'currentVersion'), 'currentVersion', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntrySummary_httpwww_omg_orgspecCTS21_1CodeSystemcurrentVersion', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 126, 5), )

    
    currentVersion = property(__currentVersion.value, __currentVersion.set, None, u'a reference to the code system version marked as  in the service instance.')

    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute codeSystemName uses Python identifier codeSystemName
    __codeSystemName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSystemName'), 'codeSystemName', '__httpwww_omg_orgspecCTS21_1CodeSystem_CodeSystemCatalogEntrySummary_codeSystemName', CodeSystemName, required=True)
    __codeSystemName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 132, 4)
    __codeSystemName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 132, 4)
    
    codeSystemName = property(__codeSystemName.value, __codeSystemName.set, None, u'the local identifier that uniquely identifies the code system within the context of the implementing service. Note that the  URI is the globally unique identifier.')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    _ElementMap.update({
        __versions.name() : __versions,
        __currentVersion.name() : __currentVersion
    })
    _AttributeMap.update({
        __codeSystemName.name() : __codeSystemName
    })
_Namespace_codesystem.addCategoryObject('typeBinding', u'CodeSystemCatalogEntrySummary', CodeSystemCatalogEntrySummary)


# Complex type {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}CodeSystemVersionCatalogEntrySummary with content type ELEMENT_ONLY
class CodeSystemVersionCatalogEntrySummary (ResourceVersionDescriptionDirectoryEntry):
    """A synopsis of a  along with information about how to access the complete resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'CodeSystemVersionCatalogEntrySummary')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 115, 1)
    _ElementMap = ResourceVersionDescriptionDirectoryEntry._ElementMap.copy()
    _AttributeMap = ResourceVersionDescriptionDirectoryEntry._AttributeMap.copy()
    # Base type is ResourceVersionDescriptionDirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}versionOf uses Python identifier versionOf
    __versionOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'versionOf'), 'versionOf', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntrySummary_httpwww_omg_orgspecCTS21_1CodeSystemVersionversionOf', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 122, 5), )

    
    versionOf = property(__versionOf.value, __versionOf.set, None, u'the name, URI and, if supported by the service, link to the code system that this version represents.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/CodeSystemVersion}codeSystemVersionTag uses Python identifier codeSystemVersionTag
    __codeSystemVersionTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'codeSystemVersionTag'), 'codeSystemVersionTag', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntrySummary_httpwww_omg_orgspecCTS21_1CodeSystemVersioncodeSystemVersionTag', True, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 127, 5), )

    
    codeSystemVersionTag = property(__codeSystemVersionTag.value, __codeSystemVersionTag.set, None, u'the tag(s) assigned to this version by the service provider.  identifies any roles that this version plays within the workflow of the current provider. As an example,\n\t\t\t\t\t\t\t\ta provider might assign the tags of "production" and "current" to a given code system version. With the exception of  the semantics of VersionTag are determined by the service\n\t\t\t\t\t\t\t\tprovider.')

    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Element officialResourceVersionId ({http://www.omg.org/spec/CTS2/1.1/Core}officialResourceVersionId) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescriptionDirectoryEntry
    
    # Element officialReleaseDate ({http://www.omg.org/spec/CTS2/1.1/Core}officialReleaseDate) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescriptionDirectoryEntry
    
    # Attribute codeSystemVersionName uses Python identifier codeSystemVersionName
    __codeSystemVersionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'codeSystemVersionName'), 'codeSystemVersionName', '__httpwww_omg_orgspecCTS21_1CodeSystemVersion_CodeSystemVersionCatalogEntrySummary_codeSystemVersionName', CodeSystemVersionName, required=True)
    __codeSystemVersionName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 135, 4)
    __codeSystemVersionName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 135, 4)
    
    codeSystemVersionName = property(__codeSystemVersionName.value, __codeSystemVersionName.set, None, u'an identifier that uniquely names this particular code system version within the context of the CTS service instance.')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute documentURI inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescriptionDirectoryEntry
    _ElementMap.update({
        __versionOf.name() : __versionOf,
        __codeSystemVersionTag.name() : __codeSystemVersionTag
    })
    _AttributeMap.update({
        __codeSystemVersionName.name() : __codeSystemVersionName
    })
_Namespace_codesystemversion.addCategoryObject('typeBinding', u'CodeSystemVersionCatalogEntrySummary', CodeSystemVersionCatalogEntrySummary)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}ConceptDomainCatalogEntrySummary with content type ELEMENT_ONLY
class ConceptDomainCatalogEntrySummary (AbstractResourceDescriptionDirectoryEntry):
    """a synopsis of a  along with information about how to access the complete resource"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'ConceptDomainCatalogEntrySummary')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 85, 1)
    _ElementMap = AbstractResourceDescriptionDirectoryEntry._ElementMap.copy()
    _AttributeMap = AbstractResourceDescriptionDirectoryEntry._AttributeMap.copy()
    # Base type is AbstractResourceDescriptionDirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}definingEntity uses Python identifier definingEntity
    __definingEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'definingEntity'), 'definingEntity', '__httpwww_omg_orgspecCTS21_1ConceptDomain_ConceptDomainCatalogEntrySummary_httpwww_omg_orgspecCTS21_1ConceptDomaindefiningEntity', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 92, 5), )

    
    definingEntity = property(__definingEntity.value, __definingEntity.set, None, u'a reference to an  that describes the domain and scope of meaning for the . If present, this association is equivalent to the\n\t\t\t\t\t\t\t\tdata_element_concept_domain association in section 11.2.3.2 of ISO 11179-3.  provides a definition for the  and potentially describes its relationship with other\n\t\t\t\t\t\t\t\t\t as well as providing a semantic link to the possible value meanings available to domain bindings.')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ConceptDomain}bindings uses Python identifier bindings
    __bindings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'bindings'), 'bindings', '__httpwww_omg_orgspecCTS21_1ConceptDomain_ConceptDomainCatalogEntrySummary_httpwww_omg_orgspecCTS21_1ConceptDomainbindings', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 99, 5), )

    
    bindings = property(__bindings.value, __bindings.set, None, u'a URI that resolves to the known bindings (aka. Data Elements) of the referenced ')

    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute conceptDomainName uses Python identifier conceptDomainName
    __conceptDomainName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'conceptDomainName'), 'conceptDomainName', '__httpwww_omg_orgspecCTS21_1ConceptDomain_ConceptDomainCatalogEntrySummary_conceptDomainName', ConceptDomainName, required=True)
    __conceptDomainName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 105, 4)
    __conceptDomainName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 105, 4)
    
    conceptDomainName = property(__conceptDomainName.value, __conceptDomainName.set, None, u'the name by which the concept domain is known within the context of the CTS service instance. must uniquely designate a single, abstract \n\t\t\t\t\t\t\twithin the context of all concept domains known to the instance of the service. Note that is not necessarily globally unique and the  URI should be used whenever communication\n\t\t\t\t\t\t\tinformation about the across time or service instances.')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    _ElementMap.update({
        __definingEntity.name() : __definingEntity,
        __bindings.name() : __bindings
    })
    _AttributeMap.update({
        __conceptDomainName.name() : __conceptDomainName
    })
_Namespace_conceptdomain.addCategoryObject('typeBinding', u'ConceptDomainCatalogEntrySummary', ConceptDomainCatalogEntrySummary)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapCatalog}MapCatalogEntrySummary with content type ELEMENT_ONLY
class MapCatalogEntrySummary (AbstractResourceDescriptionDirectoryEntry):
    """A synopsis of a ."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_map, u'MapCatalogEntrySummary')
    _XSDLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 105, 1)
    _ElementMap = AbstractResourceDescriptionDirectoryEntry._ElementMap.copy()
    _AttributeMap = AbstractResourceDescriptionDirectoryEntry._AttributeMap.copy()
    # Base type is AbstractResourceDescriptionDirectoryEntry
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}fromCodeSystem uses Python identifier fromCodeSystem
    __fromCodeSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'fromCodeSystem'), 'fromCodeSystem', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntrySummary_httpwww_omg_orgspecCTS21_1MapCatalogfromCodeSystem', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 112, 5), )

    
    fromCodeSystem = property(__fromCodeSystem.value, __fromCodeSystem.set, None, u'the  from which the source codes in the Map are drawn')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}fromValueSet uses Python identifier fromValueSet
    __fromValueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'fromValueSet'), 'fromValueSet', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntrySummary_httpwww_omg_orgspecCTS21_1MapCatalogfromValueSet', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 117, 5), )

    
    fromValueSet = property(__fromValueSet.value, __fromValueSet.set, None, u'the  from which the source codes in the Map are drawn')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}toCodeSystem uses Python identifier toCodeSystem
    __toCodeSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'toCodeSystem'), 'toCodeSystem', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntrySummary_httpwww_omg_orgspecCTS21_1MapCatalogtoCodeSystem', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 122, 5), )

    
    toCodeSystem = property(__toCodeSystem.value, __toCodeSystem.set, None, u'the  from which the target codes in the Map are drawn')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}toValueSet uses Python identifier toValueSet
    __toValueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'toValueSet'), 'toValueSet', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntrySummary_httpwww_omg_orgspecCTS21_1MapCatalogtoValueSet', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 127, 5), )

    
    toValueSet = property(__toValueSet.value, __toValueSet.set, None, u'the  from which the source codes in the Map are drawn')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapCatalog}currentVersion uses Python identifier currentVersion
    __currentVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_map, u'currentVersion'), 'currentVersion', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntrySummary_httpwww_omg_orgspecCTS21_1MapCatalogcurrentVersion', False, pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 132, 5), )

    
    currentVersion = property(__currentVersion.value, __currentVersion.set, None, u'a reference to the map version with the  tag, if any')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute mapName uses Python identifier mapName
    __mapName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mapName'), 'mapName', '__httpwww_omg_orgspecCTS21_1MapCatalog_MapCatalogEntrySummary_mapName', MapName, required=True)
    __mapName._DeclarationLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 138, 4)
    __mapName._UseLocation = pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 138, 4)
    
    mapName = property(__mapName.value, __mapName.set, None, u'the name by which the map is known within the context of the CTS service instance')

    _ElementMap.update({
        __fromCodeSystem.name() : __fromCodeSystem,
        __fromValueSet.name() : __fromValueSet,
        __toCodeSystem.name() : __toCodeSystem,
        __toValueSet.name() : __toValueSet,
        __currentVersion.name() : __currentVersion
    })
    _AttributeMap.update({
        __mapName.name() : __mapName
    })
_Namespace_map.addCategoryObject('typeBinding', u'MapCatalogEntrySummary', MapCatalogEntrySummary)


# Complex type {http://www.omg.org/spec/CTS2/1.1/MapVersion}MapVersionDirectoryEntry with content type ELEMENT_ONLY
class MapVersionDirectoryEntry (ResourceVersionDescriptionDirectoryEntry):
    """A synopsis of a  along with information about how to access the complete resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapVersionDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 115, 1)
    _ElementMap = ResourceVersionDescriptionDirectoryEntry._ElementMap.copy()
    _AttributeMap = ResourceVersionDescriptionDirectoryEntry._AttributeMap.copy()
    # Base type is ResourceVersionDescriptionDirectoryEntry
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Element officialResourceVersionId ({http://www.omg.org/spec/CTS2/1.1/Core}officialResourceVersionId) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescriptionDirectoryEntry
    
    # Element officialReleaseDate ({http://www.omg.org/spec/CTS2/1.1/Core}officialReleaseDate) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescriptionDirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}versionOf uses Python identifier versionOf
    __versionOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionOf'), 'versionOf', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersionDirectoryEntry_httpwww_omg_orgspecCTS21_1MapVersionversionOf', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 122, 5), )

    
    versionOf = property(__versionOf.value, __versionOf.set, None, u'a reference to the map that this is a version of')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/MapVersion}versionTag uses Python identifier versionTag
    __versionTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionTag'), 'versionTag', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersionDirectoryEntry_httpwww_omg_orgspecCTS21_1MapVersionversionTag', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 127, 5), )

    
    versionTag = property(__versionTag.value, __versionTag.set, None, u'a reference to a version tag assigned to this entry by the implementing service')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute documentURI inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescriptionDirectoryEntry
    
    # Attribute mapVersionName uses Python identifier mapVersionName
    __mapVersionName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'mapVersionName'), 'mapVersionName', '__httpwww_omg_orgspecCTS21_1MapVersion_MapVersionDirectoryEntry_mapVersionName', MapVersionName, required=True)
    __mapVersionName._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 133, 4)
    __mapVersionName._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 133, 4)
    
    mapVersionName = property(__mapVersionName.value, __mapVersionName.set, None, u'a name that uniquely identifies the map version within the context of the service')

    _ElementMap.update({
        __versionOf.name() : __versionOf,
        __versionTag.name() : __versionTag
    })
    _AttributeMap.update({
        __mapVersionName.name() : __mapVersionName
    })
_Namespace_mapversion.addCategoryObject('typeBinding', u'MapVersionDirectoryEntry', MapVersionDirectoryEntry)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSet}ValueSetCatalogEntrySummary with content type ELEMENT_ONLY
class ValueSetCatalogEntrySummary (AbstractResourceDescriptionDirectoryEntry):
    """A synopsis of a  along with information about how to access the complete resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valueset, u'ValueSetCatalogEntrySummary')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 82, 1)
    _ElementMap = AbstractResourceDescriptionDirectoryEntry._ElementMap.copy()
    _AttributeMap = AbstractResourceDescriptionDirectoryEntry._AttributeMap.copy()
    # Base type is AbstractResourceDescriptionDirectoryEntry
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSet}currentDefinition uses Python identifier currentDefinition
    __currentDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valueset, u'currentDefinition'), 'currentDefinition', '__httpwww_omg_orgspecCTS21_1ValueSet_ValueSetCatalogEntrySummary_httpwww_omg_orgspecCTS21_1ValueSetcurrentDefinition', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 89, 5), )

    
    currentDefinition = property(__currentDefinition.value, __currentDefinition.set, None, u'the name and URI of the value set definition that is associated with the  tag for this value set. ')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute valueSetName uses Python identifier valueSetName
    __valueSetName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, u'valueSetName'), 'valueSetName', '__httpwww_omg_orgspecCTS21_1ValueSet_ValueSetCatalogEntrySummary_valueSetName', ValueSetName, required=True)
    __valueSetName._DeclarationLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 95, 4)
    __valueSetName._UseLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 95, 4)
    
    valueSetName = property(__valueSetName.value, __valueSetName.set, None, u'the local identifier assigned to the value set within the context of the service')

    _ElementMap.update({
        __currentDefinition.name() : __currentDefinition
    })
    _AttributeMap.update({
        __valueSetName.name() : __valueSetName
    })
_Namespace_valueset.addCategoryObject('typeBinding', u'ValueSetCatalogEntrySummary', ValueSetCatalogEntrySummary)


# Complex type {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}ValueSetDefinitionDirectoryEntry with content type ELEMENT_ONLY
class ValueSetDefinitionDirectoryEntry (ResourceVersionDescriptionDirectoryEntry):
    """A synopsis of a  along with information about how to access the complete resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinitionDirectoryEntry')
    _XSDLocation = pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 318, 1)
    _ElementMap = ResourceVersionDescriptionDirectoryEntry._ElementMap.copy()
    _AttributeMap = ResourceVersionDescriptionDirectoryEntry._AttributeMap.copy()
    # Base type is ResourceVersionDescriptionDirectoryEntry
    
    # Element resourceSynopsis ({http://www.omg.org/spec/CTS2/1.1/Core}resourceSynopsis) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Element officialResourceVersionId ({http://www.omg.org/spec/CTS2/1.1/Core}officialResourceVersionId) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescriptionDirectoryEntry
    
    # Element officialReleaseDate ({http://www.omg.org/spec/CTS2/1.1/Core}officialReleaseDate) inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescriptionDirectoryEntry
    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}definedValueSet uses Python identifier definedValueSet
    __definedValueSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'definedValueSet'), 'definedValueSet', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionDirectoryEntry_httpwww_omg_orgspecCTS21_1ValueSetDefinitiondefinedValueSet', False, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 325, 5), )

    
    definedValueSet = property(__definedValueSet.value, __definedValueSet.set, None, u'the value set that this definition applies to')

    
    # Element {http://www.omg.org/spec/CTS2/1.1/ValueSetDefinition}versionTag uses Python identifier versionTag
    __versionTag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'versionTag'), 'versionTag', '__httpwww_omg_orgspecCTS21_1ValueSetDefinition_ValueSetDefinitionDirectoryEntry_httpwww_omg_orgspecCTS21_1ValueSetDefinitionversionTag', True, pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 330, 5), )

    
    versionTag = property(__versionTag.value, __versionTag.set, None, u'a version tag assigned to this entry by the service instance')

    
    # Attribute href inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute resourceName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute matchStrength inherited from {http://www.omg.org/spec/CTS2/1.1/Core}DirectoryEntry
    
    # Attribute about inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute formalName inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceDescriptionDirectoryEntry
    
    # Attribute documentURI inherited from {http://www.omg.org/spec/CTS2/1.1/Core}ResourceVersionDescriptionDirectoryEntry
    _ElementMap.update({
        __definedValueSet.name() : __definedValueSet,
        __versionTag.name() : __versionTag
    })
    _AttributeMap.update({
        
    })
_Namespace_valuesetdefinition.addCategoryObject('typeBinding', u'ValueSetDefinitionDirectoryEntry', ValueSetDefinitionDirectoryEntry)


EntityExpression = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'EntityExpression'), EntityExpression_, documentation=u'An expression in a given ontology language and syntax that describes or defines an entity. Examples might include descriptions of entities in Manchester OWL Syntax, RDF, SNOMED Concept Expression,\n\t\t\t\tetc.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 848, 1))
_Namespace_core.addCategoryObject('elementBinding', EntityExpression.name().localName(), EntityExpression)

EntityDescription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityDescription'), EntityDescription_, documentation=u'A choice of the possible types of entity description', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 10, 1))
_Namespace_entity.addCategoryObject('elementBinding', EntityDescription.name().localName(), EntityDescription)

ResolvedValueSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ResolvedValueSet'), ResolvedValueSet_, documentation=u'The result of resolving a specific value set definition against a known set of code system versions.  consists of a header that carries sufficient information that the resolution\n\t\t\t\toperation would be repeatable and the result of the resolution, which consists of set of EntityReferences.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 398, 1))
_Namespace_valuesetdefinition.addCategoryObject('elementBinding', ResolvedValueSet.name().localName(), ResolvedValueSet)

AssociationMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationMsg'), AssociationMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 113, 1))
_Namespace_association.addCategoryObject('elementBinding', AssociationMsg.name().localName(), AssociationMsg)

CodeSystemCatalogEntryMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'CodeSystemCatalogEntryMsg'), CodeSystemCatalogEntryMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 80, 1))
_Namespace_codesystem.addCategoryObject('elementBinding', CodeSystemCatalogEntryMsg.name().localName(), CodeSystemCatalogEntryMsg)

CodeSystemVersionCatalogEntryMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'CodeSystemVersionCatalogEntryMsg'), CodeSystemVersionCatalogEntryMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 83, 1))
_Namespace_codesystemversion.addCategoryObject('elementBinding', CodeSystemVersionCatalogEntryMsg.name().localName(), CodeSystemVersionCatalogEntryMsg)

ConceptDomainCatalogEntryMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'ConceptDomainCatalogEntryMsg'), ConceptDomainCatalogEntryMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 53, 1))
_Namespace_conceptdomain.addCategoryObject('elementBinding', ConceptDomainCatalogEntryMsg.name().localName(), ConceptDomainCatalogEntryMsg)

ConceptDomainBindingMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'ConceptDomainBindingMsg'), ConceptDomainBindingMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 68, 1))
_Namespace_conceptdomainbinding.addCategoryObject('elementBinding', ConceptDomainBindingMsg.name().localName(), ConceptDomainBindingMsg)

EntityDescriptionMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityDescriptionMsg'), EntityDescriptionMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 515, 1))
_Namespace_entity.addCategoryObject('elementBinding', EntityDescriptionMsg.name().localName(), EntityDescriptionMsg)

EntityReferenceMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityReferenceMsg'), EntityReferenceMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 530, 1))
_Namespace_entity.addCategoryObject('elementBinding', EntityReferenceMsg.name().localName(), EntityReferenceMsg)

MapCatalogEntryMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'MapCatalogEntryMsg'), MapCatalogEntryMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 73, 1))
_Namespace_map.addCategoryObject('elementBinding', MapCatalogEntryMsg.name().localName(), MapCatalogEntryMsg)

MapVersionMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapVersionMsg'), MapVersionMsg_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 83, 1))
_Namespace_mapversion.addCategoryObject('elementBinding', MapVersionMsg.name().localName(), MapVersionMsg)

MapEntryMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapEntryMsg'), MapEntryMsg_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 315, 1))
_Namespace_mapversion.addCategoryObject('elementBinding', MapEntryMsg.name().localName(), MapEntryMsg)

StatementMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'StatementMsg'), StatementMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 102, 1))
_Namespace_stmt.addCategoryObject('elementBinding', StatementMsg.name().localName(), StatementMsg)

ChangeSetMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ChangeSetMsg'), ChangeSetMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 68, 1))
_Namespace.addCategoryObject('elementBinding', ChangeSetMsg.name().localName(), ChangeSetMsg)

ValueSetCatalogEntryMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'ValueSetCatalogEntryMsg'), ValueSetCatalogEntryMsg_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 50, 1))
_Namespace_valueset.addCategoryObject('elementBinding', ValueSetCatalogEntryMsg.name().localName(), ValueSetCatalogEntryMsg)

ValueSetDefinitionMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinitionMsg'), ValueSetDefinitionMsg_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 285, 1))
_Namespace_valuesetdefinition.addCategoryObject('elementBinding', ValueSetDefinitionMsg.name().localName(), ValueSetDefinitionMsg)

ResolvedValueSetMsg = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ResolvedValueSetMsg'), ResolvedValueSetMsg_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 491, 1))
_Namespace_valuesetdefinition.addCategoryObject('elementBinding', ResolvedValueSetMsg.name().localName(), ResolvedValueSetMsg)

ValueSetDefinitionEntry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinitionEntry'), ValueSetDefinitionEntry_, documentation=u'An element of a value set definition that, when resolved yields a set of entity references that are to be included in, excluded from or intersected with the set of elements that represent the full resolution of\n\t\t\t\tthe definition.Note that only  entity references are included.  entity references may never be considered for inclusion or exclusion in the resolution of a value set definition.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 32, 1))
_Namespace_valuesetdefinition.addCategoryObject('elementBinding', ValueSetDefinitionEntry.name().localName(), ValueSetDefinitionEntry)

ResolvedValueSetSummary = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ResolvedValueSetSummary'), ResolvedValueSetSummary_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 451, 1))
_Namespace_valuesetdefinition.addCategoryObject('elementBinding', ResolvedValueSetSummary.name().localName(), ResolvedValueSetSummary)

Association = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'Association'), Association_, documentation=u'A "semantic" assertion about a relationship between a  entity and a target entity, literal or compound expression as represented by an unnamed blank node ("bnode"). ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 9, 1))
_Namespace_association.addCategoryObject('elementBinding', Association.name().localName(), Association)

ConceptDomainBinding = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'ConceptDomainBinding'), ConceptDomainBinding_, documentation=u'The binding of a and a  that supplies the set of permissible value meanings in a given context.  can also bind specific value set definitions\n\t\t\t\tand/or specific code system versions where desired. ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 8, 1))
_Namespace_conceptdomainbinding.addCategoryObject('elementBinding', ConceptDomainBinding.name().localName(), ConceptDomainBinding)

MapEntry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapEntry'), MapEntry_, documentation=u' defines a set of rules that identify how a single Entity maps to zero or more target Entities. A  instance is uniquely identified by the combination of\n\t\t\t\tthe \n\t\t\t\t and the  entity identifier.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 172, 1))
_Namespace_mapversion.addCategoryObject('elementBinding', MapEntry.name().localName(), MapEntry)

Statement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'Statement'), Statement_, documentation=u'An assertion about a CTS model element. ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 7, 1))
_Namespace_stmt.addCategoryObject('elementBinding', Statement.name().localName(), Statement)

ChangeSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'ChangeSet'), ChangeSet_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 25, 1))
_Namespace.addCategoryObject('elementBinding', ChangeSet.name().localName(), ChangeSet)

AssociationDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationDirectory'), AssociationDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 132, 1))
_Namespace_association.addCategoryObject('elementBinding', AssociationDirectory.name().localName(), AssociationDirectory)

AssociationList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationList'), AssociationList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 198, 1))
_Namespace_association.addCategoryObject('elementBinding', AssociationList.name().localName(), AssociationList)

AssociationGraph = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'AssociationGraph'), AssociationGraph_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 231, 1))
_Namespace_association.addCategoryObject('elementBinding', AssociationGraph.name().localName(), AssociationGraph)

CodeSystemCatalogEntryDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'CodeSystemCatalogEntryDirectory'), CodeSystemCatalogEntryDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 99, 1))
_Namespace_codesystem.addCategoryObject('elementBinding', CodeSystemCatalogEntryDirectory.name().localName(), CodeSystemCatalogEntryDirectory)

CodeSystemCatalogEntryList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'CodeSystemCatalogEntryList'), CodeSystemCatalogEntryList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 141, 1))
_Namespace_codesystem.addCategoryObject('elementBinding', CodeSystemCatalogEntryList.name().localName(), CodeSystemCatalogEntryList)

CodeSystemVersionCatalogEntryDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'CodeSystemVersionCatalogEntryDirectory'), CodeSystemVersionCatalogEntryDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 101, 1))
_Namespace_codesystemversion.addCategoryObject('elementBinding', CodeSystemVersionCatalogEntryDirectory.name().localName(), CodeSystemVersionCatalogEntryDirectory)

CodeSystemVersionCatalogEntryList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'CodeSystemVersionCatalogEntryList'), CodeSystemVersionCatalogEntryList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 144, 1))
_Namespace_codesystemversion.addCategoryObject('elementBinding', CodeSystemVersionCatalogEntryList.name().localName(), CodeSystemVersionCatalogEntryList)

ConceptDomainCatalogEntryDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'ConceptDomainCatalogEntryDirectory'), ConceptDomainCatalogEntryDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 71, 1))
_Namespace_conceptdomain.addCategoryObject('elementBinding', ConceptDomainCatalogEntryDirectory.name().localName(), ConceptDomainCatalogEntryDirectory)

ConceptDomainCatalogEntryList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'ConceptDomainCatalogEntryList'), ConceptDomainCatalogEntryList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 116, 1))
_Namespace_conceptdomain.addCategoryObject('elementBinding', ConceptDomainCatalogEntryList.name().localName(), ConceptDomainCatalogEntryList)

ConceptDomainBindingDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'ConceptDomainBindingDirectory'), ConceptDomainBindingDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 86, 1))
_Namespace_conceptdomainbinding.addCategoryObject('elementBinding', ConceptDomainBindingDirectory.name().localName(), ConceptDomainBindingDirectory)

ConceptDomainBindingList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'ConceptDomainBindingList'), ConceptDomainBindingList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 132, 1))
_Namespace_conceptdomainbinding.addCategoryObject('elementBinding', ConceptDomainBindingList.name().localName(), ConceptDomainBindingList)

EntityDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityDirectory'), EntityDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 548, 1))
_Namespace_entity.addCategoryObject('elementBinding', EntityDirectory.name().localName(), EntityDirectory)

EntityList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityList'), EntityList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 576, 1))
_Namespace_entity.addCategoryObject('elementBinding', EntityList.name().localName(), EntityList)

MapCatalogEntryDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'MapCatalogEntryDirectory'), MapCatalogEntryDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 91, 1))
_Namespace_map.addCategoryObject('elementBinding', MapCatalogEntryDirectory.name().localName(), MapCatalogEntryDirectory)

MapCatalogEntryList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'MapCatalogEntryList'), MapCatalogEntryList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 147, 1))
_Namespace_map.addCategoryObject('elementBinding', MapCatalogEntryList.name().localName(), MapCatalogEntryList)

MapVersionDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapVersionDirectory'), MapVersionDirectory_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 101, 1))
_Namespace_mapversion.addCategoryObject('elementBinding', MapVersionDirectory.name().localName(), MapVersionDirectory)

MapVersionList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapVersionList'), MapVersionList_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 142, 1))
_Namespace_mapversion.addCategoryObject('elementBinding', MapVersionList.name().localName(), MapVersionList)

MapEntryDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapEntryDirectory'), MapEntryDirectory_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 333, 1))
_Namespace_mapversion.addCategoryObject('elementBinding', MapEntryDirectory.name().localName(), MapEntryDirectory)

MapEntryList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapEntryList'), MapEntryList_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 369, 1))
_Namespace_mapversion.addCategoryObject('elementBinding', MapEntryList.name().localName(), MapEntryList)

StatementDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'StatementDirectory'), StatementDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 114, 1))
_Namespace_stmt.addCategoryObject('elementBinding', StatementDirectory.name().localName(), StatementDirectory)

StatementList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'StatementList'), StatementList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 140, 1))
_Namespace_stmt.addCategoryObject('elementBinding', StatementList.name().localName(), StatementList)

IteratableChangeSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'IteratableChangeSet'), IteratableChangeSet_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 91, 1))
_Namespace.addCategoryObject('elementBinding', IteratableChangeSet.name().localName(), IteratableChangeSet)

ValueSetCatalogEntryDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'ValueSetCatalogEntryDirectory'), ValueSetCatalogEntryDirectory_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 68, 1))
_Namespace_valueset.addCategoryObject('elementBinding', ValueSetCatalogEntryDirectory.name().localName(), ValueSetCatalogEntryDirectory)

ValueSetCatalogEntryList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'ValueSetCatalogEntryList'), ValueSetCatalogEntryList_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 104, 1))
_Namespace_valueset.addCategoryObject('elementBinding', ValueSetCatalogEntryList.name().localName(), ValueSetCatalogEntryList)

ValueSetDefinitionDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinitionDirectory'), ValueSetDefinitionDirectory_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 303, 1))
_Namespace_valuesetdefinition.addCategoryObject('elementBinding', ValueSetDefinitionDirectory.name().localName(), ValueSetDefinitionDirectory)

ValueSetDefinitionList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinitionList'), ValueSetDefinitionList_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 340, 1))
_Namespace_valuesetdefinition.addCategoryObject('elementBinding', ValueSetDefinitionList.name().localName(), ValueSetDefinitionList)

IteratableResolvedValueSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'IteratableResolvedValueSet'), IteratableResolvedValueSet_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 427, 1))
_Namespace_valuesetdefinition.addCategoryObject('elementBinding', IteratableResolvedValueSet.name().localName(), IteratableResolvedValueSet)

ResolvedValueSetDirectory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ResolvedValueSetDirectory'), ResolvedValueSetDirectory_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 459, 1))
_Namespace_valuesetdefinition.addCategoryObject('elementBinding', ResolvedValueSetDirectory.name().localName(), ResolvedValueSetDirectory)

CodeSystemCatalogEntry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'CodeSystemCatalogEntry'), CodeSystemCatalogEntry_, documentation=u'Metadata and access information about a code system.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 8, 1))
_Namespace_codesystem.addCategoryObject('elementBinding', CodeSystemCatalogEntry.name().localName(), CodeSystemCatalogEntry)

CodeSystemVersionCatalogEntry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'CodeSystemVersionCatalogEntry'), CodeSystemVersionCatalogEntry_, documentation=u' is a collection of assertions about one or more entities. If the  of a  is the set of assertions made the resource is fixed, meaning\n\t\t\t\tthat if one knows the  assigned to the version and the specific  from which the version instance was derived, the set of assertions is known as well.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 8, 1))
_Namespace_codesystemversion.addCategoryObject('elementBinding', CodeSystemVersionCatalogEntry.name().localName(), CodeSystemVersionCatalogEntry)

ConceptDomainCatalogEntry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'ConceptDomainCatalogEntry'), ConceptDomainCatalogEntry_, documentation=u'Metadata about what, in ISO-11179, is called a "Data Element Concept" - "a that can be expressed in the form of a , described independently of any particularrepresentation."The\n\t\t\t\tHL7 SFM defines a  as "A named category of like concepts (a semantic type) that will be bound to one or more attributes in a static model whose datatypes are coded. Concept Domains exist to constrain the\n\t\t\t\tintent of the coded element while deferring the association of the element to a specific coded terminology until later in the model development process. Thus, Concept Domains are independent of any specific vocabulary or\n\t\t\t\tcodesystem.Concept Domains represents an abstract conceptual space such as \'countries of the world\', \'the gender of a person used for administrative purposes\', \'languages of the world\', etc."', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 9, 1))
_Namespace_conceptdomain.addCategoryObject('elementBinding', ConceptDomainCatalogEntry.name().localName(), ConceptDomainCatalogEntry)

MapCatalogEntry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'MapCatalogEntry'), MapCatalogEntry_, documentation=u'An entry in a catalog of maps - organized collections of rules that describe how information encoded using one set of value meanings can be transformed into a second, related set of meanings. A map catalog\n\t\t\t\tcontains information about who is responsible for creating and distributing the rules, the source code system or value set, the target code system or value set, how often the rules are updated, how they are distributed,\n\t\t\t\tetc.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 9, 1))
_Namespace_map.addCategoryObject('elementBinding', MapCatalogEntry.name().localName(), MapCatalogEntry)

MapVersion = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'MapVersion'), MapVersion_, documentation=u'A specific version of a  is bound to specific code system versions and/or value set versions and references a set of mapping entries () that, if the resource is ,\n\t\t\t\tare fixed with respect to this version.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 10, 1))
_Namespace_mapversion.addCategoryObject('elementBinding', MapVersion.name().localName(), MapVersion)

ValueSetCatalogEntry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'ValueSetCatalogEntry'), ValueSetCatalogEntry_, documentation=u'An entry in a value set catalog that describes the purpose, use, etc. of a value set.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 9, 1))
_Namespace_valueset.addCategoryObject('elementBinding', ValueSetCatalogEntry.name().localName(), ValueSetCatalogEntry)

ValueSetDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'ValueSetDefinition'), ValueSetDefinition_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 9, 1))
_Namespace_valuesetdefinition.addCategoryObject('elementBinding', ValueSetDefinition.name().localName(), ValueSetDefinition)



AssociationRendering._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'languageAndSyntax'), OntologyLanguageAndSyntax, scope=AssociationRendering, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 105, 3)))

AssociationRendering._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'representation'), OpaqueData, scope=AssociationRendering, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 106, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociationRendering._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'languageAndSyntax')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 105, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AssociationRendering._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'representation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 106, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AssociationRendering._Automaton = _BuildAutomaton()




def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 98, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 98, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
tsAnyType._Automaton = _BuildAutomaton_()




OpaqueData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'value'), tsAnyType, scope=OpaqueData, documentation=u'the instance value. Note that instance value should be encoded in such a way that it allows embedded structures. As an example, in XML Schema, this encoding should be to xs:anyType or an\n\t\t\t\t\t\tequivalent.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 111, 3)))

OpaqueData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'format'), FormatReference, scope=OpaqueData, documentation=u'the format or encoding for This is typically recorded as the URI of a .', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3)))

OpaqueData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'language'), LanguageReference, scope=OpaqueData, documentation=u'a reference to the written or spoken language used in .', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3)))

OpaqueData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'schema'), DocumentURI, scope=OpaqueData, documentation=u'if the format of the document involves an XML encoding, this contains the URI of a document that carries the corresponding XML Schema or DTD.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OpaqueData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'value')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 111, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'format')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'language')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(OpaqueData._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'schema')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OpaqueData._Automaton = _BuildAutomaton_2()




EntityReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'entry'), EntityReference, scope=EntityReferenceList, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 730, 3)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 730, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EntityReferenceList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 730, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EntityReferenceList._Automaton = _BuildAutomaton_3()




ScopedEntityName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'namespace'), NamespaceIdentifier, scope=ScopedEntityName, documentation=u'an identifier that references a unique namespace URI within the context of the service', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 802, 3)))

ScopedEntityName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'name'), String, scope=ScopedEntityName, documentation=u'the local entity name within the context of the namespace. What is chosen for the entity name is service specific', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 807, 3)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ScopedEntityName._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'namespace')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 802, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ScopedEntityName._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'name')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 807, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ScopedEntityName._Automaton = _BuildAutomaton_4()




EntityExpression_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'ontologyLanguageAndSyntax'), OntologyLanguageAndSyntax, scope=EntityExpression_, documentation=u'the ontology language and syntax of the expression', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 861, 3)))

EntityExpression_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'expression'), OpaqueData, scope=EntityExpression_, documentation=u'the actual expression', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 866, 3)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityExpression_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'ontologyLanguageAndSyntax')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 861, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityExpression_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'expression')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 866, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EntityExpression_._Automaton = _BuildAutomaton_5()




CodeSystemVersionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'version'), NameAndMeaningReference, scope=CodeSystemVersionReference, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 993, 3)))

CodeSystemVersionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'codeSystem'), CodeSystemReference, scope=CodeSystemVersionReference, documentation=u'A reference to the code system that the version is a version of. Must be present if this information is known to the CTS service implementation.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 994, 3)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 994, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'version')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 993, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'codeSystem')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 994, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CodeSystemVersionReference._Automaton = _BuildAutomaton_6()




MapVersionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'mapVersion'), NameAndMeaningReference, scope=MapVersionReference, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1070, 3)))

MapVersionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'map'), MapReference, scope=MapVersionReference, documentation=u'a reference to the corresponding map. Must be present if it is known the implementing CTS service', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1071, 3)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1071, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapVersionReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'mapVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1070, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MapVersionReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'map')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1071, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapVersionReference._Automaton = _BuildAutomaton_7()




SourceAndRoleReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'source'), SourceReference, scope=SourceAndRoleReference, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1202, 3)))

SourceAndRoleReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'role'), RoleReference, scope=SourceAndRoleReference, documentation=u'a role that the source played in the creation of the containing resource', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1203, 3)))

SourceAndRoleReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'bibliographicLink'), OpaqueData, scope=SourceAndRoleReference, documentation=u'additional bibliographic information such as page number, edition, etc.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1208, 3)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1203, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1208, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SourceAndRoleReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'source')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1202, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SourceAndRoleReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'role')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1203, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SourceAndRoleReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'bibliographicLink')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1208, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SourceAndRoleReference._Automaton = _BuildAutomaton_8()




ValueSetDefinitionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'valueSetDefinition'), NameAndMeaningReference, scope=ValueSetDefinitionReference, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1239, 3)))

ValueSetDefinitionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'valueSet'), ValueSetReference, scope=ValueSetDefinitionReference, documentation=u'A reference to the corresponding value set. Must be present if known to the implementing CTS service', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1240, 3)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1240, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'valueSetDefinition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1239, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'valueSet')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1240, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueSetDefinitionReference._Automaton = _BuildAutomaton_9()




Filter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'component'), FilterComponent, scope=Filter, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1297, 3)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Filter._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'component')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1297, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Filter._Automaton = _BuildAutomaton_10()




SortCriteria._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'entry'), SortCriterion, scope=SortCriteria, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1367, 3)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1367, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SortCriteria._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1367, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SortCriteria._Automaton = _BuildAutomaton_11()




ComponentReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'attributeReference'), LocalIdentifier, scope=ComponentReference, documentation=u'a reference to an attribute in a CTS model such as , , etc.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1396, 3)))

ComponentReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'propertyReference'), URIAndEntityName, scope=ComponentReference, documentation=u'a reference to a model . The reference target carries the URI and, optionally, namespace and name of the property predicate. ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1401, 3)))

ComponentReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'specialReference'), LocalIdentifier, scope=ComponentReference, documentation=u'the target of the reference is a special element such as the match strength of a search', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1406, 3)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ComponentReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'attributeReference')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1396, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ComponentReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'propertyReference')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1401, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ComponentReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'specialReference')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1406, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ComponentReference._Automaton = _BuildAutomaton_12()




ComponentReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'entry'), ComponentReference, scope=ComponentReferenceList, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1419, 3)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1419, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ComponentReferenceList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1419, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ComponentReferenceList._Automaton = _BuildAutomaton_13()




OntologyLanguageAndSyntax._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'ontologyLanguage'), OntologyLanguageReference, scope=OntologyLanguageAndSyntax, documentation=u'The formal language (semantics) of the expression.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1607, 3)))

OntologyLanguageAndSyntax._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'ontologySyntax'), OntologySyntaxReference, scope=OntologyLanguageAndSyntax, documentation=u'The syntax of the expression.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1612, 3)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OntologyLanguageAndSyntax._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'ontologyLanguage')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1607, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OntologyLanguageAndSyntax._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'ontologySyntax')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1612, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OntologyLanguageAndSyntax._Automaton = _BuildAutomaton_14()




SourceAndNotation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndNotationDescription'), String, scope=SourceAndNotation, documentation=u'a textual description of where the specified resource version was derived from. This parameter must be supplied if a reasonable  for the source document is not\n\t\t\t\t\t\tavailable.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1913, 3)))

SourceAndNotation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceDocument'), PersistentURI, scope=SourceAndNotation, documentation=u'a persistent URI that references the document from which the resource version was derived. This URI may be resolvable to a digital resource or may be the name of a book, publication or other external\n\t\t\t\t\t\tdocument.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1919, 3)))

SourceAndNotation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceLanguage'), OntologyLanguageReference, scope=SourceAndNotation, documentation=u'the formal language, if any, that the source for the resource version is expressed in. Examples include Common Logic, OWL, OWL-DL, ,\n\t\t\t\t\t\tetc.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1925, 3)))

SourceAndNotation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceDocumentSyntax'), OntologySyntaxReference, scope=SourceAndNotation, documentation=u'the syntax of the source of the resource version, if known. Examples might include rdf/xml, Turtle, Manchester Syntax, CSV, etc.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1931, 3)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1913, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1919, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1925, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1931, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SourceAndNotation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndNotationDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1913, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SourceAndNotation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceDocument')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1919, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SourceAndNotation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceLanguage')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1925, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SourceAndNotation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceDocumentSyntax')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1931, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SourceAndNotation._Automaton = _BuildAutomaton_15()




AnonymousStatement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'predicate'), PredicateReference, scope=AnonymousStatement, documentation=u'the predicate of the anonymous statement', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1982, 3)))

AnonymousStatement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'target'), StatementTarget, scope=AnonymousStatement, documentation=u'the target of the anonymous statement', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1987, 3)))

AnonymousStatement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'statmentQualifier'), Property, scope=AnonymousStatement, documentation=u'assertions whose subject is the anonymous statement ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1992, 3)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1992, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousStatement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'predicate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1982, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AnonymousStatement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'target')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1987, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AnonymousStatement._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'statmentQualifier')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1992, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AnonymousStatement._Automaton = _BuildAutomaton_16()




Parameter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'val'), String, scope=Parameter, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2051, 3)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Parameter._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'val')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2051, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Parameter._Automaton = _BuildAutomaton_17()




RESTResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceRoot'), ServiceURI, scope=RESTResource, documentation=u'The URI of the REST service.  As an example, if the resource URI\n\t\t\t\t\t\twas "http://informatics.mayo.edu/cts2/rest/codesystems", the resourceRoot would be\n\t\t\t\t\t\t"http://informatics.mayo.edu/cts2/rest/"', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2062, 3)))

RESTResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceURI'), RenderingURI, scope=RESTResource, documentation=u'The  URI of the resource with respect to the resourceRoot.  As an example,\n\t\t\t\t\t\tif the resource URI was "http://informatics.mayo.edu/cts2/rest/codesystems", the resourceURI would\n\t\t\t\t\t\tbe "codesystems".  Fragment and query identifiers should also be included.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2070, 3)))

RESTResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'parameter'), Parameter, scope=RESTResource, documentation=u'The paramaters that were used in executing the query. This carries all of the parameters that\n\t\t\t\t\tare needed to reconstruct the complete query in either a RESTful or procedural environment. The service provider\n\t\t\t\t\tmay or may not include non-CTS2 related parameters such as security tokens, routing requests, etc.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2078, 3)))

RESTResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'accessDate'), DateAndTime, scope=RESTResource, documentation=u'The date and time that the resource was accessed.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2086, 3)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2078, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESTResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceRoot')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2062, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESTResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceURI')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2070, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RESTResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'parameter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2078, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RESTResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'accessDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2086, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RESTResource._Automaton = _BuildAutomaton_18()




Message._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'heading'), RESTResource, scope=Message, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Message._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Message._Automaton = _BuildAutomaton_19()




EntityDescription_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'namedEntity'), NamedEntityDescription, scope=EntityDescription_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 22, 3)))

EntityDescription_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'anonymousEntity'), AnonymousEntityDescription, scope=EntityDescription_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 23, 3)))

EntityDescription_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'classDescription'), ClassDescription, scope=EntityDescription_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 24, 3)))

EntityDescription_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'dataTypeDescription'), DataTypeDescription, scope=EntityDescription_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 25, 3)))

EntityDescription_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateDescription'), PredicateDescription, scope=EntityDescription_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 26, 3)))

EntityDescription_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'objectPropertyDescription'), ObjectPropertyDescription, scope=EntityDescription_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 27, 3)))

EntityDescription_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'dataPropertyDescription'), DataPropertyDescription, scope=EntityDescription_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 28, 3)))

EntityDescription_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'annotationPropertyDescription'), AnnotationPropertyDescription, scope=EntityDescription_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 29, 3)))

EntityDescription_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'namedIndividual'), NamedIndividualDescription, scope=EntityDescription_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 30, 3)))

EntityDescription_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'anonymousIndividual'), AnonymousIndividualDescription, scope=EntityDescription_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 31, 3)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescription_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'namedEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 22, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescription_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'anonymousEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 23, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescription_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'classDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 24, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescription_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'dataTypeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 25, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescription_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 26, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescription_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'objectPropertyDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 27, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescription_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'dataPropertyDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 28, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescription_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'annotationPropertyDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 29, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescription_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'namedIndividual')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 30, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescription_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'anonymousIndividual')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 31, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EntityDescription_._Automaton = _BuildAutomaton_20()




StatementSubject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'resource'), ExternalURI, scope=StatementSubject, documentation=u'A non-entity statement subject such as the URI of a , , , etc.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 69, 3)))

StatementSubject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entity'), URIAndEntityName, scope=StatementSubject, documentation=u'The subject of a statement about a class, role or individual.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 74, 3)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 69, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 74, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StatementSubject._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'resource')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 69, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StatementSubject._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 74, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
StatementSubject._Automaton = _BuildAutomaton_21()




StatementQualifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'qualifierPredicate'), URIAndEntityName, scope=StatementQualifier, documentation=u'A reference to the statement qualifier predicate. ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 88, 3)))

StatementQualifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'associatedAttribute'), ModelAttributeReference, scope=StatementQualifier, documentation=u'The CTS model attribute that represents this particular statement qualifier', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 93, 3)))

StatementQualifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'target'), StatementTarget, scope=StatementQualifier, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 98, 3)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 93, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatementQualifier._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'qualifierPredicate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 88, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatementQualifier._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'associatedAttribute')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 93, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StatementQualifier._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'target')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 98, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StatementQualifier._Automaton = _BuildAutomaton_22()




ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'association'), Association_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 48, 3)))

ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'codeSystem'), CodeSystemCatalogEntry_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 49, 3)))

ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'codeSystemVersion'), CodeSystemVersionCatalogEntry_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 50, 3)))

ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'conceptDomain'), ConceptDomainCatalogEntry_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 51, 3)))

ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'conceptDomainBinding'), ConceptDomainBinding_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 52, 3)))

ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'entityDescription'), EntityDescription_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 53, 3)))

ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'map'), MapCatalogEntry_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 54, 3)))

ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'mapVersion'), MapVersion_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 55, 3)))

ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'mapEntry'), MapEntry_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 56, 3)))

ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'statement'), Statement_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 57, 3)))

ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'valueSet'), ValueSetCatalogEntry_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 58, 3)))

ChangeableResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'valueSetDefinition'), ValueSetDefinition_, scope=ChangeableResource, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 59, 3)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'association')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 48, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'codeSystem')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 49, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'codeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 50, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'conceptDomain')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 51, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'conceptDomainBinding')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 52, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'entityDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 53, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'map')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 54, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'mapVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 55, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'mapEntry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 56, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'statement')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 57, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'valueSet')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 58, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableResource._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'valueSetDefinition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 59, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ChangeableResource._Automaton = _BuildAutomaton_23()




CompleteCodeSystemReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystem'), CodeSystemReference, scope=CompleteCodeSystemReference, documentation=u'A reference to the code system whose codes are to be included.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 188, 3)))

CompleteCodeSystemReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystemVersion'), CodeSystemVersionReference, scope=CompleteCodeSystemReference, documentation=u'A reference to the specific version of the code system to include. If not supplied, the specific version of the code system is determined in the resolution call itself.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 193, 3)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 193, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CompleteCodeSystemReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystem')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 188, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CompleteCodeSystemReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystemVersion')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 193, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CompleteCodeSystemReference._Automaton = _BuildAutomaton_24()




CompleteValueSetReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'valueSet'), ValueSetReference, scope=CompleteValueSetReference, documentation=u'a reference to the value set whose definition supplies a set of entity references.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 209, 3)))

CompleteValueSetReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'valueSetDefinition'), ValueSetReference, scope=CompleteValueSetReference, documentation=u'a reference to a particular definition of  that is to be used in resolving this reference. If absent, the specific definition is determined by the resolve value set call. If present,\n\t\t\t\t\t\t\t must be a definition of  and will always be used to resolve this entity set.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 214, 3)))

CompleteValueSetReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'referenceCodeSystemVersion'), CodeSystemVersionReference, scope=CompleteValueSetReference, documentation=u'a reference to a  that will be used to resolve this call.  will only be used if one or more components of the resolution of \n\t\t\t\t\t\tidentify a code system without specifying a specific version. At most, only one version of a given code system may appear in the  list. While CTS service implementations\n\t\t\t\t\t\tmust resolve resolution calls for definitions that carry unused  entries, they may choose to issue a warning at the time the definition is created or loaded.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 220, 3)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 214, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 220, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CompleteValueSetReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'valueSet')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 209, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CompleteValueSetReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'valueSetDefinition')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 214, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CompleteValueSetReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'referenceCodeSystemVersion')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 220, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CompleteValueSetReference._Automaton = _BuildAutomaton_25()




PropertyQueryReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystem'), CodeSystemReference, scope=PropertyQueryReference, documentation=u'The code system that contains the assertions that form the attributes or properties to be tested.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 247, 3)))

PropertyQueryReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystemVersion'), CodeSystemVersionReference, scope=PropertyQueryReference, documentation=u'The version of the code system that makes the assertions. If present,  must be a version of . If this attribute is present, the referenced version of the code\n\t\t\t\t\t\tsystem will always be used to resolve the attributes or properties. If absent, the specific version of the code system to be used in resolution is determined in the resolve value set definition call\n\t\t\t\t\t\titself.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 252, 3)))

PropertyQueryReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'filter'), FilterComponent, scope=PropertyQueryReference, documentation=u'The filter to be applied to entities in the referenced code system. ', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 259, 3)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 252, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyQueryReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystem')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 247, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PropertyQueryReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystemVersion')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 252, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PropertyQueryReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'filter')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 259, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PropertyQueryReference._Automaton = _BuildAutomaton_26()




SpecificEntityList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'referencedEntity'), URIAndEntityName, scope=SpecificEntityList, documentation=u'the namespace / name or URI of an entity to be included', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 274, 3)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SpecificEntityList._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'referencedEntity')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 274, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SpecificEntityList._Automaton = _BuildAutomaton_27()




ResolvedValueSetHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolutionOf'), ValueSetDefinitionReference, scope=ResolvedValueSetHeader, documentation=u'the specific value set definition that was resolved', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 380, 3)))

ResolvedValueSetHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolvedUsingCodeSystem'), CodeSystemVersionReference, scope=ResolvedValueSetHeader, documentation=u'a reference to a code system version that was used in the resolution of this value set definition', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 385, 3)))

ResolvedValueSetHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'includesResolvedValueSet'), ResolvedValueSetHeader, scope=ResolvedValueSetHeader, documentation=u'If the value set includes other value sets, this contains the resolution information used to resolve the inner value sets.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 390, 3)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 385, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 390, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSetHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolutionOf')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 380, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSetHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolvedUsingCodeSystem')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 385, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSetHeader._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'includesResolvedValueSet')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 390, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResolvedValueSetHeader._Automaton = _BuildAutomaton_28()




ResolvedValueSet_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolutionInfo'), ResolvedValueSetHeader, scope=ResolvedValueSet_, documentation=u'the set of parameters that were used in the resolution of this set.  provides all the information necessary to recreate the actual  when presented to a\n\t\t\t\t\t\t\tCTS service instance that contains all of the necessary definitions and code system versions.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 410, 3)))

ResolvedValueSet_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), URIAndEntityName, scope=ResolvedValueSet_, documentation=u'a synopsis of the  that has been determined to be a member of the value set named in  according to the stated criteria or "bindings"', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 416, 3)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 416, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolutionInfo')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 410, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 416, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResolvedValueSet_._Automaton = _BuildAutomaton_29()




AssociationMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'association'), Association_, scope=AssociationMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 122, 5)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociationMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AssociationMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'association')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 122, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AssociationMsg_._Automaton = _BuildAutomaton_30()




CodeSystemCatalogEntryMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'codeSystemCatalogEntry'), CodeSystemCatalogEntry_, scope=CodeSystemCatalogEntryMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 89, 5)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'codeSystemCatalogEntry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 89, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CodeSystemCatalogEntryMsg_._Automaton = _BuildAutomaton_31()




CodeSystemVersionCatalogEntryMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'codeSystemVersionCatalogEntry'), CodeSystemVersionCatalogEntry_, scope=CodeSystemVersionCatalogEntryMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 92, 5)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'codeSystemVersionCatalogEntry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 92, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CodeSystemVersionCatalogEntryMsg_._Automaton = _BuildAutomaton_32()




ConceptDomainCatalogEntryMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'conceptDomainCatalogEntry'), ConceptDomainCatalogEntry_, scope=ConceptDomainCatalogEntryMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 62, 5)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'conceptDomainCatalogEntry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 62, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConceptDomainCatalogEntryMsg_._Automaton = _BuildAutomaton_33()




ConceptDomainBindingMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'conceptDomainBinding'), ConceptDomainBinding_, scope=ConceptDomainBindingMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 77, 5)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'conceptDomainBinding')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 77, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConceptDomainBindingMsg_._Automaton = _BuildAutomaton_34()




def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntryDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'value')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 111, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EntryDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'format')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EntryDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'language')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(EntryDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'schema')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EntryDescription._Automaton = _BuildAutomaton_35()




EntityReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'name'), ScopedEntityName, scope=EntityReference, documentation=u'the namespace and name by which this entity is known within the context of the service implementation', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 674, 3)))

EntityReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'knownEntityDescription'), DescriptionInCodeSystem, scope=EntityReference, documentation=u'a reference to a version of a code system that makes one or more assertions about the referenced entity. Note that only one version of a given code system is allowed in the \n\t\t\t\t\t\tlist. Unless specified otherwise in a specific call, the code system version with the tag "CURRENT" must be used.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 679, 3)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 674, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 679, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EntityReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'name')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 674, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EntityReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'knownEntityDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 679, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EntityReference._Automaton = _BuildAutomaton_36()




FilterComponent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'matchAlgorithm'), MatchAlgorithmReference, scope=FilterComponent, documentation=u'the algorithm to be used for testing the referenced component. Examples might include "starts with", "regular expression match", "exists", "inRange", etc. NOTE: The CTS specification\n\t\t\t\t\t\t\t\tneeds to establish a core set of match algorithms that all compliant implementations must support.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1308, 5)))

FilterComponent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'matchValue'), String, scope=FilterComponent, documentation=u'the value to be used in comparison. The structure and format of  depends on the specific . As an example, a "startsWith" algorithm would be plain text, a\n\t\t\t\t\t\t\t\t"regularExpression" algorithm would have a regular expression while an "exists" algorithm would have nothing in the  attribute.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1314, 5)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1314, 5))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FilterComponent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'attributeReference')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1396, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FilterComponent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'propertyReference')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1401, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(FilterComponent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'specialReference')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1406, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FilterComponent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'matchAlgorithm')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1308, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FilterComponent._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'matchValue')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1314, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FilterComponent._Automaton = _BuildAutomaton_37()




StatementTarget._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'entity'), URIAndEntityName, scope=StatementTarget, documentation=u'the URI and optional namespace/name when the target type is ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1947, 3)))

StatementTarget._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'literal'), OpaqueData, scope=StatementTarget, documentation=u'the literal target when the statement type is ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1952, 3)))

StatementTarget._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'resource'), ExternalURI, scope=StatementTarget, documentation=u'the resource URI when the statement type is ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1957, 3)))

StatementTarget._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'bnode'), AnonymousStatement, scope=StatementTarget, documentation=u'a collection of statements about an anonymous subject', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1962, 3)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StatementTarget._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'entity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1947, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StatementTarget._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'literal')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1952, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StatementTarget._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resource')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1957, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StatementTarget._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'bnode')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1962, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StatementTarget._Automaton = _BuildAutomaton_38()




EntityDescriptionMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityDescription'), EntityDescription_, scope=EntityDescriptionMsg_, documentation=u'A choice of the possible types of entity description', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 10, 1)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'EntityDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 524, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EntityDescriptionMsg_._Automaton = _BuildAutomaton_39()




EntityReferenceMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityReference'), EntityReference, scope=EntityReferenceMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 539, 5)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityReferenceMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityReferenceMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityReference')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 539, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EntityReferenceMsg_._Automaton = _BuildAutomaton_40()




MapCatalogEntryMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'map'), MapCatalogEntry_, scope=MapCatalogEntryMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 82, 5)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'map')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 82, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapCatalogEntryMsg_._Automaton = _BuildAutomaton_41()




MapVersionMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapVersion'), MapVersion_, scope=MapVersionMsg_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 92, 5)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersionMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapVersionMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapVersion')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 92, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapVersionMsg_._Automaton = _BuildAutomaton_42()




MapTarget._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'rule'), MapRule, scope=MapTarget, documentation=u'a predicate of some sort that can be used to determine whether this entry meets the mapping criteria. If absent, the mapping is considered unconditional.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 265, 3)))

MapTarget._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapTo'), URIAndEntityName, scope=MapTarget, documentation=u'the target entity to be used if the rule is satisfied. If not present, the assumption is that the source entity maps to nothing in this set / rule', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 270, 3)))

MapTarget._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'targetDescription'), OpaqueData, scope=MapTarget, documentation=u'a description of the resulting rule. Can be used to carry text to instruct human beings how to do the mapping as well as additional machine readable instructions.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 275, 3)))

MapTarget._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'targetExpression'), EntityExpression_, scope=MapTarget, documentation=u'a formal expression that, when interpreted, results in the map target. This expression could carry an RDF fragment, an expression in the SNOMED-CT compositional grammar or something\n\t\t\t\t\t\telse.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 280, 3)))

MapTarget._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'correlation'), MapCorrelationReference, scope=MapTarget, documentation=u'a reference to how well the mapping correlates. Example correlations might be Exact, not mappable, partial overlap, narrower than, etc.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 286, 3)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 265, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 270, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 275, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 280, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 286, 3))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MapTarget._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'rule')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 265, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MapTarget._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapTo')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 270, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MapTarget._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'targetDescription')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 275, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MapTarget._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'targetExpression')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 280, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MapTarget._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'correlation')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 286, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MapTarget._Automaton = _BuildAutomaton_43()




def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapRule._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'value')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 111, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MapRule._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'format')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MapRule._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'language')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MapRule._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'schema')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapRule._Automaton = _BuildAutomaton_44()




MapEntryMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), MapEntry_, scope=MapEntryMsg_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 324, 5)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 324, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapEntryMsg_._Automaton = _BuildAutomaton_45()




StatementMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'statement'), Statement_, scope=StatementMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 107, 5)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatementMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StatementMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'statement')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 107, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StatementMsg_._Automaton = _BuildAutomaton_46()




ChangeSetMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'changeSet'), ChangeSet_, scope=ChangeSetMsg_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 82, 5)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 82, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeSetMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ChangeSetMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'changeSet')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 82, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ChangeSetMsg_._Automaton = _BuildAutomaton_47()




ValueSetCatalogEntryMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'valueSetCatalogEntry'), ValueSetCatalogEntry_, scope=ValueSetCatalogEntryMsg_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 59, 5)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntryMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valueset, u'valueSetCatalogEntry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 59, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueSetCatalogEntryMsg_._Automaton = _BuildAutomaton_48()




def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ExternalValueSetDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'value')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 111, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ExternalValueSetDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'format')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ExternalValueSetDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'language')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ExternalValueSetDefinition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'schema')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ExternalValueSetDefinition._Automaton = _BuildAutomaton_49()




ValueSetDefinitionMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'valueSetDefinition'), ValueSetDefinition_, scope=ValueSetDefinitionMsg_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 294, 5)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'valueSetDefinition')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 294, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueSetDefinitionMsg_._Automaton = _BuildAutomaton_50()




ResolvedValueSetMsg_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolvedValueSet'), ResolvedValueSet_, scope=ResolvedValueSetMsg_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 500, 5)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSetMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSetMsg_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolvedValueSet')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 500, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResolvedValueSetMsg_._Automaton = _BuildAutomaton_51()




Changeable._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'status'), StatusReference, scope=Changeable, documentation=u'the state of this model element in an externally defined workflow', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3)))

Changeable._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription'), ChangeDescription, scope=Changeable, documentation=u'Detailed information about the last change that resulted in this changeable element being in the state that it is now. changeDescription is only present in services that support the HISTORY profile and then only when specifically requested.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Changeable._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Changeable._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Changeable._Automaton = _BuildAutomaton_52()




def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 743, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 748, 5))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'name')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 743, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'knownEntityDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 748, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AnonymousEntityReference._Automaton = _BuildAutomaton_53()




SortCriterion._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'sortElement'), ComponentReference, scope=SortCriterion, documentation=u'the type and name of the attribute, property or special element to be sorted', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1330, 3)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SortCriterion._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortElement')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1330, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SortCriterion._Automaton = _BuildAutomaton_54()




EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID'), ScopedEntityName, scope=EntityDescriptionBase, documentation=u'the local namespace name and entity name that, together, uniquely name this referenced within the context of a CTS service instance. As an example, a service instance may choose to designate\n\t\t\t\t\t\tthe entity referenced by the  URI of http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#CabernetSauvignon with the  "wine" and the  "CabernetSauvignon".The \n\t\t\t\t\t\tportion of ScopedEntityName must uniquely name the particular entity within the context of the code system version. ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID'), ScopedEntityName, scope=EntityDescriptionBase, documentation=u"alternative unique identifiers that reference the  entity in the context of describing code system version. The  names the context from which the name (or code) is derived.\n\t\t\t\t\t\tNote that it is possible for the  and/or one more \n\t\t\t\t\t\t to be represented in the  attribute as well. This would occur when the  serves a dual role of unique identifier and human readable label. An example of\n\t\t\t\t\t\t\t would be the SNOMED-CT fully specified name, which serves as a unique identifier in human readable form. This might or might not also be considered a designation depending on the context\n\t\t\t\t\t\tand use case. Similarly, the SNOMED-CT Clinical Terms V3 Identifier (CTV3) and SNOMED-3 identifiers would appear here as well, as would the HL7's case sensitive and case insensitive unit of measure\n\t\t\t\t\t\tidentifiers.", location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion'), CodeSystemVersionReference, scope=EntityDescriptionBase, documentation=u'a reference to the version of an ontology or code system that makes the set of assertions contained in this description. Note that this references the "asserting", not the "containing" code system\n\t\t\t\t\t\tversion. As an example, the Wine Ontology imports the Food Ontology, which, in turn contains descriptions of PotableLiquid. A service that represented a (version of) the Wine Ontology would contain an entity\n\t\t\t\t\t\tdescription  "http://www.w3.org/TR/2003/PR-owl-guide-20031209/food#PotableLiquid" (namespaceName: food, name: PotableLiquid). The describingCodeSystemVersion, however, would be\n\t\t\t\t\t\t"http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#" even though this entity was described in the food ontology. Note also that it both the food and wine ontology were represented in a service, the service would\n\t\t\t\t\t\tcontain two entity descriptions - one from the food ontology perspective and one from the wine ontology perspective.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation'), Designation, scope=EntityDescriptionBase, documentation=u'a  A designation provides the\n\t\t\t\t\t\tstrongest clues as to the meaning of a class, predicate or individual. While designations are not mandatory in an entity description, as all that may be available to a service is a code, service implementers are\n\t\t\t\t\t\tstrongly encouraged to provide at least one preferred or alternate designation to make the description visible to text search engines.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition'), Definition, scope=EntityDescriptionBase, documentation=u'an explanation of the intended meaning of a concept. An  may have multiple , each derived from a different source, represented in a different language or having\n\t\t\t\t\t\ta different purpose. Definitions apply only to classes and predicates, not individuals.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'example'), Example, scope=EntityDescriptionBase, documentation=u'an example of an instance or instances of the referenced entity, typically written for human consumption. Examples apply only to classes and predicates, not individuals.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'note'), Comment, scope=EntityDescriptionBase, documentation=u'a note or comment about the history, status, use or other descriptions about the . Observe that , as used in the CTS specification, does include examples\n\t\t\t\t\t\tor definitions.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'property'), Property, scope=EntityDescriptionBase, documentation=u'additional "non-semantic" (annotation) assertions about the entity being described that do not fit into the , , or  or \n\t\t\t\t\t\tcategories.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements'), StatementDirectoryURI, scope=EntityDescriptionBase, documentation=u'a  that resolves to the list of  that were used in the assembly of this description.  need only be present in service instances that support the\n\t\t\t\t\t\t\t profile, and serves as a bridge between atomic structure contained in the source resource and the CTS rendering.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf'), AssociationDirectoryURI, scope=EntityDescriptionBase, documentation=u'an  that resolves to a list of active associations ("semantic" assertions) in which the  entity appears as a subject and that are  the\n\t\t\t\t\t\t\t.  is only included in an when resolution would yield at least one result. This attribute will only be present in CTS service\n\t\t\t\t\t\timplementations that support the  profile.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf'), AssociationDirectoryURI, scope=EntityDescriptionBase, documentation=u'a  that resolves to the list of active associations ("semantic" assertions) in which the  entity appears as a predicate and that are  the\n\t\t\t\t\t\t\t. is only included in an when resolution would yield at least one result. This attribute will only be present in CTS\n\t\t\t\t\t\tservice implementations that support the  profile.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf'), AssociationDirectoryURI, scope=EntityDescriptionBase, documentation=u'a  that resolves to the list of active associations ("semantic" assertions) in which the  entity appears as either a direct target or the target of a contained BNode and\n\t\t\t\t\t\tthat are  the . is only included in an when resolution would yield at least one result. This attribute will only be present\n\t\t\t\t\t\tin CTS service implementations that support the  profile.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent'), URIAndEntityName, scope=EntityDescriptionBase, documentation=u'the set of direct "parents" asserted by . It is the responsibility of the service to determine what predicate(s) represent "parent/child" relationships. Typically\n\t\t\t\t\t\t"parent" is associated with "rdfs:subClassOf" in the OWL/RDF world and skos:broader/skos:narrower in the SKOS environment. It is possible, however for some code systems to have other relationships as well. As an\n\t\t\t\t\t\texample, some of the Open Biomedical Ontologies (OBO) use a mixture of subClassOf and partOf relationships. ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents'), EntityDirectoryURI, scope=EntityDescriptionBase, documentation=u'a  that resolves to the list of direct "parents" asserted by . This returns the \n\t\t\t\t\t elements above.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors'), EntityDirectoryURI, scope=EntityDescriptionBase, documentation=u'a  that resolves to the transitive closure of the "parents" relationship(s). The primary purpose for this attribute is to provide a handle for subsumption queries. As an example, to\n\t\t\t\t\t\tdetermine whether Class X was a subclass of Class Y, one would query whether the to Y was a member of X.ancestors.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'children'), EntityDirectoryURI, scope=EntityDescriptionBase, documentation=u'a  that resolves to the list of direct "children" asserted by . As with , it is the responsibility of the service to determine what\n\t\t\t\t\t\tpredicate(s) represent "parent/child" relationships.  may also include entity references that appear in the target of bnodes if they are determined to be such by the service.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants'), EntityDirectoryURI, scope=EntityDescriptionBase, documentation=u'a  that resolves to the transitive closure of the "children" relationship(s). The primary purpose for this attribute is to provide a handle for subsumption queries. As an example, a\n\t\t\t\t\t\tsecond way to determine whether Class X was a subclass of Class Y, one would query whether the to X was a member of Y..', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType'), URIAndEntityName, scope=EntityDescriptionBase, documentation=u'the set of type(s) which the entityReference is an instance of. Because this is a terminology service,  must include one of owl:class, owl:individual, rdf:predicate or skos:concept,\n\t\t\t\t\t\talthough it may carry many other types as well.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances'), EntityDirectoryURI, scope=EntityDescriptionBase, documentation=u'a  that resolves to the list of entities that asserted to be instances of the type represented by  URI. This element is present only if resolution will return a non-empty\n\t\t\t\t\t\tset.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3)))

EntityDescriptionBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity'), URIAndEntityName, scope=EntityDescriptionBase, documentation=u'an entity that has been determined to be equivalent to the  entity in the context of the assertions made by .', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'example')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'children')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(EntityDescriptionBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EntityDescriptionBase._Automaton = _BuildAutomaton_55()




MapSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapTarget'), MapTarget, scope=MapSet, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 229, 3)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapSet._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapTarget')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 229, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapSet._Automaton = _BuildAutomaton_56()




ValueSetDefinitionEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'associatedEntities'), AssociatedEntitiesReference, scope=ValueSetDefinitionEntry_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 44, 3)))

ValueSetDefinitionEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'completeCodeSystem'), CompleteCodeSystemReference, scope=ValueSetDefinitionEntry_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 45, 3)))

ValueSetDefinitionEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'completeValueSet'), CompleteValueSetReference, scope=ValueSetDefinitionEntry_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 46, 3)))

ValueSetDefinitionEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'externalValueSetDefinition'), ExternalValueSetDefinition, scope=ValueSetDefinitionEntry_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 47, 3)))

ValueSetDefinitionEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'propertyQuery'), PropertyQueryReference, scope=ValueSetDefinitionEntry_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 48, 3)))

ValueSetDefinitionEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entityList'), SpecificEntityList, scope=ValueSetDefinitionEntry_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 49, 3)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'associatedEntities')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 44, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'completeCodeSystem')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 45, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'completeValueSet')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 46, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'externalValueSetDefinition')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 47, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'propertyQuery')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 48, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entityList')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 49, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueSetDefinitionEntry_._Automaton = _BuildAutomaton_57()




AssociatedEntitiesReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'referencedEntity'), URIAndEntityName, scope=AssociatedEntitiesReference, documentation=u'the entity reference that is the root of the association description.  is not considered to be part of the resolution of . If it is to be\n\t\t\t\t\t\tincluded in the final set, it must be explicitly named in a second  construct.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 92, 3)))

AssociatedEntitiesReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystem'), CodeSystemReference, scope=AssociatedEntitiesReference, documentation=u'the code system that makes the association assertions', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 98, 3)))

AssociatedEntitiesReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystemVersion'), CodeSystemVersionReference, scope=AssociatedEntitiesReference, documentation=u'the version of the code system that makes the association assertions. If present, \\\\ must be a version of . If this attribute is present, the referenced version\n\t\t\t\t\t\tof the code system will always be used to resolve the associations. If absent, the specific version of the code system to be used in resolution is determined in the resolve value set definition call\n\t\t\t\t\t\titself.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 103, 3)))

AssociatedEntitiesReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'predicate'), PredicateReference, scope=AssociatedEntitiesReference, documentation=u'the association predicate to be used in resolving the definition entry.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 111, 3)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 103, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociatedEntitiesReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'referencedEntity')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 92, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociatedEntitiesReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystem')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 98, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociatedEntitiesReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'codeSystemVersion')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 103, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AssociatedEntitiesReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'predicate')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 111, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AssociatedEntitiesReference._Automaton = _BuildAutomaton_58()




ResolvedValueSetSummary_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolvedHeader'), ResolvedValueSetHeader, scope=ResolvedValueSetSummary_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 454, 3)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSetSummary_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolvedHeader')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 454, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResolvedValueSetSummary_._Automaton = _BuildAutomaton_59()




Association_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'subject'), URIAndEntityName, scope=Association_, documentation=u'the subject of the association statement. must reference an - i.e. a class, predicate and/or individual.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 21, 5)))

Association_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'predicate'), PredicateReference, scope=Association_, documentation=u'the predicate of the association statement.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 26, 5)))

Association_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'target'), StatementTarget, scope=Association_, documentation=u'the target (object) of the association statement. A target may be a reference to an entity, an external resource URI, a literal or a compound expression (bnode) or a set of\n\t\t\t\t\t\t\t\ttargets.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 31, 5)))

Association_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'associationQualifier'), Property, scope=Association_, documentation=u'additional tag/value attributes that qualify the association statement itself as opposed to the statement subject.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 37, 5)))

Association_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedBy'), CodeSystemVersionReference, scope=Association_, documentation=u'the code system version that is making this assertion. A code system version makes an assertion when (a) it contains the assertion, (b) it imports a code system version that contains the\n\t\t\t\t\t\t\t\tassertion or (c) the assertion is inferred from other assertions.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 42, 5)))

Association_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedIn'), CodeSystemVersionReference, scope=Association_, documentation=u'the code system version that actually contains this assertion. If absent, it is the same resource as .', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 48, 5)))

Association_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'derivationReasoningAlgorithm'), ReasoningAlgorithmReference, scope=Association_, documentation=u'a reasoning algorithm that was used to derive an association of \n\t\t\t\t\t\t\t\t. Note that more than one reasoning algorithm may be present for the same association.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 53, 5)))

Association_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'sourceStatements'), StatementDirectoryURI, scope=Association_, documentation=u'detail about the provenance and history of the statement(s) from which this particular association is derived. This attribute will only be present in CTS service implementations that\n\t\t\t\t\t\t\t\tsupport the statements model.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 59, 5)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 37, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 48, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 53, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 59, 5))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Association_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Association_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Association_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'subject')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 21, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Association_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'predicate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 26, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Association_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'target')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 31, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Association_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'associationQualifier')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 37, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Association_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedBy')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 42, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Association_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedIn')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 48, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Association_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'derivationReasoningAlgorithm')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 53, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Association_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 59, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Association_._Automaton = _BuildAutomaton_60()




ConceptDomainBinding_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingURI'), DocumentURI, scope=ConceptDomainBinding_, documentation=u'The unique identifier of this particular binding instance.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 22, 5)))

ConceptDomainBinding_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingFor'), ConceptDomainReference, scope=ConceptDomainBinding_, documentation=u'the  being bound to a value set.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 27, 5)))

ConceptDomainBinding_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'boundValueSet'), ValueSetReference, scope=ConceptDomainBinding_, documentation=u'the bound value set', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 32, 5)))

ConceptDomainBinding_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'applicableContext'), ContextReference, scope=ConceptDomainBinding_, documentation=u'a realm or context in which the particular binding applies. If not present, the binding applies in any context not stated in another binding', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 37, 5)))

ConceptDomainBinding_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'boundValueSetDefinition'), ValueSetDefinitionReference, scope=ConceptDomainBinding_, documentation=u'the specific definition of the value set to be bound. If not specified, the definition that is used to determine the permissible values is specified when the concept domain is applied in the\n\t\t\t\t\t\t\t\tcontext.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 42, 5)))

ConceptDomainBinding_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'useCodeSystemVersion'), CodeSystemVersionReference, scope=ConceptDomainBinding_, documentation=u'the specific version(s) of the code systems to be used in the resolution of the value set definition. Note that it is also possible for value set definitions themselves to state which version of\n\t\t\t\t\t\t\t\ta code system is to be used. When this is the case, the code system version(s) specified in the  do not override those stated in the value set definition - the value set definition\n\t\t\t\t\t\t\t\tversion information takes precedence.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 48, 5)))

ConceptDomainBinding_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingQualifier'), BindingQualifierReference, scope=ConceptDomainBinding_, documentation=u'additional information that qualifies the intent or purpose of the binding. In the HL7 case, this is intended to indicate "whether the binding is \'overall\', \'minimum\' or \'maximum\'." The actual\n\t\t\t\t\t\t\t\tinterpretation of the qualifier is outside of the scope of the CTS specification but, if present,  contributes to the identity of the specific binding.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 55, 5)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 37, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 42, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 48, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 55, 5))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBinding_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBinding_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBinding_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingURI')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 22, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBinding_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingFor')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 27, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBinding_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'boundValueSet')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 32, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBinding_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'applicableContext')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 37, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBinding_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'boundValueSetDefinition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 42, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBinding_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'useCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 48, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBinding_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingQualifier')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 55, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConceptDomainBinding_._Automaton = _BuildAutomaton_61()




ChangeDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'prevImage'), Changeable, scope=ChangeDescription, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 269, 3)))

ChangeDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'changeNotes'), OpaqueData, scope=ChangeDescription, documentation=u'a note, set of instructions and other information about the nature and purpose of this change', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 270, 3)))

ChangeDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'changeSource'), SourceReference, scope=ChangeDescription, documentation=u'the person or organization responsible for this change', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 275, 3)))

ChangeDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'clonedResource'), NameAndMeaningReference, scope=ChangeDescription, documentation=u'the local identifier and URI of the resource that was cloned in this change if this is a  operation.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 280, 3)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 269, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 270, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 275, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 280, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ChangeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'prevImage')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 269, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ChangeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeNotes')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 270, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ChangeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeSource')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 275, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ChangeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'clonedResource')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 280, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ChangeDescription._Automaton = _BuildAutomaton_62()




ChangeSetBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'member'), pyxb.binding.datatypes.anyType, scope=ChangeSetBase, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 393, 5)))

ChangeSetBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'creator'), SourceReference, scope=ChangeSetBase, documentation=u'the person or organization who initially created the change set', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3)))

ChangeSetBase._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'changeInstructions'), OpaqueData, scope=ChangeSetBase, documentation=u'documentation and instructions about the purpose and application of the change set', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 393, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ChangeSetBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'creator')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ChangeSetBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeInstructions')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ChangeSetBase._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'member')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 393, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ChangeSetBase._Automaton = _BuildAutomaton_63()




Directory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter'), Filter, scope=Directory, documentation=u'the filter(s) that were applied to generate this directory', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5)))

Directory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria'), SortCriteria, scope=Directory, documentation=u'the sort criteria used in the directory. When this is left as optional, there is the possibility that some directories may not be ordered. Some PSMs may chose to make \n\t\t\t\t\t\t\t\tmandatory, meaning that all directory listings must reflect some sort order.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Directory._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Directory._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Directory._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Directory._Automaton = _BuildAutomaton_64()




def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
DirectoryEntry._Automaton = _BuildAutomaton_65()




DescriptionInCodeSystem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'describingCodeSystemVersion'), CodeSystemVersionReference, scope=DescriptionInCodeSystem, documentation=u'a reference to the code system version that describes the entity', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 699, 3)))

DescriptionInCodeSystem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'designation'), String, scope=DescriptionInCodeSystem, documentation=u'a contextually appropriate designation for the entity derived from the \\\\ ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 704, 3)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 704, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DescriptionInCodeSystem._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 699, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DescriptionInCodeSystem._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 704, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DescriptionInCodeSystem._Automaton = _BuildAutomaton_66()




def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 772, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 777, 5))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(NamedEntityReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'name')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 772, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(NamedEntityReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'knownEntityDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 777, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
NamedEntityReference._Automaton = _BuildAutomaton_67()




URIAndEntityName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'namespace'), NamespaceIdentifier, scope=URIAndEntityName, documentation=u'an identifier that references a unique namespace URI within the context of the service', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 820, 3)))

URIAndEntityName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'name'), String, scope=URIAndEntityName, documentation=u'the local entity name within the context of the namespace. What is chosen for the entity name is service specific', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 825, 3)))

URIAndEntityName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'designation'), String, scope=URIAndEntityName, documentation=u'a designation considered appropriate for the entity in the specific context of use', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 830, 3)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 820, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 825, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 830, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(URIAndEntityName._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'namespace')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 820, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(URIAndEntityName._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'name')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 825, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(URIAndEntityName._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 830, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
URIAndEntityName._Automaton = _BuildAutomaton_68()




def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Note._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'value')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 111, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Note._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'format')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Note._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'language')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Note._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'schema')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Note._Automaton = _BuildAutomaton_69()




ResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword'), String, scope=ResourceDescription, documentation=u'additional identifiers that are used to index and locatethe resource', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5)))

ResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType'), URIAndEntityName, scope=ResourceDescription, documentation=u'the class(es) that this resource instantiates', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5)))

ResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis'), EntryDescription, scope=ResourceDescription, documentation=u'a textual summary of the resource - what it is, what it is for, etc.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5)))

ResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation'), PersistentURI, scope=ResourceDescription, documentation=u'a reference to a document thatprovide additional information about the resource', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5)))

ResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole'), SourceAndRoleReference, scope=ResourceDescription, documentation=u'a reference to an individual, organization of bibliographic reference that participated in the creation, validation, review, dissemination of this resource and therole(s) they\n\t\t\t\t\t\t\t\tplayed', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5)))

ResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'rights'), OpaqueData, scope=ResourceDescription, documentation=u'copyright and IP information. Note that  applies to the source resource, not the CTS rendering.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5)))

ResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'note'), Comment, scope=ResourceDescription, documentation=u'an additional note or comment about the resource', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5)))

ResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'property'), Property, scope=ResourceDescription, documentation=u'additional information about the resource that doesnot fit into any of the attributes described above', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5)))

ResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID'), ExternalURI, scope=ResourceDescription, documentation=u'an alternative identifier that uniquely names this resource in other environments as contexts. As an example, if a resource had both an ISO Object Identifier and a DNS name, the DNS name might\n\t\t\t\t\t\t\t\tbe assigned as the  of the resource by one service while the ISO OID would be recorded as an using the "urn:oid" prefix. Note that s can be added or removed\n\t\t\t\t\t\t\t\tduring resource updates.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5)))

ResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements'), StatementDirectoryURI, scope=ResourceDescription, documentation=u'a  that references the set of statements that were used to construct the containing resource. This attribute must (may?) be present if and only if the service supports the\n\t\t\t\t\t\t\t\t\t profile ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'rights')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ResourceDescription._Automaton = _BuildAutomaton_70()




Property._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'predicate'), PredicateReference, scope=Property, documentation=u'the name and URI of the property predicate', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2007, 3)))

Property._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'value'), StatementTarget, scope=Property, documentation=u'the target(s) of the property. Note that this can only represent the literal format of the property. The details about the original property will be found in the if the\n\t\t\t\t\t\t\tCTS implementation supports the profile.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2012, 3)))

Property._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'propertyQualifier'), Property, scope=Property, documentation=u'an assertion whose subject is the assertion in the property instead of the property subject', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2018, 3)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2018, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Property._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'predicate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2007, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Property._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'value')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2012, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Property._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'propertyQualifier')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2018, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Property._Automaton = _BuildAutomaton_71()




NamedEntityDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'status'), StatusReference, scope=NamedEntityDescription, documentation=u'the state of this model element in an externally defined workflow', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3)))

NamedEntityDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription'), ChangeDescription, scope=NamedEntityDescription, documentation=u'Detailed information about the last change that resulted in this changeable element being in the state that it is now. changeDescription is only present in services that support the HISTORY profile and then only when specifically requested.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_18)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'example')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'children')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(NamedEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NamedEntityDescription._Automaton = _BuildAutomaton_72()




def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'example')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'children')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(AnonymousEntityDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AnonymousEntityDescription._Automaton = _BuildAutomaton_73()




Designation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'usageContext'), ContextReference, scope=Designation, documentation=u'the context(s) in which this designation is applicable', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 221, 5)))

Designation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'designationType'), DesignationTypeReference, scope=Designation, documentation=u'the type of designation (e.g. abbreviation, eponym, short name, long name, etc.) of the given designation.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 226, 5)))

Designation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'caseSignificance'), CaseSignificanceReference, scope=Designation, documentation=u'identifies the significance that case plays in the value of this particular designation.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 231, 5)))

Designation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'degreeOfFidelity'), DesignationFidelityReference, scope=Designation, documentation=u'a measure of how closely this designation actually matches the intended meaning of the target entity. Typical values might represent "exact", "approximate", "broader", "narrower",\n\t\t\t\t\t\t\t\tetc.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 236, 5)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 221, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 226, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 231, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 236, 5))
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Designation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'value')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 111, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Designation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'format')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Designation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'language')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Designation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'schema')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Designation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'usageContext')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 221, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Designation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designationType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 226, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Designation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'caseSignificance')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 231, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Designation._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'degreeOfFidelity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 236, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Designation._Automaton = _BuildAutomaton_74()




def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 674, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 679, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EntityDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'name')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 674, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EntityDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'knownEntityDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 679, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EntityDirectoryEntry._Automaton = _BuildAutomaton_75()




MapEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'assertedBy'), MapVersionReference, scope=MapEntry_, documentation=u'the mapping version that asserts this entry', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 188, 5)))

MapEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapFrom'), URIAndEntityName, scope=MapEntry_, documentation=u'the name and URI of the "from" or "source" side of the map. There can be at most one  entry for every unique entity in a given .', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 193, 5)))

MapEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'source'), SourceAndRoleReference, scope=MapEntry_, documentation=u'a list individuals or organizations and the role(s) they played in this entry', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 198, 5)))

MapEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'sourceStatements'), StatementDirectoryURI, scope=MapEntry_, documentation=u'a URI that resolves to the set of statements that were used to construct this entry', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 203, 5)))

MapEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapSet'), MapSet, scope=MapEntry_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 208, 5)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 198, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 203, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 208, 5))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'assertedBy')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 188, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapFrom')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 193, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MapEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'source')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 198, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MapEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'sourceStatements')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 203, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MapEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapSet')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 208, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapEntry_._Automaton = _BuildAutomaton_76()




Statement_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'statementURI'), URI, scope=Statement_, documentation=u'The unique statement identifier.  Must be globally unique if information is to be exchanged and updated on the statement leve.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 19, 5)))

Statement_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'subject'), StatementSubject, scope=Statement_, documentation=u'the subject of the statement - either a resource or a reference to a terminological entity.  may reference a specific , ,\n\t\t\t\t\t\t\t\t\t, , , , \n\t\t\t\t\t\t\t\t, , , , ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 24, 5)))

Statement_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'predicate'), URIAndEntityName, scope=Statement_, documentation=u'the predicate of the statement. Note that this is type as, while it serves as a predicate in the statement itself it is not necessary that it be formally recognized as a\n\t\t\t\t\t\t\t\tpredicate by the CTS service - it may have been translated or transformed by the load process.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 31, 5)))

Statement_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'target'), StatementTarget, scope=Statement_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 37, 5)))

Statement_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'associatedAttribute'), ModelAttributeReference, scope=Statement_, documentation=u'the identifier and name of the CTS attribute or element that renders this statement, if any', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 38, 5)))

Statement_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'source'), SourceAndRoleReference, scope=Statement_, documentation=u'the source(s) of the statement and the role(s) they played', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 43, 5)))

Statement_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'assertedBy'), CodeSystemVersionReference, scope=Statement_, documentation=u'the code system version that is asserting this particular statement. In the case of ontologies that import other ontologies, this is the outermost importing ontology.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 48, 5)))

Statement_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'assertedIn'), CodeSystemVersionReference, scope=Statement_, documentation=u'the code system version (ontology) that actually makes this statement. In the case of ontologies, this is the innermost imported ontology.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 53, 5)))

Statement_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'qualifier'), StatementQualifier, scope=Statement_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 58, 5)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 37, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 38, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 43, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 53, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 58, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Statement_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Statement_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Statement_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'statementURI')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 19, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Statement_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'subject')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 24, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Statement_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'predicate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 31, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Statement_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'target')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 37, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Statement_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'associatedAttribute')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 38, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Statement_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'source')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 43, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Statement_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'assertedBy')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 48, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Statement_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'assertedIn')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 53, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Statement_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'qualifier')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 58, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Statement_._Automaton = _BuildAutomaton_77()




ChangeSet_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'creator'), SourceReference, scope=ChangeSet_, documentation=u'the person or organization who initially created the change set', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3)))

ChangeSet_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'changeInstructions'), OpaqueData, scope=ChangeSet_, documentation=u'documentation and instructions about the purpose and application of the change set', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3)))

ChangeSet_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'member'), ChangeableResource, scope=ChangeSet_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 37, 3)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 37, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ChangeSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'creator')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ChangeSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeInstructions')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ChangeSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'member')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 37, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ChangeSet_._Automaton = _BuildAutomaton_78()




def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'association')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 48, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'codeSystem')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 49, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'codeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 50, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'conceptDomain')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 51, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'conceptDomainBinding')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 52, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'entityDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 53, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'map')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 54, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'mapVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 55, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'mapEntry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 56, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'statement')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 57, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'valueSet')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 58, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ChangeableAsDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'valueSetDefinition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 59, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ChangeableAsDirectoryEntry._Automaton = _BuildAutomaton_79()




def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSetDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolvedHeader')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 454, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResolvedValueSetDirectoryEntry._Automaton = _BuildAutomaton_80()




AssociationDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'entry'), AssociationDirectoryEntry, scope=AssociationDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 140, 5)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 140, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AssociationDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssociationDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AssociationDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AssociationDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 140, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AssociationDirectory_._Automaton = _BuildAutomaton_81()




AssociationDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'subject'), URIAndEntityName, scope=AssociationDirectoryEntry, documentation=u'the subject of the association statement', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 153, 5)))

AssociationDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'predicate'), PredicateReference, scope=AssociationDirectoryEntry, documentation=u'the predicate of the association statement', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 158, 5)))

AssociationDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'target'), StatementTarget, scope=AssociationDirectoryEntry, documentation=u'the target (object) of the association statement', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 163, 5)))

AssociationDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedBy'), CodeSystemVersionReference, scope=AssociationDirectoryEntry, documentation=u'the code system version that is making this assertion', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 168, 5)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociationDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'subject')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 153, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociationDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'predicate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 158, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociationDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'target')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 163, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AssociationDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedBy')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 168, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AssociationDirectoryEntry._Automaton = _BuildAutomaton_82()




AssociationList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'entry'), AssociationListEntry, scope=AssociationList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 206, 5)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 206, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AssociationList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssociationList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AssociationList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AssociationList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 206, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AssociationList_._Automaton = _BuildAutomaton_83()




def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 37, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 48, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 53, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 59, 5))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociationListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociationListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociationListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'subject')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 21, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociationListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'predicate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 26, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociationListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'target')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 31, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AssociationListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'associationQualifier')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 37, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AssociationListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedBy')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 42, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AssociationListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedIn')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 48, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AssociationListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'derivationReasoningAlgorithm')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 53, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AssociationListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 59, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AssociationListEntry._Automaton = _BuildAutomaton_84()




AssociationGraph_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'focusEntity'), URIAndEntityName, scope=AssociationGraph_, documentation=u'the focus entity of the graph, if any. This is a copy of the focus parameter from the  method in the ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 239, 5)))

AssociationGraph_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'entry'), GraphNode, scope=AssociationGraph_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 244, 5)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 239, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 244, 5))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AssociationGraph_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AssociationGraph_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AssociationGraph_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AssociationGraph_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'focusEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 239, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AssociationGraph_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 244, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AssociationGraph_._Automaton = _BuildAutomaton_85()




CodeSystemCatalogEntryDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'entry'), CodeSystemCatalogEntrySummary, scope=CodeSystemCatalogEntryDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 107, 5)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 107, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 107, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CodeSystemCatalogEntryDirectory_._Automaton = _BuildAutomaton_86()




CodeSystemCatalogEntryList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'entry'), CodeSystemCatalogEntryListEntry, scope=CodeSystemCatalogEntryList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 149, 5)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 149, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 149, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CodeSystemCatalogEntryList_._Automaton = _BuildAutomaton_87()




CodeSystemCatalogEntryListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'entry'), CodeSystemCatalogEntry_, scope=CodeSystemCatalogEntryListEntry, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 162, 5)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntryListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 162, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CodeSystemCatalogEntryListEntry._Automaton = _BuildAutomaton_88()




CodeSystemVersionCatalogEntryDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entry'), CodeSystemVersionCatalogEntrySummary, scope=CodeSystemVersionCatalogEntryDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 109, 5)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 109, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 109, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CodeSystemVersionCatalogEntryDirectory_._Automaton = _BuildAutomaton_89()




CodeSystemVersionCatalogEntryList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entry'), CodeSystemVersionCatalogEntryListEntry, scope=CodeSystemVersionCatalogEntryList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 152, 5)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 152, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 152, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CodeSystemVersionCatalogEntryList_._Automaton = _BuildAutomaton_90()




CodeSystemVersionCatalogEntryListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entry'), CodeSystemVersionCatalogEntry_, scope=CodeSystemVersionCatalogEntryListEntry, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 165, 5)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntryListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 165, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CodeSystemVersionCatalogEntryListEntry._Automaton = _BuildAutomaton_91()




ConceptDomainCatalogEntryDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'entry'), ConceptDomainCatalogEntrySummary, scope=ConceptDomainCatalogEntryDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 79, 5)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 79, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 79, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConceptDomainCatalogEntryDirectory_._Automaton = _BuildAutomaton_92()




ConceptDomainCatalogEntryList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'entry'), ConceptDomainCatalogEntryListEntry, scope=ConceptDomainCatalogEntryList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 124, 6)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 124, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 124, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConceptDomainCatalogEntryList_._Automaton = _BuildAutomaton_93()




ConceptDomainCatalogEntryListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'entry'), ConceptDomainCatalogEntry_, scope=ConceptDomainCatalogEntryListEntry, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 137, 5)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntryListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 137, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConceptDomainCatalogEntryListEntry._Automaton = _BuildAutomaton_94()




ConceptDomainBindingDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'entry'), ConceptDomainBindingDirectoryEntry, scope=ConceptDomainBindingDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 94, 5)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 94, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 94, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConceptDomainBindingDirectory_._Automaton = _BuildAutomaton_95()




ConceptDomainBindingList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'entry'), ConceptDomainBindingListEntry, scope=ConceptDomainBindingList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 140, 5)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 140, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 140, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConceptDomainBindingList_._Automaton = _BuildAutomaton_96()




ConceptDomainBindingListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'entry'), ConceptDomainBinding_, scope=ConceptDomainBindingListEntry, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 153, 5)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 153, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConceptDomainBindingListEntry._Automaton = _BuildAutomaton_97()




def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 820, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 825, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 830, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PredicateReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'namespace')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 820, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PredicateReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'name')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 825, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PredicateReference._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 830, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PredicateReference._Automaton = _BuildAutomaton_98()




Definition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'usageContext'), ContextReference, scope=Definition, documentation=u'the context(s) in which the definition is considered applicable', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1508, 5)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1508, 5))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Definition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'value')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 111, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Definition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'format')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Definition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'language')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Definition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'schema')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Definition._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'usageContext')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1508, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Definition._Automaton = _BuildAutomaton_99()




def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Example._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'value')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 111, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Example._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'format')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Example._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'language')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Example._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'schema')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Example._Automaton = _BuildAutomaton_100()




def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'value')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 111, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'format')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 117, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'language')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 122, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Comment._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'schema')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 127, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Comment._Automaton = _BuildAutomaton_101()




ResourceDescriptionDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis'), EntryDescription, scope=ResourceDescriptionDirectoryEntry, documentation=u'a textual summary of the resource - what it is, what it is for, etc.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceDescriptionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ResourceDescriptionDirectoryEntry._Automaton = _BuildAutomaton_102()




AbstractResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseDocumentation'), OpaqueData, scope=AbstractResourceDescription, documentation=u'documentation about the frequency and natureof releases (version) of this resource.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5)))

AbstractResourceDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseFormat'), SourceAndNotation, scope=AbstractResourceDescription, documentation=u'a format and notation that thereleases (versions) of this resource are published in', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5))
    counters.add(cc_13)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'rights')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseFormat')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractResourceDescription._Automaton = _BuildAutomaton_103()




ResourceVersionDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndNotation'), SourceAndNotation, scope=ResourceVersionDescription, documentation=u'a description of where the (or a) source of the version may be found, what format and language it is available in, etc. ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1865, 5)))

ResourceVersionDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'predecessor'), NameAndMeaningReference, scope=ResourceVersionDescription, documentation=u'a reference to the name and URI version of the resource from which this current version is derived - the version of the resource that immediately preceded it', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1870, 5)))

ResourceVersionDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId'), String, scope=ResourceVersionDescription, documentation=u'an official label or identifier that was assigned to this version by its publisher', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1875, 5)))

ResourceVersionDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate'), DateAndTime, scope=ResourceVersionDescription, documentation=u'the date that this version of the resource officially became available', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1880, 5)))

ResourceVersionDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'officialActivationDate'), DateAndTime, scope=ResourceVersionDescription, documentation=u'the date that this version of the resource is stated by its publishers to go into effect', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1885, 5)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1865, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1870, 5))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1875, 5))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1880, 5))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1885, 5))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'rights')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndNotation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1865, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'predecessor')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1870, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1875, 5))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1880, 5))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialActivationDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1885, 5))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ResourceVersionDescription._Automaton = _BuildAutomaton_104()




def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_18)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'example')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'children')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ClassDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ClassDescription._Automaton = _BuildAutomaton_105()




def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_18)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'example')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'children')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(NamedIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
NamedIndividualDescription._Automaton = _BuildAutomaton_106()




def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_18)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'example')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'children')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(AnonymousIndividualDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AnonymousIndividualDescription._Automaton = _BuildAutomaton_107()




def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'example')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'children')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(DataTypeDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataTypeDescription._Automaton = _BuildAutomaton_108()




PredicateDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'forwardName'), String, scope=PredicateDescription, documentation=u'the name assigned to the predicate when applied in the source to target direction. The primary purpose of this attribute is to provide some notion of "directional" semantics, as predicates named\n\t\t\t\t\t\t\t\t"part" or "broader term" often lack sufficient information to understand where the whole or broader component goes. Implementers will note that, as opposed to official designations,  and\n\t\t\t\t\t\t\t\t\t are not keyed by language. Implementers are encouraged to develop designations and use the  and  tags if a richer model is\n\t\t\t\t\t\t\t\tdesired.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 409, 5)))

PredicateDescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'reverseName'), String, scope=PredicateDescription, documentation=u'the name assigned to the predicate when applied in the target to source direction. The primary purpose of this attribute is to provide some notion of "directional" semantics, as predicates named\n\t\t\t\t\t\t\t\t"part" or "broader term" often lack sufficient information to understand where the whole or broader component goes. ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 417, 5)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 409, 5))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 417, 5))
    counters.add(cc_20)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'example')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'children')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'forwardName')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 409, 5))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(PredicateDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'reverseName')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 417, 5))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PredicateDescription._Automaton = _BuildAutomaton_109()




EntityDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'entry'), EntityDirectoryEntry, scope=EntityDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 556, 5)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 556, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EntityDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EntityDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(EntityDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 556, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EntityDirectory_._Automaton = _BuildAutomaton_110()




EntityList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'entry'), EntityListEntry, scope=EntityList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 584, 5)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 584, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EntityList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EntityList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(EntityList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 584, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EntityList_._Automaton = _BuildAutomaton_111()




EntityListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_entity, u'entry'), EntityDescription_, scope=EntityListEntry, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 597, 5)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EntityListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 597, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EntityListEntry._Automaton = _BuildAutomaton_112()




MapCatalogEntryDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'entry'), MapCatalogEntrySummary, scope=MapCatalogEntryDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 99, 5)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 99, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 99, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapCatalogEntryDirectory_._Automaton = _BuildAutomaton_113()




MapCatalogEntryList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'entry'), MapCatalogEntryListEntry, scope=MapCatalogEntryList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 155, 5)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 155, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 155, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapCatalogEntryList_._Automaton = _BuildAutomaton_114()




MapCatalogEntryListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'entry'), MapCatalogEntry_, scope=MapCatalogEntryListEntry, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 168, 5)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntryListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 168, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapCatalogEntryListEntry._Automaton = _BuildAutomaton_115()




MapVersionDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), MapVersionDirectoryEntry, scope=MapVersionDirectory_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 109, 5)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 109, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapVersionDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MapVersionDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MapVersionDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MapVersionDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 109, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapVersionDirectory_._Automaton = _BuildAutomaton_116()




MapVersionList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), MapVersionListEntry, scope=MapVersionList_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 150, 5)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 150, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapVersionList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MapVersionList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MapVersionList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MapVersionList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 150, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapVersionList_._Automaton = _BuildAutomaton_117()




MapVersionListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), MapVersion_, scope=MapVersionListEntry, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 163, 5)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapVersionListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 163, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapVersionListEntry._Automaton = _BuildAutomaton_118()




MapEntryDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), MapEntryDirectoryEntry, scope=MapEntryDirectory_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 341, 5)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 341, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MapEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MapEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MapEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 341, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapEntryDirectory_._Automaton = _BuildAutomaton_119()




MapEntryDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'assertedBy'), MapVersionReference, scope=MapEntryDirectoryEntry, documentation=u'a reference to the  that contains or asserts this entry', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 354, 5)))

MapEntryDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapFrom'), URIAndEntityName, scope=MapEntryDirectoryEntry, documentation=u'the URI and name of the source entity for this entry.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 359, 5)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapEntryDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'assertedBy')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 354, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapEntryDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'mapFrom')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 359, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapEntryDirectoryEntry._Automaton = _BuildAutomaton_120()




MapEntryList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), MapEntryListEntry, scope=MapEntryList_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 377, 5)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 377, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MapEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MapEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MapEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 377, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapEntryList_._Automaton = _BuildAutomaton_121()




MapEntryListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry'), MapEntry_, scope=MapEntryListEntry, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 390, 5)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapEntryListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 390, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapEntryListEntry._Automaton = _BuildAutomaton_122()




StatementDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entry'), StatementDirectoryEntry, scope=StatementDirectory_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 122, 5)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 122, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StatementDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StatementDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StatementDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(StatementDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 122, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StatementDirectory_._Automaton = _BuildAutomaton_123()




def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 37, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 38, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 43, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 53, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 58, 5))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatementDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatementDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatementDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'statementURI')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 19, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatementDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'subject')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 24, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatementDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'predicate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 31, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatementDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'target')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 37, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatementDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'associatedAttribute')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 38, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StatementDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'source')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 43, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StatementDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'assertedBy')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 48, 5))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(StatementDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'assertedIn')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 53, 5))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(StatementDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'qualifier')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 58, 5))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StatementDirectoryEntry._Automaton = _BuildAutomaton_124()




StatementList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entry'), StatementListEntry, scope=StatementList_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 148, 5)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 148, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StatementList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(StatementList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(StatementList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(StatementList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 148, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StatementList_._Automaton = _BuildAutomaton_125()




StatementListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entry'), Statement_, scope=StatementListEntry, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 161, 5)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StatementListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_stmt, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/statement/Statement.xsd', 161, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StatementListEntry._Automaton = _BuildAutomaton_126()




IteratableChangeSet_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'creator'), SourceReference, scope=IteratableChangeSet_, documentation=u'the person or organization who initially created the change set', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3)))

IteratableChangeSet_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'changeInstructions'), OpaqueData, scope=IteratableChangeSet_, documentation=u'documentation and instructions about the purpose and application of the change set', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3)))

IteratableChangeSet_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace, u'entry'), ChangeableAsDirectoryEntry, scope=IteratableChangeSet_, location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 100, 5)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 100, 5))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IteratableChangeSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(IteratableChangeSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(IteratableChangeSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(IteratableChangeSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'creator')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 402, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(IteratableChangeSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeInstructions')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 407, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(IteratableChangeSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace, u'entry')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/updates/Updates.xsd', 100, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IteratableChangeSet_._Automaton = _BuildAutomaton_127()




ValueSetCatalogEntryDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'entry'), ValueSetCatalogEntrySummary, scope=ValueSetCatalogEntryDirectory_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 76, 5)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 76, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntryDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valueset, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 76, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueSetCatalogEntryDirectory_._Automaton = _BuildAutomaton_128()




ValueSetCatalogEntryList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'entry'), ValueSetCatalogEntryListEntry, scope=ValueSetCatalogEntryList_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 112, 5)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 112, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntryList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valueset, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 112, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueSetCatalogEntryList_._Automaton = _BuildAutomaton_129()




ValueSetCatalogEntryListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'entry'), ValueSetCatalogEntry_, scope=ValueSetCatalogEntryListEntry, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 125, 5)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntryListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valueset, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 125, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueSetCatalogEntryListEntry._Automaton = _BuildAutomaton_130()




ValueSetDefinitionDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), ValueSetDefinitionDirectoryEntry, scope=ValueSetDefinitionDirectory_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 311, 5)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 311, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 311, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueSetDefinitionDirectory_._Automaton = _BuildAutomaton_131()




ValueSetDefinitionList_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), ValueSetDefinitionListEntry, scope=ValueSetDefinitionList_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 348, 5)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 348, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionList_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 348, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueSetDefinitionList_._Automaton = _BuildAutomaton_132()




ValueSetDefinitionListEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), ValueSetDefinition_, scope=ValueSetDefinitionListEntry, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 361, 5)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 361, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionListEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 361, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValueSetDefinitionListEntry._Automaton = _BuildAutomaton_133()




IteratableResolvedValueSet_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolutionInfo'), ResolvedValueSetHeader, scope=IteratableResolvedValueSet_, documentation=u'the set of parameters that were used in the resolution of this set.  provides all the information necessary to recreate the actual  when presented to a\n\t\t\t\t\t\t\t\t\tCTS service instance that contains all of the necessary definitions and code system versions.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 435, 5)))

IteratableResolvedValueSet_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), URIAndEntityName, scope=IteratableResolvedValueSet_, documentation=u'a synopsis of the  that has been determined to be a member of the value set named in  according to the stated criteria or "bindings"', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 441, 5)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 441, 5))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IteratableResolvedValueSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IteratableResolvedValueSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(IteratableResolvedValueSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IteratableResolvedValueSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'resolutionInfo')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 435, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(IteratableResolvedValueSet_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 441, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IteratableResolvedValueSet_._Automaton = _BuildAutomaton_134()




ResolvedValueSetDirectory_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), ResolvedValueSetDirectoryEntry, scope=ResolvedValueSetDirectory_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 467, 5)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 467, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSetDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'heading')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 2101, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSetDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'directoryFilter')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 494, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSetDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sortCriteria')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 500, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResolvedValueSetDirectory_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 467, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResolvedValueSetDirectory_._Automaton = _BuildAutomaton_135()




GraphNode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_association, u'nodeEntity'), URIAndEntityName, scope=GraphNode, documentation=u'the URI, name and a designation for the  represented by this node.  represents the association  when  is\n\t\t\t\t\t\t\t\t\t and (one of the) targets when  is ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 319, 5)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GraphNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'subject')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 153, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GraphNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'predicate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 158, 5))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GraphNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'target')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 163, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GraphNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'assertedBy')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 168, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GraphNode._UseForTag(pyxb.namespace.ExpandedName(_Namespace_association, u'nodeEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/association/Association.xsd', 319, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GraphNode._Automaton = _BuildAutomaton_136()




CodeSystemCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'codeSystemCategory'), CodeSystemCategoryReference, scope=CodeSystemCatalogEntry_, documentation=u'the category or type of resource that the code system represents.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 20, 5)))

CodeSystemCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'ontologyDomain'), OntologyDomainReference, scope=CodeSystemCatalogEntry_, documentation=u'the subject domain of the ontology', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 25, 5)))

CodeSystemCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'ontologyType'), OntologyTypeReference, scope=CodeSystemCatalogEntry_, documentation=u'the nature of the content of the ontology', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 30, 5)))

CodeSystemCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'designedForOntologyTask'), OntologyTaskReference, scope=CodeSystemCatalogEntry_, documentation=u'the purpose for which the ontology was originally designed', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 35, 5)))

CodeSystemCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'hasOntologyLanguage'), OntologyLanguageReference, scope=CodeSystemCatalogEntry_, documentation=u'the formal ontology language', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 40, 5)))

CodeSystemCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'includes'), CodeSystemReference, scope=CodeSystemCatalogEntry_, documentation=u'a reference to an external code system that is included as a component of the referenced code system. The Wine Ontology,\n\t\t\t\t\t\t\t\tas an example, includes the Food Ontology as one of its components.  Similarly, the US Edition of SNOMED-CT includes the international edition.\t\t\t\t\t\n\t\t\t\t\t\t\t', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 45, 5)))

CodeSystemCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'versions'), CodeSystemVersionCatalogEntryDirectoryURI, scope=CodeSystemCatalogEntry_, documentation=u'a  that references the known versions of this code system. ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 52, 5)))

CodeSystemCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'currentVersion'), CodeSystemVersionReference, scope=CodeSystemCatalogEntry_, documentation=u'a reference to the code system version marked as  in the service instance.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 57, 5)))

CodeSystemCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'usedOntologyEngineeringTool'), OntologyEngineeringToolReference, scope=CodeSystemCatalogEntry_, documentation=u'information about a tool used to create the ontology', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 62, 5)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 20, 5))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 25, 5))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 30, 5))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 35, 5))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 40, 5))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 45, 5))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 52, 5))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 57, 5))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 62, 5))
    counters.add(cc_22)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'rights')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseFormat')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'codeSystemCategory')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 20, 5))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'ontologyDomain')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 25, 5))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'ontologyType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 30, 5))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'designedForOntologyTask')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 35, 5))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'hasOntologyLanguage')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 40, 5))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'includes')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 45, 5))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'versions')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 52, 5))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'currentVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 57, 5))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'usedOntologyEngineeringTool')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 62, 5))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_22, True) ]))
    st_22._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CodeSystemCatalogEntry_._Automaton = _BuildAutomaton_137()




CodeSystemVersionCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'versionOf'), CodeSystemReference, scope=CodeSystemVersionCatalogEntry_, documentation=u'the name, URI and, if supported by the service, link to the code system that this version represents.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 22, 5)))

CodeSystemVersionCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'imports'), CodeSystemVersionReference, scope=CodeSystemVersionCatalogEntry_, documentation=u'a reference to a code system version whose assertions are included as part this code system version. ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 27, 5)))

CodeSystemVersionCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'defaultLanguage'), LanguageReference, scope=CodeSystemVersionCatalogEntry_, documentation=u'the default spoken or written language used in this version', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 32, 5)))

CodeSystemVersionCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'supportedLanguage'), LanguageReference, scope=CodeSystemVersionCatalogEntry_, documentation=u'all languages recognized by this particular code system version', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 37, 5)))

CodeSystemVersionCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entityDescriptions'), EntityDirectoryURI, scope=CodeSystemVersionCatalogEntry_, documentation=u'a DirectoryURI that resolves to the set of all entities and their descriptions asserted by this code system version. This attribute will only be present if and only if the service implementation\n\t\t\t\t\t\t\t\tsupports the  service profile.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 42, 5)))

CodeSystemVersionCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'associations'), AssociationDirectoryURI, scope=CodeSystemVersionCatalogEntry_, documentation=u'a  that,resolves to a a list of all associations asserted by this particular code system version', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 48, 5)))

CodeSystemVersionCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'classes'), EntityDirectoryURI, scope=CodeSystemVersionCatalogEntry_, documentation=u'a  that resolves to the set of that are of type owl:Class within this code system. Will only be present in code systems that represent\n\t\t\t\t\t\t\t\tontologies.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 53, 5)))

CodeSystemVersionCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'roles'), EntityDirectoryURI, scope=CodeSystemVersionCatalogEntry_, documentation=u'a  that resolves to the set of that are of type owl:ObjectProperty or owl:DataProperty within this code system. Will only be present in code systems\n\t\t\t\t\t\t\t\tthat represent ontologies.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 59, 5)))

CodeSystemVersionCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'individuals'), EntityDirectoryURI, scope=CodeSystemVersionCatalogEntry_, documentation=u'a  that resolves to the set of that are of type owl:Individual within this code system. Will only be present in code systems that represent\n\t\t\t\t\t\t\t\tontologies.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 65, 5)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1865, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1870, 5))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1875, 5))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1880, 5))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1885, 5))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 27, 5))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 32, 5))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 37, 5))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 42, 5))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 48, 5))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 53, 5))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 59, 5))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 65, 5))
    counters.add(cc_24)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'rights')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndNotation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1865, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'predecessor')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1870, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1875, 5))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1880, 5))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialActivationDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1885, 5))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'versionOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 22, 5))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'imports')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 27, 5))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'defaultLanguage')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 32, 5))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'supportedLanguage')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 37, 5))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'entityDescriptions')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 42, 5))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'associations')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 48, 5))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'classes')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 53, 5))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'roles')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 59, 5))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'individuals')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 65, 5))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CodeSystemVersionCatalogEntry_._Automaton = _BuildAutomaton_138()




ConceptDomainCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'definingEntity'), URIAndEntityName, scope=ConceptDomainCatalogEntry_, documentation=u'the name and URI of an  that describes the domain and scope of meaning for the . If present, this association is equivalent to the\n\t\t\t\t\t\t\t\tdata_element_concept_domain association in section 11.2.3.2 of ISO 11179-3.  provides a definition for the  and potentially describes its relationship with other\n\t\t\t\t\t\t\t\t\t as well as providing a semantic link to the possible value meanings available to domain bindings.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 27, 5)))

ConceptDomainCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'bindings'), ConceptDomainBindingDirectoryURI, scope=ConceptDomainCatalogEntry_, documentation=u'a URI that resolves to the known bindings (aka. Data Elements) of the referenced ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 34, 5)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 27, 5))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 34, 5))
    counters.add(cc_15)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'rights')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseFormat')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'definingEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 27, 5))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'bindings')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 34, 5))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ConceptDomainCatalogEntry_._Automaton = _BuildAutomaton_139()




ConceptDomainBindingDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingFor'), ConceptDomainReference, scope=ConceptDomainBindingDirectoryEntry, documentation=u'the  being bound to a value set', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 107, 5)))

ConceptDomainBindingDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'boundValueSet'), ValueSetReference, scope=ConceptDomainBindingDirectoryEntry, documentation=u'the  being bound', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 112, 5)))

ConceptDomainBindingDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingQualifier'), BindingQualifierReference, scope=ConceptDomainBindingDirectoryEntry, documentation=u'additional information that qualifies the intent or purpose of the binding. ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 117, 5)))

ConceptDomainBindingDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'applicableContext'), ContextReference, scope=ConceptDomainBindingDirectoryEntry, documentation=u'the context or realm in which the binding applies', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 122, 5)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 117, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 122, 5))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingFor')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 107, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'boundValueSet')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 112, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'bindingQualifier')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 117, 5))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainBindingDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomainbinding, u'applicableContext')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomainbinding/ConceptDomainBinding.xsd', 122, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConceptDomainBindingDirectoryEntry._Automaton = _BuildAutomaton_140()




def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AbstractResourceDescriptionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AbstractResourceDescriptionDirectoryEntry._Automaton = _BuildAutomaton_141()




ResourceVersionDescriptionDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId'), String, scope=ResourceVersionDescriptionDirectoryEntry, documentation=u'a label or identifier that was assigned to this version by its publisher', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1806, 5)))

ResourceVersionDescriptionDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate'), DateAndTime, scope=ResourceVersionDescriptionDirectoryEntry, documentation=u'information about the source, format, release date, version identifier, etc. of a specific version of an abstract resource', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1811, 5)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1806, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1811, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescriptionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescriptionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1806, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResourceVersionDescriptionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1811, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ResourceVersionDescriptionDirectoryEntry._Automaton = _BuildAutomaton_142()




def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 409, 5))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 417, 5))
    counters.add(cc_20)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'example')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'children')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'forwardName')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 409, 5))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(AnnotationPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'reverseName')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 417, 5))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AnnotationPropertyDescription._Automaton = _BuildAutomaton_143()




def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 409, 5))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 417, 5))
    counters.add(cc_20)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'example')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'children')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'forwardName')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 409, 5))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(DataPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'reverseName')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 417, 5))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataPropertyDescription._Automaton = _BuildAutomaton_144()




def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 409, 5))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 417, 5))
    counters.add(cc_20)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 39, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'alternateEntityID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 46, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'describingCodeSystemVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 56, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'designation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 65, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'definition')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 72, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'example')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 78, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 83, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 89, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 95, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'subjectOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 101, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'predicateOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 108, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'targetOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 115, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parent')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 122, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'parents')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 129, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'ancestors')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 135, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'children')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 141, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'descendants')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 147, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'entityType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 153, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'instances')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 159, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'equivalentEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 165, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'forwardName')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 409, 5))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ObjectPropertyDescription._UseForTag(pyxb.namespace.ExpandedName(_Namespace_entity, u'reverseName')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/entity/Entity.xsd', 417, 5))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ObjectPropertyDescription._Automaton = _BuildAutomaton_145()




MapCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'fromCodeSystem'), CodeSystemReference, scope=MapCatalogEntry_, documentation=u'the  from which the source codes in the Map are drawn. Note that the source codes may be drawn from either a  or a , but not\n\t\t\t\t\t\t\t\tboth.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 25, 5)))

MapCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'fromValueSet'), ValueSetReference, scope=MapCatalogEntry_, documentation=u'the  from which the source codes in the Map are drawn. Note that the source codes may be drawn from either a  or a , but not\n\t\t\t\t\t\t\t\tboth.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 31, 5)))

MapCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'toCodeSystem'), CodeSystemReference, scope=MapCatalogEntry_, documentation=u'the  from which the target codes in the Map are drawn. Note that the target codes may be drawn from either a  or a , but not\n\t\t\t\t\t\t\t\tboth.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 37, 5)))

MapCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'toValueSet'), ValueSetReference, scope=MapCatalogEntry_, documentation=u'the  from which the source codes in the Map are drawn. Note that the target codes may be drawn from either a  or a , but not\n\t\t\t\t\t\t\t\tboth.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 43, 5)))

MapCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'versions'), MapVersionDirectoryURI, scope=MapCatalogEntry_, documentation=u'a URI that, when resolved, returns the known versions of the containing ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 49, 5)))

MapCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'currentVersion'), MapVersionReference, scope=MapCatalogEntry_, documentation=u'The map version associated with this catalog entry that has been assigned the  tag, if any', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 54, 5)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 25, 5))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 31, 5))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 37, 5))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 43, 5))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 49, 5))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 54, 5))
    counters.add(cc_19)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'rights')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseFormat')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'fromCodeSystem')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 25, 5))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'fromValueSet')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 31, 5))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'toCodeSystem')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 37, 5))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'toValueSet')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 43, 5))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'versions')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 49, 5))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'currentVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 54, 5))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MapCatalogEntry_._Automaton = _BuildAutomaton_146()




MapVersion_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionOf'), MapReference, scope=MapVersion_, documentation=u'a reference to the  resource that this is a version of', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 24, 5)))

MapVersion_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'fromValueSetDefinition'), ValueSetDefinitionReference, scope=MapVersion_, documentation=u'the specific value set definition that was used to resolve the  entities in this map', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 29, 5)))

MapVersion_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'fromCodeSystemVersion'), CodeSystemVersionReference, scope=MapVersion_, documentation=u'the specific code system version that provided the  entities in this map', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 34, 5)))

MapVersion_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'toValueSetDefinition'), ValueSetDefinitionReference, scope=MapVersion_, documentation=u'the specific value set definition that was used to resolve the  entities in this map', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 39, 5)))

MapVersion_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'toCodeSystemVersion'), CodeSystemVersionReference, scope=MapVersion_, documentation=u'the specific code system version that provided the entities in this map', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 44, 5)))

MapVersion_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'useCodeSystemVersion'), CodeSystemVersionReference, scope=MapVersion_, documentation=u'a list of code system versions that should be used in the resolution of \\\\  and/or  If present, this states that, for these code systems,\n\t\t\t\t\t\t\t\tthese specific versions are to be used.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 49, 5)))

MapVersion_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'applicableContext'), ContextReference, scope=MapVersion_, documentation=u'references to the realm, context or other external factor that determines the applicability of this particular map version', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 55, 5)))

MapVersion_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionTag'), VersionTagReference, scope=MapVersion_, documentation=u'a version tag assigned to this  instance by the implementing service', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 60, 5)))

MapVersion_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entries'), MapEntryDirectoryURI, scope=MapVersion_, documentation=u'a DirectoryURI that resolves to the set of  that are contained in this .', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 65, 5)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1865, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1870, 5))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1875, 5))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1880, 5))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1885, 5))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 29, 5))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 34, 5))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 39, 5))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 44, 5))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 49, 5))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 55, 5))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 60, 5))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 65, 5))
    counters.add(cc_24)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'rights')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndNotation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1865, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'predecessor')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1870, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1875, 5))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1880, 5))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialActivationDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1885, 5))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionOf')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 24, 5))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'fromValueSetDefinition')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 29, 5))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'fromCodeSystemVersion')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 34, 5))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'toValueSetDefinition')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 39, 5))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'toCodeSystemVersion')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 44, 5))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'useCodeSystemVersion')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 49, 5))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'applicableContext')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 55, 5))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionTag')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 60, 5))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(MapVersion_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'entries')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 65, 5))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_24, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapVersion_._Automaton = _BuildAutomaton_147()




ValueSetCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'definitions'), ValueSetDefinitionDirectoryURI, scope=ValueSetCatalogEntry_, documentation=u'a that references a set of definition (versions) for this value set. If the service profile does not support value set definitions, this attribute should be omitted. If the\n\t\t\t\t\t\t\t\tservice supports definitions but none are known for this value set, the parameter should be supplied, but will resolve to an empty directory.', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 21, 5)))

ValueSetCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'currentDefinition'), ValueSetDefinitionReference, scope=ValueSetCatalogEntry_, documentation=u'a reference to the definition associated with the CURRENT tag, if any ', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 27, 5)))

ValueSetCatalogEntry_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'currentResolution'), RenderingURI, scope=ValueSetCatalogEntry_, documentation=u'a URI that resolves to the resolution of this value set using the CURRENT tag for both the definition and the code system versions', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 32, 5)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 21, 5))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 27, 5))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 32, 5))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'rights')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1839, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'releaseFormat')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1845, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valueset, u'definitions')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 21, 5))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valueset, u'currentDefinition')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 27, 5))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntry_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valueset, u'currentResolution')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 32, 5))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValueSetCatalogEntry_._Automaton = _BuildAutomaton_148()




ValueSetDefinition_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'definedValueSet'), ValueSetReference, scope=ValueSetDefinition_, documentation=u'a reference to the value set being defined', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 14, 5)))

ValueSetDefinition_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'versionTag'), VersionTagReference, scope=ValueSetDefinition_, documentation=u'a version tag assigned to this definition by the implementing service', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 19, 5)))

ValueSetDefinition_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry'), ValueSetDefinitionEntry_, scope=ValueSetDefinition_, location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 24, 5)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1865, 5))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1870, 5))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1875, 5))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1880, 5))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1885, 5))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 19, 5))
    counters.add(cc_17)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'status')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 213, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'changeDescription')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 218, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'keyword')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1638, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceType')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1643, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1648, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'additionalDocumentation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1653, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndRole')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1658, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'rights')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1664, 5))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'note')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1669, 5))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'property')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1674, 5))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'alternateID')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1679, 5))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceStatements')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1686, 5))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'sourceAndNotation')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1865, 5))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'predecessor')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1870, 5))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1875, 5))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1880, 5))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialActivationDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1885, 5))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'definedValueSet')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 14, 5))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'versionTag')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 19, 5))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinition_._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'entry')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 24, 5))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueSetDefinition_._Automaton = _BuildAutomaton_149()




CodeSystemCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'versions'), CodeSystemVersionCatalogEntryDirectoryURI, scope=CodeSystemCatalogEntrySummary, documentation=u'a directory URI that resolves to an ordered list of code system versions associated with this code system.  may only be present if the service supports the  profile.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 120, 5)))

CodeSystemCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'currentVersion'), CodeSystemVersionReference, scope=CodeSystemCatalogEntrySummary, documentation=u'a reference to the code system version marked as  in the service instance.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 126, 5)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 120, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 126, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'versions')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 120, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystem, u'currentVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystem/CodeSystem.xsd', 126, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CodeSystemCatalogEntrySummary._Automaton = _BuildAutomaton_150()




CodeSystemVersionCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'versionOf'), CodeSystemReference, scope=CodeSystemVersionCatalogEntrySummary, documentation=u'the name, URI and, if supported by the service, link to the code system that this version represents.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 122, 5)))

CodeSystemVersionCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'codeSystemVersionTag'), VersionTagReference, scope=CodeSystemVersionCatalogEntrySummary, documentation=u'the tag(s) assigned to this version by the service provider.  identifies any roles that this version plays within the workflow of the current provider. As an example,\n\t\t\t\t\t\t\t\ta provider might assign the tags of "production" and "current" to a given code system version. With the exception of  the semantics of VersionTag are determined by the service\n\t\t\t\t\t\t\t\tprovider.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 127, 5)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1806, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1811, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 127, 5))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1806, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1811, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'versionOf')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 122, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CodeSystemVersionCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_codesystemversion, u'codeSystemVersionTag')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/codesystemversion/CodeSystemVersion.xsd', 127, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CodeSystemVersionCatalogEntrySummary._Automaton = _BuildAutomaton_151()




ConceptDomainCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'definingEntity'), NamedEntityReference, scope=ConceptDomainCatalogEntrySummary, documentation=u'a reference to an  that describes the domain and scope of meaning for the . If present, this association is equivalent to the\n\t\t\t\t\t\t\t\tdata_element_concept_domain association in section 11.2.3.2 of ISO 11179-3.  provides a definition for the  and potentially describes its relationship with other\n\t\t\t\t\t\t\t\t\t as well as providing a semantic link to the possible value meanings available to domain bindings.', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 92, 5)))

ConceptDomainCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'bindings'), ConceptDomainBindingDirectoryURI, scope=ConceptDomainCatalogEntrySummary, documentation=u'a URI that resolves to the known bindings (aka. Data Elements) of the referenced ', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 99, 5)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 92, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 99, 5))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'definingEntity')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 92, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConceptDomainCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_conceptdomain, u'bindings')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/conceptdomain/ConceptDomain.xsd', 99, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ConceptDomainCatalogEntrySummary._Automaton = _BuildAutomaton_152()




MapCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'fromCodeSystem'), CodeSystemReference, scope=MapCatalogEntrySummary, documentation=u'the  from which the source codes in the Map are drawn', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 112, 5)))

MapCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'fromValueSet'), ValueSetReference, scope=MapCatalogEntrySummary, documentation=u'the  from which the source codes in the Map are drawn', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 117, 5)))

MapCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'toCodeSystem'), CodeSystemReference, scope=MapCatalogEntrySummary, documentation=u'the  from which the target codes in the Map are drawn', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 122, 5)))

MapCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'toValueSet'), ValueSetReference, scope=MapCatalogEntrySummary, documentation=u'the  from which the source codes in the Map are drawn', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 127, 5)))

MapCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_map, u'currentVersion'), MapVersionReference, scope=MapCatalogEntrySummary, documentation=u'a reference to the map version with the  tag, if any', location=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 132, 5)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 112, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 117, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 122, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 127, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 132, 5))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'fromCodeSystem')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 112, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'fromValueSet')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 117, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'toCodeSystem')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 122, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'toValueSet')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 127, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MapCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_map, u'currentVersion')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/map/Map.xsd', 132, 5))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MapCatalogEntrySummary._Automaton = _BuildAutomaton_153()




MapVersionDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionOf'), MapReference, scope=MapVersionDirectoryEntry, documentation=u'a reference to the map that this is a version of', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 122, 5)))

MapVersionDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionTag'), VersionTagReference, scope=MapVersionDirectoryEntry, documentation=u'a reference to a version tag assigned to this entry by the implementing service', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 127, 5)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1806, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1811, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 127, 5))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1806, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MapVersionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1811, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MapVersionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionOf')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 122, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MapVersionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_mapversion, u'versionTag')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/mapversion/MapVersion.xsd', 127, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MapVersionDirectoryEntry._Automaton = _BuildAutomaton_154()




ValueSetCatalogEntrySummary._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valueset, u'currentDefinition'), ValueSetDefinitionReference, scope=ValueSetCatalogEntrySummary, documentation=u'the name and URI of the value set definition that is associated with the  tag for this value set. ', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 89, 5)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1L, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 89, 5))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetCatalogEntrySummary._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valueset, u'currentDefinition')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valueset/ValueSet.xsd', 89, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ValueSetCatalogEntrySummary._Automaton = _BuildAutomaton_155()




ValueSetDefinitionDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'definedValueSet'), ValueSetReference, scope=ValueSetDefinitionDirectoryEntry, documentation=u'the value set that this definition applies to', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 325, 5)))

ValueSetDefinitionDirectoryEntry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'versionTag'), VersionTagReference, scope=ValueSetDefinitionDirectoryEntry, documentation=u'a version tag assigned to this entry by the service instance', location=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 330, 5)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1806, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0L, max=1, metadata=pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1811, 5))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0L, max=None, metadata=pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 330, 5))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'resourceSynopsis')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1769, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialResourceVersionId')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1806, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_core, u'officialReleaseDate')), pyxb.utils.utility.Location('http://informatics.mayo.edu/cts2/spec/CTS2/1.1/core/Core.xsd', 1811, 5))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'definedValueSet')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 325, 5))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ValueSetDefinitionDirectoryEntry._UseForTag(pyxb.namespace.ExpandedName(_Namespace_valuesetdefinition, u'versionTag')), pyxb.utils.utility.Location(u'http://informatics.mayo.edu/cts2/spec/CTS2/1.1/valuesetdefinition/ValueSetDefinition.xsd', 330, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ValueSetDefinitionDirectoryEntry._Automaton = _BuildAutomaton_156()

